"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[7461],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(n),c=i,h=u["".concat(o,".").concat(c)]||u[c]||d[c]||l;return n?a.createElement(h,r(r({ref:t},m),{},{components:n})):a.createElement(h,r({ref:t},m))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4007:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var a=n(7462),i=(n(7294),n(3905));const l={},r="App Testing",s={unversionedId:"guides/apps/app_testing",id:"guides/apps/app_testing",isDocsHomePage:!1,title:"App Testing",description:"App Testing - What is it?",source:"@site/docs/guides/apps/020_app_testing.md",sourceDirName:"guides/apps",slug:"/guides/apps/app_testing",permalink:"/docs/guides/apps/app_testing",editUrl:"https://github.com/pipeforce/pipeforce.github.io/edit/master/docs/guides/apps/020_app_testing.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Basics",permalink:"/docs/apps"},next:{title:"App Installation",permalink:"/docs/guides/apps/app_deployment"}},o=[{value:"App Testing - What is it?",id:"app-testing---what-is-it",children:[],level:2},{value:"Testing JavaScript",id:"testing-javascript",children:[],level:2},{value:"Testing Pipelines",id:"testing-pipelines",children:[{value:"mockCommand(commandName)",id:"mockcommandcommandname",children:[{value:"Returns",id:"returns",children:[],level:4},{value:"Parameters",id:"parameters",children:[],level:4}],level:3},{value:"run()",id:"run",children:[{value:"Returns",id:"returns-1",children:[],level:4}],level:3},{value:"setPipelineFromPath(uri)",id:"setpipelinefrompathuri",children:[{value:"Returns",id:"returns-2",children:[],level:4},{value:"Parameters",id:"parameters-1",children:[],level:4}],level:3},{value:"thenSetBody(value)",id:"thensetbodyvalue",children:[{value:"Returns",id:"returns-3",children:[],level:4},{value:"Parameters",id:"parameters-2",children:[],level:4}],level:3},{value:"thenSetHeader(name, value)",id:"thensetheadername-value",children:[{value:"Returns",id:"returns-4",children:[],level:4},{value:"Parameters",id:"parameters-3",children:[],level:4}],level:3},{value:"thenSetVar(name, value)",id:"thensetvarname-value",children:[{value:"Returns",id:"returns-5",children:[],level:4},{value:"Parameters",id:"parameters-4",children:[],level:4}],level:3},{value:"when(condition)",id:"whencondition",children:[{value:"Returns",id:"returns-6",children:[],level:4},{value:"Parameters",id:"parameters-5",children:[],level:4}],level:3}],level:2},{value:"Executing tests",id:"executing-tests",children:[{value:"Using a command",id:"using-a-command",children:[],level:3},{value:"Using the CLI",id:"using-the-cli",children:[],level:3},{value:"Test Run Report",id:"test-run-report",children:[],level:3},{value:"Online Test Console",id:"online-test-console",children:[],level:3}],level:2},{value:"Report an Issue",id:"report-an-issue",children:[],level:2}],p={toc:o};function m(e){let{components:t,...l}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"app-testing"},"App Testing"),(0,i.kt)("h2",{id:"app-testing---what-is-it"},"App Testing - What is it?"),(0,i.kt)("p",null,"In any system, testing workflows and integrations is a very complex task because of many states, data conversions and different interfaces involved."),(0,i.kt)("p",null,"PIPEFORCE has many toolings and best practises to simplify testing."),(0,i.kt)("h2",{id:"testing-javascript"},"Testing JavaScript"),(0,i.kt)("p",null,"You can test your JavaScript scripts located inside ",(0,i.kt)("inlineCode",{parentName:"p"},"global/app/youapp/script")," by creating a function starting with name ",(0,i.kt)("inlineCode",{parentName:"p"},"test"),". Inside this method you can define your test asserts. In case such a test assert has been failed, throw an exception. "),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Best Practise")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"It's good practise to embed the test method directly inside the origin JavaScript source under test. This makes it easier to test and debug using your local development environment as well as to run the test remote."))),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'function helloWorld() {\n\n    return "Hello World!";\n}\n\nfunction testHelloWorld() {\n\n    // Your test goes here...\n\n    var result = helloWorld();\n    if(result != "Hello World!") {\n        throw "Expected \'Hello World!\' but was: " + result;\n    }\n}\n')),(0,i.kt)("h2",{id:"testing-pipelines"},"Testing Pipelines"),(0,i.kt)("p",null,"In order to test pipelines, it is best practise to create a JavaScript inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"global/app/yourapp/test")," folder which has the same name as the pipeline but ends with ",(0,i.kt)("inlineCode",{parentName:"p"},".test.pi.js"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"myapp"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pipeline"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"my-pipeline")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"my-pipeline.test.pi.js"))))))),(0,i.kt)("p",null,"Inside the test script you can load and mock commands of a pipeline like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'function testPipeline() {\n\n    var test = pipeforce.createPipelineTest();\n    test.setPipelineFromPath("uri:property:global/app/myapp/pipeline/my-pipeline");\n\n    test.mockCommand("event.listen")\n      .thenSetBody("...")\n      \n    // More mocking here...\n    \n    // Execute the pipeline\n    var resultMessage = test.run();\n    var resultBody = resultMessage.body;\n    \n    // Verify the result here...\n}\n')),(0,i.kt)("p",null,"Inside the test script you will have access to the implicit object ",(0,i.kt)("inlineCode",{parentName:"p"},"pipeforce"),". Using this object you can create a new instance of a pipeline test. Such a test instance contains plenty of useful test methods:"),(0,i.kt)("h3",{id:"mockcommandcommandname"},"mockCommand(commandName)"),(0,i.kt)("p",null,"Replaces the real command in the pipeline with a mock version."),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"test")," - The test instance."),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"commandName"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:null},"The name of the command to mock.")))),(0,i.kt)("h3",{id:"run"},"run()"),(0,i.kt)("p",null,"Runs the pipeline with mocked commands."),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"message")," - The resulting pipeline message after the execution of the pipeline under test."),(0,i.kt)("h3",{id:"setpipelinefrompathuri"},"setPipelineFromPath(uri)"),(0,i.kt)("p",null,"Defines the path to the pipeline script to be loaded for this test."),(0,i.kt)("h4",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"test")," - The test instance."),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"uri"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:null},"The uri to the pipeline script.")))),(0,i.kt)("h3",{id:"thensetbodyvalue"},"thenSetBody(value)"),(0,i.kt)("p",null,"A value or Pipeline Expression to be set on the body in case this mock applies."),(0,i.kt)("h4",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"test")," - The test instance."),(0,i.kt)("h4",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"value"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"any")),(0,i.kt)("td",{parentName:"tr",align:null},"The value or Pipeline Expression to be set as body.")))),(0,i.kt)("h3",{id:"thensetheadername-value"},"thenSetHeader(name, value)"),(0,i.kt)("p",null,"A value or Pipeline Expression to be set as header in case this mock applies."),(0,i.kt)("h4",{id:"returns-4"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"test")," - The test instance."),(0,i.kt)("h4",{id:"parameters-3"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"name"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:null},"The name of the header to set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"value"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"any")),(0,i.kt)("td",{parentName:"tr",align:null},"The value or Pipeline Expression to be set as header.")))),(0,i.kt)("h3",{id:"thensetvarname-value"},"thenSetVar(name, value)"),(0,i.kt)("p",null,"A value or Pipeline Expression to be set as variable in case this mock applies."),(0,i.kt)("h4",{id:"returns-5"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"test")," - The test instance."),(0,i.kt)("h4",{id:"parameters-4"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"name"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:null},"The name of the variable to set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"value"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"any")),(0,i.kt)("td",{parentName:"tr",align:null},"The value or Pipeline Expression to be set as var.")))),(0,i.kt)("h3",{id:"whencondition"},"when(condition)"),(0,i.kt)("p",null,"A condition as Pipeline Expression to define when a command must be mocked. For example only it has a certain ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," or parameter given."),(0,i.kt)("h4",{id:"returns-6"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"test")," - The test instance."),(0,i.kt)("h4",{id:"parameters-5"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"condition"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:null},"The condition as Pipeline Expression.")))),(0,i.kt)("h2",{id:"executing-tests"},"Executing tests"),(0,i.kt)("p",null,"You have multiple options to run tests stored in PIPEFORCE."),(0,i.kt)("h3",{id:"using-a-command"},"Using a command"),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("a",{parentName:"p",href:"../../../docs/api/commands#testrun-v1"},(0,i.kt)("inlineCode",{parentName:"a"},"test.run"))," command to run the tests:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n  - test.run\n")),(0,i.kt)("h3",{id:"using-the-cli"},"Using the CLI"),(0,i.kt)("p",null,"In order to execute a test run using the CLI use this line in your terminal:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pi command test.run\n")),(0,i.kt)("h3",{id:"test-run-report"},"Test Run Report"),(0,i.kt)("p",null,"When executing via CLI or command, the result will always be a test run report in JSON format which has a structure similar to this example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "testUnits": [\n    \n    {\n      "location": "/path/to/the/test/mytestscript",\n      "type": "js",\n      "unitResult": "FAILED"\n      "tests": [\n        {\n          "testResult": "PASSED",\n          "testName": "testMethodName1",\n          "testStartLine": lineNumberOfTestMethod,\n          "testDuration": {\n            "startTime": "2021-12-26T06:19:35.899Z",\n            "timeElapsed": "00:00:00.049",\n            "timeElapsedInMs": 49,\n            "startTimeInMs": 1640499575899\n          },\n          exception: null\n        },\n        {\n          "testResult": "FAILED",\n          "testName": "testMethodName2",\n          "testStartLine": lineNumberOfTestMethod,\n          "testDuration": {\n            "startTime": "2021-12-26T06:19:35.899Z",\n            "timeElapsed": "00:00:00.445",\n            "timeElapsedInMs": 445,\n            "startTimeInMs": 1640499575900\n          },\n          "exception": "Assert failed foo bar."\n        }\n      ],\n      "unitSummary": {\n        "total": 2,\n        "passed": 1,\n        "failed": 1, \n        "error": 0,\n        "ignored": 0\n      },\n      "unitDuration": {\n        "startTime": "2021-12-26T06:19:35.899Z",\n        "timeElapsed": "00:00:00.049",\n        "timeElapsedInMs": 49,\n        "startTimeInMs": 1640499575899\n      },\n    }\n    \n    ...\n  ],\n  \n  "locationPatterns": ["globa/app/*/script/*"],\n  "overallSummary": {\n    "total": 10,\n    "passed": 7,\n    "failed": 2, \n    "error": 0,\n    "ignored": 1\n  },\n  "overallDuration": {\n    "startTime": "2021-12-26T06:19:35.899Z",\n    "timeElapsed": "00:00:00.445",\n    "timeElapsedInMs": 445,\n    "startTimeInMs": 1640499575900\n  },\n  "overallResult": "FAILED"\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testUnits")," = An array of all test units (= test scripts)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"location")," = The location of the test script in the property editor."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"type")," = The script type. Is usually always js = JavaScript."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unitResult")," = The final result of the test unit (= ",(0,i.kt)("inlineCode",{parentName:"li"},"PASSED")," if all passed, ",(0,i.kt)("inlineCode",{parentName:"li"},"FAILED")," if at least one has been failed). One of ",(0,i.kt)("inlineCode",{parentName:"li"},"PASSED"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"FAILED"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"ERROR")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"IGNORED"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tests")," = An array containing all tests found in the location script and their result.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testResult")," = The test result. One of ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PASSED")," = Test run was successful."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"FAILED")," = Test run was not successful because of an assert has been failed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ERROR")," = Test run was not successful because an exception has been thrown."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"IGNORED")," = The test was not executed because if was marked as ignore."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testName")," = The name of the test (method) inside the test script."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testStartLine")," = The line number where the test (method) is located or null in case it could not be detected."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testDuration")," = Start time and duration information of the test run."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"exception")," = The exception message in case of FAILED or ERROR. This value is null in any other cases."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unitSummary")," = A summary of all tests of this unit."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unitDuration")," = Start time and duration information of all tests in this unit"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"locationpatterns")," = The patterns passed to the test.run command."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overallSummary")," = A summary of all tests."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overallDuration")," = Start time and duration information of the overall test run."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overallResult")," = The final result of the full test run. One of ",(0,i.kt)("inlineCode",{parentName:"li"},"PASSED"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"FAILED"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"ERROR"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"IGNORED")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"NO_TESTS"),".")),(0,i.kt)("h3",{id:"online-test-console"},"Online Test Console"),(0,i.kt)("p",null,"You can run all of your remote tests also online using the Test Console. To do so, login to PIPEFORCE with your developer account and then in the ",(0,i.kt)("inlineCode",{parentName:"p"},"LOW CODE")," section click on ",(0,i.kt)("inlineCode",{parentName:"p"},"Test Console")," and then ",(0,i.kt)("inlineCode",{parentName:"p"},"Run Tests"),". The test result is finally shown as a test report like this example shows:"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(2401).Z})),(0,i.kt)("h2",{id:"report-an-issue"},"Report an Issue"),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Your help is needed!")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"In case you're missing something on this page, you found an error or you have an idea for improvement, please ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/pipeforce/pipeforce.github.io/issues/new"},"click here to create a new issue"),". Another way to contribute is, to click ",(0,i.kt)("strong",{parentName:"p"},"Edit this page")," below and directly add your changes in GitHub. Many thanks for your contribution in order to improve PIPEFORCE!"))))}m.isMDXComponent=!0},2401:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/test-console-540fc4b9dc953b8b841a58b21465ee85.png"}}]);