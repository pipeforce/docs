"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[7461],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=o(n),c=i,k=d["".concat(p,".").concat(c)]||d[c]||m[c]||l;return n?a.createElement(k,r(r({ref:t},u),{},{components:n})):a.createElement(k,r({ref:t},u))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var o=2;o<l;o++)r[o]=n[o];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4007:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var a=n(7462),i=(n(7294),n(3905));const l={},r="App Testing",s={unversionedId:"guides/apps/app_testing",id:"guides/apps/app_testing",title:"App Testing",description:"App Testing - What is it?",source:"@site/docs/guides/apps/020_app_testing.md",sourceDirName:"guides/apps",slug:"/guides/apps/app_testing",permalink:"/docs/guides/apps/app_testing",draft:!1,editUrl:"https://github.com/pipeforce/pipeforce.github.io/edit/master/docs/guides/apps/020_app_testing.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Basics",permalink:"/docs/apps"},next:{title:"App Installation",permalink:"/docs/guides/apps/app_deployment"}},p={},o=[{value:"App Testing - What is it?",id:"app-testing---what-is-it",level:2},{value:"Testing Functions (since 9.0.0)",id:"testing-functions-since-900",level:2},{value:"Testing Pipelines (deprecated, will be dropped in 9.0)",id:"testing-pipelines-deprecated-will-be-dropped-in-90",level:2},{value:"mockCommand(commandName)",id:"mockcommandcommandname",level:3},{value:"Returns",id:"returns",level:4},{value:"Parameters",id:"parameters",level:4},{value:"run()",id:"run",level:3},{value:"Returns",id:"returns-1",level:4},{value:"setPipelineFromPath(uri)",id:"setpipelinefrompathuri",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"thenSetBody(value)",id:"thensetbodyvalue",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"thenSetHeader(name, value)",id:"thensetheadername-value",level:3},{value:"Returns",id:"returns-4",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"thenSetVar(name, value)",id:"thensetvarname-value",level:3},{value:"Returns",id:"returns-5",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"when(condition)",id:"whencondition",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Executing tests",id:"executing-tests",level:2},{value:"Using a command",id:"using-a-command",level:3},{value:"Using the CLI",id:"using-the-cli",level:3},{value:"Test Run Report",id:"test-run-report",level:3},{value:"Online Test Console",id:"online-test-console",level:3},{value:"Report an Issue",id:"report-an-issue",level:2}],u={toc:o};function m(e){let{components:t,...l}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"app-testing"},"App Testing"),(0,i.kt)("h2",{id:"app-testing---what-is-it"},"App Testing - What is it?"),(0,i.kt)("p",null,"In any system, testing workflows and integrations is a very complex task because of many states, data conversions and different interfaces involved."),(0,i.kt)("p",null,"PIPEFORCE has many toolings and best practises to simplify testing."),(0,i.kt)("h2",{id:"testing-functions-since-900"},"Testing Functions (since 9.0.0)"),(0,i.kt)("p",null,"You can test your function by creating another function starting with name ",(0,i.kt)("inlineCode",{parentName:"p"},"test_"),". Inside this function you can define your test asserts. In case such a test assert has been failed, throw an exception. "),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def  helloworld():\n    return "Hello World!"\n\ndef test_helloworld():\n\n    // Your test goes here...\n\n    result = helloWorld()\n    if result != "Hello World!"\n        raise Exception("Expected \'Hello World!\' but was: " + result)\n  \n')),(0,i.kt)("p",null,"When you call the command ",(0,i.kt)("inlineCode",{parentName:"p"},"test.run"),", it will automatically pick up all functions starting with ",(0,i.kt)("inlineCode",{parentName:"p"},"test_")," and execute them. More details about ",(0,i.kt)("inlineCode",{parentName:"p"},"test.run")," see below."),(0,i.kt)("h2",{id:"testing-pipelines-deprecated-will-be-dropped-in-90"},"Testing Pipelines (deprecated, will be dropped in 9.0)"),(0,i.kt)("p",null,"You can also use functions in order to test pipelines, it is best practise to create a JavaScript inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"global/app/yourapp/test")," folder which has the same name as the pipeline but ends with ",(0,i.kt)("inlineCode",{parentName:"p"},".test.pi.js"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"myapp"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pipeline"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"my-pipeline")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"my-pipeline.test.pi.js"))))))),(0,i.kt)("p",null,"Inside the test script you can load and mock commands of a pipeline like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'function testPipeline() {\n\n    var test = pipeforce.createPipelineTest();\n    test.setPipelineFromPath("uri:property:global/app/myapp/pipeline/my-pipeline");\n\n    test.mockCommand("event.listen")\n      .thenSetBody("...")\n      \n    // More mocking here...\n    \n    // Execute the pipeline\n    var resultMessage = test.run();\n    var resultBody = resultMessage.body;\n    \n    // Verify the result here...\n}\n')),(0,i.kt)("p",null,"Inside the test script you will have access to the implicit object ",(0,i.kt)("inlineCode",{parentName:"p"},"pipeforce"),". Using this object you can create a new instance of a pipeline test. Such a test instance contains plenty of useful test methods:"),(0,i.kt)("h3",{id:"mockcommandcommandname"},"mockCommand(commandName)"),(0,i.kt)("p",null,"Replaces the real command in the pipeline with a mock version."),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"test")," - The test instance."),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"commandName"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:null},"The name of the command to mock.")))),(0,i.kt)("h3",{id:"run"},"run()"),(0,i.kt)("p",null,"Runs the pipeline with mocked commands."),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"message")," - The resulting pipeline message after the execution of the pipeline under test."),(0,i.kt)("h3",{id:"setpipelinefrompathuri"},"setPipelineFromPath(uri)"),(0,i.kt)("p",null,"Defines the path to the pipeline script to be loaded for this test."),(0,i.kt)("h4",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"test")," - The test instance."),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"uri"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:null},"The uri to the pipeline script.")))),(0,i.kt)("h3",{id:"thensetbodyvalue"},"thenSetBody(value)"),(0,i.kt)("p",null,"A value or Pipeline Expression to be set on the body in case this mock applies."),(0,i.kt)("h4",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"test")," - The test instance."),(0,i.kt)("h4",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"value"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"any")),(0,i.kt)("td",{parentName:"tr",align:null},"The value or Pipeline Expression to be set as body.")))),(0,i.kt)("h3",{id:"thensetheadername-value"},"thenSetHeader(name, value)"),(0,i.kt)("p",null,"A value or Pipeline Expression to be set as header in case this mock applies."),(0,i.kt)("h4",{id:"returns-4"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"test")," - The test instance."),(0,i.kt)("h4",{id:"parameters-3"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"name"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:null},"The name of the header to set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"value"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"any")),(0,i.kt)("td",{parentName:"tr",align:null},"The value or Pipeline Expression to be set as header.")))),(0,i.kt)("h3",{id:"thensetvarname-value"},"thenSetVar(name, value)"),(0,i.kt)("p",null,"A value or Pipeline Expression to be set as variable in case this mock applies."),(0,i.kt)("h4",{id:"returns-5"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"test")," - The test instance."),(0,i.kt)("h4",{id:"parameters-4"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"name"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:null},"The name of the variable to set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"value"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"any")),(0,i.kt)("td",{parentName:"tr",align:null},"The value or Pipeline Expression to be set as var.")))),(0,i.kt)("h3",{id:"whencondition"},"when(condition)"),(0,i.kt)("p",null,"A condition as Pipeline Expression to define when a command must be mocked. For example only it has a certain ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," or parameter given."),(0,i.kt)("h4",{id:"returns-6"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"test")," - The test instance."),(0,i.kt)("h4",{id:"parameters-5"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"condition"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:null},"The condition as Pipeline Expression.")))),(0,i.kt)("h2",{id:"executing-tests"},"Executing tests"),(0,i.kt)("p",null,"You have multiple options to run tests stored in PIPEFORCE."),(0,i.kt)("h3",{id:"using-a-command"},"Using a command"),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("a",{parentName:"p",href:"../../../docs/api/commands#testrun-v1"},(0,i.kt)("inlineCode",{parentName:"a"},"test.run"))," command to run the tests:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n  - test.run\n")),(0,i.kt)("h3",{id:"using-the-cli"},"Using the CLI"),(0,i.kt)("p",null,"In order to execute a test run using the CLI use this line in your terminal:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pi command test.run\n")),(0,i.kt)("h3",{id:"test-run-report"},"Test Run Report"),(0,i.kt)("p",null,"When executing via CLI or command, the result will always be a test run report in JSON format which has a structure similar to this example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "testUnits": [\n    \n    {\n      "location": "/path/to/the/test/mytestscript",\n      "type": "js",\n      "unitResult": "FAILED"\n      "tests": [\n        {\n          "testResult": "PASSED",\n          "testName": "testMethodName1",\n          "testStartLine": lineNumberOfTestMethod,\n          "testDuration": {\n            "startTime": "2021-12-26T06:19:35.899Z",\n            "timeElapsed": "00:00:00.049",\n            "timeElapsedInMs": 49,\n            "startTimeInMs": 1640499575899\n          },\n          exception: null\n        },\n        {\n          "testResult": "FAILED",\n          "testName": "testMethodName2",\n          "testStartLine": lineNumberOfTestMethod,\n          "testDuration": {\n            "startTime": "2021-12-26T06:19:35.899Z",\n            "timeElapsed": "00:00:00.445",\n            "timeElapsedInMs": 445,\n            "startTimeInMs": 1640499575900\n          },\n          "exception": "Assert failed foo bar."\n        }\n      ],\n      "unitSummary": {\n        "total": 2,\n        "passed": 1,\n        "failed": 1, \n        "error": 0,\n        "ignored": 0\n      },\n      "unitDuration": {\n        "startTime": "2021-12-26T06:19:35.899Z",\n        "timeElapsed": "00:00:00.049",\n        "timeElapsedInMs": 49,\n        "startTimeInMs": 1640499575899\n      },\n    }\n    \n    ...\n  ],\n  \n  "locationPatterns": ["globa/app/*/script/*"],\n  "overallSummary": {\n    "total": 10,\n    "passed": 7,\n    "failed": 2, \n    "error": 0,\n    "ignored": 1\n  },\n  "overallDuration": {\n    "startTime": "2021-12-26T06:19:35.899Z",\n    "timeElapsed": "00:00:00.445",\n    "timeElapsedInMs": 445,\n    "startTimeInMs": 1640499575900\n  },\n  "overallResult": "FAILED"\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testUnits")," = An array of all test units (= test scripts)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"location")," = The location of the test script in the property editor."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"type")," = The script type. Is usually always js = JavaScript."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unitResult")," = The final result of the test unit (= ",(0,i.kt)("inlineCode",{parentName:"li"},"PASSED")," if all passed, ",(0,i.kt)("inlineCode",{parentName:"li"},"FAILED")," if at least one has been failed). One of ",(0,i.kt)("inlineCode",{parentName:"li"},"PASSED"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"FAILED"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"ERROR")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"IGNORED"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tests")," = An array containing all tests found in the location script and their result.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testResult")," = The test result. One of ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PASSED")," = Test run was successful."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"FAILED")," = Test run was not successful because of an assert has been failed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ERROR")," = Test run was not successful because an exception has been thrown."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"IGNORED")," = The test was not executed because if was marked as ignore."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testName")," = The name of the test (method) inside the test script."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testStartLine")," = The line number where the test (method) is located or null in case it could not be detected."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testDuration")," = Start time and duration information of the test run."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"exception")," = The exception message in case of FAILED or ERROR. This value is null in any other cases."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unitSummary")," = A summary of all tests of this unit."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unitDuration")," = Start time and duration information of all tests in this unit"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"locationpatterns")," = The patterns passed to the test.run command."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overallSummary")," = A summary of all tests."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overallDuration")," = Start time and duration information of the overall test run."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overallResult")," = The final result of the full test run. One of ",(0,i.kt)("inlineCode",{parentName:"li"},"PASSED"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"FAILED"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"ERROR"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"IGNORED")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"NO_TESTS"),".")),(0,i.kt)("h3",{id:"online-test-console"},"Online Test Console"),(0,i.kt)("p",null,"You can run all of your remote tests also online using the ",(0,i.kt)("strong",{parentName:"p"},"Tests")," view. To do so, login to PIPEFORCE with your developer account and then in the ",(0,i.kt)("inlineCode",{parentName:"p"},"LOW CODE")," section click on ",(0,i.kt)("inlineCode",{parentName:"p"},"Tests")," and then ",(0,i.kt)("inlineCode",{parentName:"p"},"Run Tests"),". The test result is finally shown as a test report like this example shows:"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(6037).Z,width:"1211",height:"745"})),(0,i.kt)("h2",{id:"report-an-issue"},"Report an Issue"),(0,i.kt)("admonition",{title:"Your help is needed!",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"In case you're missing something on this page, you found an error or you have an idea for improvement, please ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/pipeforce/pipeforce.github.io/issues/new"},"click here to create a new issue"),". Another way to contribute is, to click ",(0,i.kt)("strong",{parentName:"p"},"Edit this page")," below and directly add your changes in GitHub. Many thanks for your contribution in order to improve PIPEFORCE!")))}m.isMDXComponent=!0},6037:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/test-console-540fc4b9dc953b8b841a58b21465ee85.png"}}]);