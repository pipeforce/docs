"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[6964],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>y});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function p(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?p(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):p(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},p=Object.keys(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),s=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,p=e.originalType,o=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=s(a),y=r,c=u["".concat(o,".").concat(y)]||u[y]||m[y]||p;return a?n.createElement(c,l(l({ref:t},d),{},{components:a})):n.createElement(c,l({ref:t},d))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=a.length,l=new Array(p);l[0]=u;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<p;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7763:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>p,metadata:()=>i,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const p={id:"basics",title:"Property Store",sidebar_label:"Basics",slug:"/propertystore"},l=void 0,i={unversionedId:"guides/propertystore/basics",id:"guides/propertystore/basics",title:"Property Store",description:"Since Version: 3.0",source:"@site/docs/guides/propertystore/10_propertystore-basics.md",sourceDirName:"guides/propertystore",slug:"/propertystore",permalink:"/docs/propertystore",draft:!1,editUrl:"https://github.com/pipeforce/pipeforce.github.io/edit/master/docs/guides/propertystore/10_propertystore-basics.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{id:"basics",title:"Property Store",sidebar_label:"Basics",slug:"/propertystore"},sidebar:"tutorialSidebar",previous:{title:"3. Connectors",permalink:"/docs/guides/connectors"},next:{title:"HTTP API",permalink:"/docs/guides/propertystore/http_api"}},o={},s=[{value:"What is the Property Store?",id:"what-is-the-property-store",level:2},{value:"What is a Property?",id:"what-is-a-property",level:2},{value:"Property Attributes",id:"property-attributes",level:3},{value:"Property Key",id:"property-key",level:3},{value:"Property Key Pattern",id:"property-key-pattern",level:3},{value:"Property Value and Type",id:"property-value-and-type",level:3},{value:"Binary Value",id:"binary-value",level:3},{value:"Create a Property",id:"create-a-property",level:2},{value:"Property created event",id:"property-created-event",level:3},{value:"Update a Property",id:"update-a-property",level:2},{value:"Property changed event",id:"property-changed-event",level:3},{value:"Property moved event",id:"property-moved-event",level:3},{value:"Delete a Property",id:"delete-a-property",level:2},{value:"Property deleted event",id:"property-deleted-event",level:3},{value:"Loading Properties",id:"loading-properties",level:2},{value:"Listing properties",id:"listing-properties",level:3},{value:"Getting property value",id:"getting-property-value",level:3},{value:"Advanced Querying",id:"advanced-querying",level:3},{value:"Report an Issue",id:"report-an-issue",level:2}],d={toc:s};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",{class:"theme-doc-version-badge badge badge--secondary"},"Since Version: 3.0"),(0,r.kt)("h2",{id:"what-is-the-property-store"},"What is the Property Store?"),(0,r.kt)("p",null,"The property store is the core database in PIPEFORCE to save all your application data. You can create, update, query and delete data on the property store using the  ",(0,r.kt)("a",{parentName:"p",href:"../../../api/commands#property-v1"},(0,r.kt)("inlineCode",{parentName:"a"},"property.*"))," commands. "),(0,r.kt)("h2",{id:"what-is-a-property"},"What is a Property?"),(0,r.kt)("p",null,"Each data (for example plain text, JSON, binary data, ...) stored in the property store is wrapped into an envelope called a ",(0,r.kt)("strong",{parentName:"p"},"property"),". "),(0,r.kt)("h3",{id:"property-attributes"},"Property Attributes"),(0,r.kt)("p",null,"Each property has multiple attributes (the envelope data). The most important ones are:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"key")),(0,r.kt)("td",{parentName:"tr",align:null},"The unique, absolute key path of the property. This value can change over time, for example, if a property was moved to another virtual location. ",(0,r.kt)("br",null),(0,r.kt)("br",null),"Example value: ",(0,r.kt)("inlineCode",{parentName:"td"},"/pipeforce/enterprise/global/app/myapp/data/hello"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uuid")),(0,r.kt)("td",{parentName:"tr",align:null},"A unqiue identificator of the property. Differently to ",(0,r.kt)("inlineCode",{parentName:"td"},"key"),", once created, this ",(0,r.kt)("strong",{parentName:"td"},"will never change"),".  ",(0,r.kt)("br",null),(0,r.kt)("br",null),"Example value: ",(0,r.kt)("inlineCode",{parentName:"td"},"333a38e7-9188-4135-b87b-3d890f676445"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"value")),(0,r.kt)("td",{parentName:"tr",align:null},"This attribute contains the payload of the property as string. ",(0,r.kt)("br",null),(0,r.kt)("br",null),"Example value: ",(0,r.kt)("inlineCode",{parentName:"td"},'{\\"hello\\": \\"world\\"}'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type")),(0,r.kt)("td",{parentName:"tr",align:null},"This attribute contains the mime type of the value. If this attribute is ",(0,r.kt)("inlineCode",{parentName:"td"},"null"),", it is expected that the mime type of the value is of the default type: ",(0,r.kt)("inlineCode",{parentName:"td"},"text/plain"),". ",(0,r.kt)("br",null),(0,r.kt)("br",null),"Example value: ",(0,r.kt)("inlineCode",{parentName:"td"},"application/json"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"created")),(0,r.kt)("td",{parentName:"tr",align:null},"A unix epoch timestamp in millis when this property was created. ",(0,r.kt)("br",null),(0,r.kt)("br",null),"Example value: ",(0,r.kt)("inlineCode",{parentName:"td"},"1613397114448"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"updated")),(0,r.kt)("td",{parentName:"tr",align:null},"A unix epoch timestamp in millis when this property was updated last or ",(0,r.kt)("inlineCode",{parentName:"td"},"null")," in case it was never updated after creation. ",(0,r.kt)("br",null),(0,r.kt)("br",null),"Example value: ",(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"timeToLive")),(0,r.kt)("td",{parentName:"tr",align:null},"The time to live (ttl) in minutes of this property since creation. If the time to live has been expired, the property is eligable to be deleted. Usually one of the next cleanup jobs will then delete this property. There is no guarantee that the property is deleted exactly after this time has expired. If the value of ",(0,r.kt)("strong",{parentName:"td"},"timeToLive")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"0")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"null")," (default), the property will never be deleted. ",(0,r.kt)("br",null),(0,r.kt)("br",null),"Example value: ",(0,r.kt)("inlineCode",{parentName:"td"},"5"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"locked")),(0,r.kt)("td",{parentName:"tr",align:null},"A boolean value indicating whether this property has a lock assigned. In case a lock is assigned, the property can only be altered by the user or group, this lock is exclusive to. See section ",(0,r.kt)("a",{parentName:"td",href:"/docs/guides/propertystore/property_locks"},"Property Locking")," for more details.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"trashed")),(0,r.kt)("td",{parentName:"tr",align:null},"A boolean value indicating whether this property has been moved to the trash bin. See section ",(0,r.kt)("a",{parentName:"td",href:"/docs/guides/propertystore/trash_bin"},"Trash Bin")," for more details.")))),(0,r.kt)("h3",{id:"property-key"},"Property Key"),(0,r.kt)("p",null,"Every property has a unique ",(0,r.kt)("strong",{parentName:"p"},"key"),". Such a property key is structured in an ",(0,r.kt)("strong",{parentName:"p"},"hierarchical way")," and has this base structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"/pipeforce/<namespace>/<localPath>\n")),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"/pipeforce/mynamespace/global/app/myapp/config/app\n")),(0,r.kt)("p",null,"Every property belongs to a certain namespace. If such a key starts with a slash ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," at the beginning, it is interpreted as absolute. Meaning, it must start with ",(0,r.kt)("inlineCode",{parentName:"p"},"/pipeforce")," followed by the namespace, this property belongs to. Properties are always stored with their absolute key in the property store."),(0,r.kt)("p",null,"At runtime, property keys can be defined and interpreted relatively. Here is an example of an relative key of a property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"global/app/myapp/config/app\n")),(0,r.kt)("p",null,"Relative property keys do not start with a slash. They do not contain information about the current namespace. This information is automatically added when a property is loaded or stored."),(0,r.kt)("admonition",{title:"Why property key?",type:"tip"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"It defines the ",(0,r.kt)("strong",{parentName:"li"},"unqiue path")," of a property in a tree structure. "),(0,r.kt)("li",{parentName:"ul"},"It makes it ",(0,r.kt)("strong",{parentName:"li"},"easier to query"),' a nested subset of properties "recursively" using path patterns.'),(0,r.kt)("li",{parentName:"ul"},"It allows to ",(0,r.kt)("strong",{parentName:"li"},"group properties"),' together under a "path-like" structure.'),(0,r.kt)("li",{parentName:"ul"},"It is also used for declaring nested read and write ",(0,r.kt)("strong",{parentName:"li"},"permissions"),"."),(0,r.kt)("li",{parentName:"ul"},"It defines the ",(0,r.kt)("strong",{parentName:"li"},"storage location")," of the property for performance optimization (for example archive is stored on a different location)"))),(0,r.kt)("h3",{id:"property-key-pattern"},"Property Key Pattern"),(0,r.kt)("p",null,'Since the key of a property is similar to a path in a tree, it is possible to use path matching techniques in order to easily find and load a nsted subset of properties "recursively" from the store. By default, PIPEFORCE uses the so called "ant-style" path matcher. This matcher uses the following rules, applied to a key:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The double asterisk ",(0,r.kt)("inlineCode",{parentName:"li"},"**")," matches any character in the key at given position."),(0,r.kt)("li",{parentName:"ul"},"The single asterisk ",(0,r.kt)("inlineCode",{parentName:"li"},"*"),' matches zero or more charachters inside a "directory" of the key (up to the next slash ',(0,r.kt)("inlineCode",{parentName:"li"},"/"),").")),(0,r.kt)("p",null,"The asterisk ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," is often also called ",(0,r.kt)("strong",{parentName:"p"},"wildcard"),". A property key containing wildcards are called a ",(0,r.kt)("strong",{parentName:"p"},"key pattern")," or ",(0,r.kt)("strong",{parentName:"p"},"path pattern"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"global/app/myapp/**\n")),(0,r.kt)("p",null,"This key pattern will select all properties having a key starting with ",(0,r.kt)("inlineCode",{parentName:"p"},"global/app/myapp")," at ",(0,r.kt)("strong",{parentName:"p"},"any sublevel"),". So it will match these keys:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"global/app/myapp/config/app\nglobal/app/myapp/pipeline/mypipeline\nglobal/app/myapp/sub1/sub2/sub3/sub4/sub5/sub6/file\n")),(0,r.kt)("p",null,"But it won't mach these keys:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"global/app/ontherapp/config/app\nglobal/something\ntmp/data\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"global/app/myapp/*\n")),(0,r.kt)("p",null,"This key pattern will select all properties having a key starting with ",(0,r.kt)("inlineCode",{parentName:"p"},"global/app/myapp")," inside ",(0,r.kt)("strong",{parentName:"p"},"this level"),' (meaning inside the "directory" ',(0,r.kt)("inlineCode",{parentName:"p"},"myapp"),") but ",(0,r.kt)("strong",{parentName:"p"},"not")," at any sublevel. So it will match these keys:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"global/app/myapp/file1\nglobal/app/myapp/file2\nglobal/app/myapp/another\n")),(0,r.kt)("p",null,"But it won't match these keys:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"global/app/myapp/config/app\nglobal/app/ontherapp/config/app\ntmp/data\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 3")),(0,r.kt)("p",null,"It is also possible to combine multiple wildcards inside a pattern."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"global/app/*/data/**\n")),(0,r.kt)("p",null,"This key pattern will match any key starting with prefix ",(0,r.kt)("inlineCode",{parentName:"p"},"global/app"),", followed by any app name (without any slash), followed by ",(0,r.kt)("inlineCode",{parentName:"p"},"/data/"),", followed by any further charachters at any level. It will match these keys:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"global/app/myapp/data/user\nglobal/app/ontherapp/data/user\nglobal/app/third/data/folder/file\n")),(0,r.kt)("p",null,"But it won't match these keys:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"global/app/myapp/config/app\ntmp/data\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 4")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"*\n")),(0,r.kt)("p",null,"This pattern would match any relative key at top level, but not any sub-level. So it will match these keys:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"resourceA\nresourceB\n")),(0,r.kt)("p",null,"But it won't match these keys:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"folder/file1\nfolder/folder2/file2\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 5")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"**\n")),(0,r.kt)("p",null,"This pattern will match anything at any level. So it will match these keys:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"resourceA\nresourceB\nfolder/file1\nfolder/folder2/file2\n")),(0,r.kt)("p",null,"There is no key, this pattern will not match."),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Since the catch-all pattern ",(0,r.kt)("inlineCode",{parentName:"p"},"**")," (without any additional path information) will match anything, it should be used very rarely. It can cause huge performance impacts. Because of this reason, the catch-all is not everywhere allowed. So think twice before using it.")),(0,r.kt)("h3",{id:"property-value-and-type"},"Property Value and Type"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," attribute of a property defines the ",(0,r.kt)("strong",{parentName:"p"},"payload")," of a property. Such a payload could be a JSON document or a plain text for example. It is always stored as string (text) value. Which type the text value represents, is defined by the ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," attribute which could be of any supported mime type e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"application/json")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"text/plain"),". The latter is the default, if no type is specified. Important mime types, used by PIPEFORCE are:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Mime Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"application/javascript")),(0,r.kt)("td",{parentName:"tr",align:null},"A JavaScript script (deprecated, use ",(0,r.kt)("inlineCode",{parentName:"td"},"text/javascript")," whenever possible).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"application/json")),(0,r.kt)("td",{parentName:"tr",align:null},"JSON document.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"application/yaml")),(0,r.kt)("td",{parentName:"tr",align:null},"YAML document (not IANA listed).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"application/xml")),(0,r.kt)("td",{parentName:"tr",align:null},"XML document as part of an application.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"text/html")),(0,r.kt)("td",{parentName:"tr",align:null},"HTML document.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"text/javascript")),(0,r.kt)("td",{parentName:"tr",align:null},"A JavaScript script.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"text/plain")),(0,r.kt)("td",{parentName:"tr",align:null},"Plain text document (string). This is the default, if no ",(0,r.kt)("inlineCode",{parentName:"td"},"type")," has been specified for a property.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"text/xml")),(0,r.kt)("td",{parentName:"tr",align:null},"XML document.")))),(0,r.kt)("p",null,"See the IANA.org websites for a full list of official mime types:\n",(0,r.kt)("a",{parentName:"p",href:"https://www.iana.org/assignments/media-types/media-types.xhtml"},"https://www.iana.org/assignments/media-types/media-types.xhtml")),(0,r.kt)("p",null,"Property types can additionally contain parameters. Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"text/plain; charset=UTF8\n")),(0,r.kt)("p",null,"Multiple parameters are separated by a colon ",(0,r.kt)("inlineCode",{parentName:"p"},";"),". See the ",(0,r.kt)("a",{parentName:"p",href:"https://www.iana.org/assignments/media-types-parameters/media-types-parameters.xhtml"},"IANA specification")," for details. PIPEFORCE uses custom type parameters in some situations. Some examples:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"text/plain; encoding=base64")),(0,r.kt)("td",{parentName:"tr",align:null},"Indicates, that the property value is a base64 encoded string.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"application/yaml; type=pipeline")),(0,r.kt)("td",{parentName:"tr",align:null},"The property value is a pipeline script, written in YAML.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"application/xml; type=workflow")),(0,r.kt)("td",{parentName:"tr",align:null},"The property value is an XML document defining a workflow (for example BPMN).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"application/json; type=form")),(0,r.kt)("td",{parentName:"tr",align:null},"The property value is a JSON document defining a PIPEFORCE form config.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"application/json; type=list")),(0,r.kt)("td",{parentName:"tr",align:null},"The property value is a JSON document defining a PIPEFORCE list config.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"application/json; type=schema")),(0,r.kt)("td",{parentName:"tr",align:null},"The property value is a JSON document defining a JSON schema which complies with the definition from ",(0,r.kt)("a",{parentName:"td",href:"https://json-schema.org/"},"json-schema.org"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"text/plain; type=template; format=freemarker")),(0,r.kt)("td",{parentName:"tr",align:null},"The property value is a ",(0,r.kt)("a",{parentName:"td",href:"https://freemarker.apache.org/"},"FreeMarker")," template .")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"text/plain; type=template; format=velocity")),(0,r.kt)("td",{parentName:"tr",align:null},"The property value is a ",(0,r.kt)("a",{parentName:"td",href:"https://velocity.apache.org/"},"Velocity")," template .")))),(0,r.kt)("h3",{id:"binary-value"},"Binary Value"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," attribute contains always values of type ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),". In order to store binary data there, it must be ",(0,r.kt)("inlineCode",{parentName:"p"},"base64")," encoded before it gets persisted. In this case, the property must be marked as a base64 value. This is done in the ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," attribute using the mime type parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"encoding=base64"),". Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'value: "<some base64 encoded value>"\ntype: "application/pdf;encoding=base64"\n')),(0,r.kt)("p",null,'In this case the property can be automatically converted back into a "binary" file when loaded.'),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The base64 encoding approach is only meant for small files, not bigger than a few KB and not that many. In case you want to store more and bigger files, consider storing them as ",(0,r.kt)("strong",{parentName:"p"},"property attachments")," instead, since they do have a chunked storage handling concept and can store a huge amount of binary data more effectively.")),(0,r.kt)("h2",{id:"create-a-property"},"Create a Property"),(0,r.kt)("p",null,"To create a new property in the property store, you need to define a property schema first using the command ",(0,r.kt)("a",{parentName:"p",href:"../api/commands#propertyschemaput-v1"},(0,r.kt)("inlineCode",{parentName:"a"},"property.schema.put")),". Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - property.schema.put:\n      key: "global/app/myapp/data/mydata"\n      type: "application/json"\n')),(0,r.kt)("p",null,"This schema defines the base envelope data for the new property like its ",(0,r.kt)("inlineCode",{parentName:"p"},"key"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"uuid")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),". After the schema has been created, the property payload can be added and edited."),(0,r.kt)("p",null,"To simplify these steps, you can create the schema and add the payload value in one single step:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - property.schema.put:\n      key: "global/app/myapp/data/mydata"\n      type: "application/json"\n      value: {"hello": "world"}\n')),(0,r.kt)("h3",{id:"property-created-event"},"Property created event"),(0,r.kt)("p",null,"Whenever you create a new a property, an event with key ",(0,r.kt)("inlineCode",{parentName:"p"},"property.created")," is fired with the created property stored in ",(0,r.kt)("inlineCode",{parentName:"p"},"target")," of the event object. This way you can listen in your pipelines for properties created newly. See the ",(0,r.kt)("a",{parentName:"p",href:"../api/events#propertycreated-v1"},"reference documentation")," for details. Here is an example how to listen to such an event in a ",(0,r.kt)("strong",{parentName:"p"},"persisted")," pipeline:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - event.listen:\n      key: "property.created"\n      filter: "#{body.target.key.contains(\'global/app/myapp/data/mydata\')}"\n\n  # Do something here\n')),(0,r.kt)("p",null,"This persisted pipeline gets automatically executed whever a new property with a key containing ",(0,r.kt)("inlineCode",{parentName:"p"},"global/app/myapp/data/mydata")," has been created."),(0,r.kt)("h2",{id:"update-a-property"},"Update a Property"),(0,r.kt)("p",null,"To change the ",(0,r.kt)("strong",{parentName:"p"},"value")," of the property, you can use the command ",(0,r.kt)("a",{parentName:"p",href:"../api/commands#propertyput-v1"},(0,r.kt)("inlineCode",{parentName:"a"},"property.put")),". The property must already exist beforehand. Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n - property.put: \n     key: "global/app/myapp/data/mydata"\n     value: {"new": "value"}\n')),(0,r.kt)("p",null,"In order to change the envelope data (attributes) of a property, you need to use the  ",(0,r.kt)("a",{parentName:"p",href:"../api/commands#propertyput-v1"},(0,r.kt)("inlineCode",{parentName:"a"},"property.schema.put"))," command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n - property.schema.put: \n     key: "global/app/myapp/data/mydata"\n     timeToLive: 5\n')),(0,r.kt)("p",null,"If you would like to change the key of an existing property, you can use the ",(0,r.kt)("a",{parentName:"p",href:"../api/commands#propertymove-v1"},(0,r.kt)("inlineCode",{parentName:"a"},"property.move"))," command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n - property.move: \n     key: "global/app/myapp/data/mydata"\n     to: "global/app/myapp/data/newlocation"\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Why are there two different commands to create a property and set its value?")),(0,r.kt)("p",{parentName:"admonition"},"Because there are two different security levels with permissions. Those users who are able to change the value of a property with ",(0,r.kt)("inlineCode",{parentName:"p"},"property.put"),", not always have the permission to create a new property or changing its other attributes using ",(0,r.kt)("inlineCode",{parentName:"p"},"property.schema.put"),". Having two commands allows it to differentiate in a pipeline what a user can do, since in PIPEFORCE any command can have assigned different permissions.")),(0,r.kt)("h3",{id:"property-changed-event"},"Property changed event"),(0,r.kt)("p",null,"Whenever you update a property value or one of its other attributes, an event with key ",(0,r.kt)("inlineCode",{parentName:"p"},"property.updated")," is fired with the origin property stored in ",(0,r.kt)("inlineCode",{parentName:"p"},"origin")," of the event object and the final version of the property in ",(0,r.kt)("inlineCode",{parentName:"p"},"target"),". This way you can listen in your pipelines for property changes. See the ",(0,r.kt)("a",{parentName:"p",href:"../api/events#propertyupdated"},"reference documentation")," for details. Here is an example how to listen to such an event in a ",(0,r.kt)("strong",{parentName:"p"},"persisted")," pipeline:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - event.listen:\n      key: "property.updated"\n      filter: "#{body.origin.key.contains(\'global/app/myapp/data/mydata\')}"\n\n  # Do something here\n')),(0,r.kt)("h3",{id:"property-moved-event"},"Property moved event"),(0,r.kt)("p",null,"Whenever you move a property by changing its origin key, an event with key ",(0,r.kt)("inlineCode",{parentName:"p"},"property.moved")," is fired with the origin key property stored in ",(0,r.kt)("inlineCode",{parentName:"p"},"origin")," of the event object and the final key of the property in ",(0,r.kt)("inlineCode",{parentName:"p"},"target"),". This way you can listen in your pipelines for property movements. See the ",(0,r.kt)("a",{parentName:"p",href:"../api/events#propertymoved"},"reference documentation")," for details. Here is an example how to listen to such an event in a ",(0,r.kt)("strong",{parentName:"p"},"persisted")," pipeline:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - event.listen:\n      key: "property.moved"\n      filter: "#{body.origin.contains(\'global/app/myapp/data/mydata\')}"\n\n  # Do something here\n')),(0,r.kt)("h2",{id:"delete-a-property"},"Delete a Property"),(0,r.kt)("p",null,"In order to delete a property from the property store, you can use the command ",(0,r.kt)("inlineCode",{parentName:"p"},"property.schema.delete"),", which deletes the property value and all metadata that belongs to this property. Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n - property.schema.delete:\n     key: "global/app/myapp/data/mydata"\n')),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Be careful using this command since once deleted, the property and its value cannot be restored!")),(0,r.kt)("p",null,"You can also delete multiple properties at once using a pattern. Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n - property.schema.delete:\n     pattern: "global/app/myapp/**"\n')),(0,r.kt)("p",null,"This example will delete all properties of the app ",(0,r.kt)("inlineCode",{parentName:"p"},"myapp")," recursively."),(0,r.kt)("h3",{id:"property-deleted-event"},"Property deleted event"),(0,r.kt)("p",null,"Whenever you delete a property, an event with key ",(0,r.kt)("inlineCode",{parentName:"p"},"property.deleted")," is fired with the origin property stored in ",(0,r.kt)("inlineCode",{parentName:"p"},"origin")," of the event object. This way you can listen in your pipelines for property deletions. See the ",(0,r.kt)("a",{parentName:"p",href:"../api/events#propertydeleted"},"reference documentation")," for details. Here is an example how to listen to such an event in a ",(0,r.kt)("strong",{parentName:"p"},"persisted")," pipeline:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - event.listen:\n      key: "property.deleted"\n      filter: "#{body.origin.key.contains(\'global/app/myapp/data/mydata\')}"\n\n  # Do something here\n')),(0,r.kt)("h2",{id:"loading-properties"},"Loading Properties"),(0,r.kt)("p",null,"If you want to query for property data, you have multiple options in PIPEFORCE."),(0,r.kt)("h3",{id:"listing-properties"},"Listing properties"),(0,r.kt)("p",null,"One of the simplest approaches to query for multiple properties is by using the command  ",(0,r.kt)("a",{parentName:"p",href:"../api/commands#propertylist-v1"},(0,r.kt)("inlineCode",{parentName:"a"},"property.list")),". Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n  - property.list:\n      pattern: global/app/myapp/pipeline/helloworld\n")),(0,r.kt)("p",null,"This command will return a result similar to the result shown below, which describes all important attributes of the property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "key": "/pipeforce/enterprise/global/app/myapp/pipeline/helloworld",\n  "uuid": "529a38e7-9188-4135-b87b-3d890f6764f3",\n  "value": "pipeline:\\n  - log:        \\n      message: \\"Hello World\\"",\n  "defaultValue": null,\n  "type": "application/yaml;type=pipeline",\n  "created": 1613397114448,\n  "updated": null,\n  "timeToLive": null,\n}\n')),(0,r.kt)("p",null,"You can also use a key pattern in order to load multiple properties matching this key pattern. This example will load all properties inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"pipeline")," folder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n  - property.list:\n      pattern: global/app/myapp/**\n")),(0,r.kt)("p",null,'This will return "recursively" all properties below the path ',(0,r.kt)("inlineCode",{parentName:"p"},"global/app/myapp/"),". The properties attributes including the value will be returned. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'[\n  {\n    "key": "...",\n    "uuid": "...",\n    "value": "...",\n    "defaultValue": null,\n    "type": "...",\n    "created": 123,\n    "updated": null,\n    "timeToLive": null,\n  },\n  {\n    "key": "...",\n    "uuid": "...",\n    "value": "...",\n    "defaultValue": null,\n    "type": "...",\n    "created": 123,\n    "updated": null,\n    "timeToLive": null,\n  }\n]\n')),(0,r.kt)("h3",{id:"getting-property-value"},"Getting property value"),(0,r.kt)("p",null,"In case you would like to load only the value (payload) of a property but not its metadata, you can use the command ",(0,r.kt)("a",{parentName:"p",href:"../api/commands#propertyvalueget-v1"},(0,r.kt)("inlineCode",{parentName:"a"},"property.value.get")),". Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - property.value.get:\n      key: "global/app/myapp/pipeline/helloworld"\n')),(0,r.kt)("h3",{id:"advanced-querying"},"Advanced Querying"),(0,r.kt)("p",null,"In case the base commands for loading properties are not sufficient for your case, you can use ",(0,r.kt)("a",{parentName:"p",href:"guides/propertystore/advanced-querying"},"Advanced Querying"),"."),(0,r.kt)("h2",{id:"report-an-issue"},"Report an Issue"),(0,r.kt)("admonition",{title:"Your help is needed!",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"In case you're missing something on this page, you found an error or you have an idea for improvement, please ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pipeforce/pipeforce.github.io/issues/new"},"click here to create a new issue"),". Another way to contribute is, to click ",(0,r.kt)("strong",{parentName:"p"},"Edit this page")," below and directly add your changes in GitHub. Many thanks for your contribution in order to improve PIPEFORCE!")))}m.isMDXComponent=!0}}]);