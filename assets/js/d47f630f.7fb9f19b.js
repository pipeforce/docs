"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[260],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=l(n),m=a,g=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return n?r.createElement(g,p(p({ref:t},d),{},{components:n})):r.createElement(g,p({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,p=new Array(i);p[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,p[1]=o;for(var l=2;l<i;l++)p[l]=n[l];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3660:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const i={title:"Events Reference",sidebar_label:"Events"},p=void 0,o={unversionedId:"api/events",id:"api/events",title:"Events Reference",description:"This is the reference documentation of the built-in events which comes out-of-the-box with PIPEFORCE.",source:"@site/docs/api/events.md",sourceDirName:"api",slug:"/api/events",permalink:"/docs/api/events",draft:!1,editUrl:"https://github.com/pipeforce/pipeforce.github.io/edit/master/docs/api/events.md",tags:[],version:"current",frontMatter:{title:"Events Reference",sidebar_label:"Events"},sidebar:"tutorialSidebar",previous:{title:"Commands",permalink:"/docs/api/commands"},next:{title:"Headers",permalink:"/docs/api/headers"}},s={},l=[{value:"property.created",id:"propertycreated",level:2},{value:"property.copied",id:"propertycopied",level:2},{value:"property.deleted",id:"propertydeleted",level:2},{value:"property.moved",id:"propertymoved",level:2},{value:"property.updated",id:"propertyupdated",level:2},{value:"setup.finished",id:"setupfinished",level:2},{value:"setup.starting",id:"setupstarting",level:2},{value:"hub.context.started",id:"hubcontextstarted",level:2},{value:"iam.bruteforce.detected",id:"iambruteforcedetected",level:2},{value:"iam.login.error",id:"iamloginerror",level:2},{value:"Report an Issue",id:"report-an-issue",level:2}],d={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This is the reference documentation of the built-in events which comes out-of-the-box with PIPEFORCE. "),(0,a.kt)("p",null,"Here is an example on how to listen for such events in a ",(0,a.kt)("strong",{parentName:"p"},"persisted")," pipeline:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n - event.listen:\n     key: "iam.login.error"\n - log:\n     message: "A login has been failed!"\n')),(0,a.kt)("p",null,"Every time an event is fired matching the given criteria, all commands after ",(0,a.kt)("inlineCode",{parentName:"p"},"event.listen")," will be executed."),(0,a.kt)("p",null,"Also see the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"../guides/events"},"Event Guide"))," for details about the structure and usage of events."),(0,a.kt)("h2",{id:"propertycreated"},"property.created"),(0,a.kt)("p",null,"It is fired every time a new property gets created in the property store. "),(0,a.kt)("p",null,"It contains as ",(0,a.kt)("inlineCode",{parentName:"p"},"origin"),", the value ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),", and as ",(0,a.kt)("inlineCode",{parentName:"p"},"target"),", the property created before. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "payload": {\n    "origin": null,\n    "target": {\n      "uuid": "string",\n      "key": "string",\n      "type": "string",\n      "value": "string",\n      "created": timestamp,\n      "updated": timestamp\n    }\n  }\n}\n')),(0,a.kt)("h2",{id:"propertycopied"},"property.copied"),(0,a.kt)("p",null,"It is fired every time a property gets copied in the property store."),(0,a.kt)("p",null,"It contains as ",(0,a.kt)("inlineCode",{parentName:"p"},"origin"),", the source property, and as ",(0,a.kt)("inlineCode",{parentName:"p"},"target"),", the property where source was copied to."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "payload": {\n    "origin": {\n      "uuid": "string",\n      "key": "string",\n      "type": "string",\n      "value": "string",\n      "created": timestamp,\n      "updated": timestamp\n    },\n    "target": {\n      "uuid": "string",\n      "key": "string",\n      "type": "string",\n      "value": "string",\n      "created": timestamp,\n      "updated": timestamp\n    }\n  }\n}\n')),(0,a.kt)("h2",{id:"propertydeleted"},"property.deleted"),(0,a.kt)("p",null,"It is fired every time a property was deleted from the property store."),(0,a.kt)("p",null,"It contains as ",(0,a.kt)("inlineCode",{parentName:"p"},"origin"),", the property which was deleted, and as ",(0,a.kt)("inlineCode",{parentName:"p"},"target"),", the value ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "payload": {\n    "origin": {\n      "uuid": "string",\n      "key": "string",\n      "type": "string",\n      "value": "string",\n      "created": timestamp,\n      "updated": timestamp\n    },\n    "target": null\n  }\n}\n')),(0,a.kt)("h2",{id:"propertymoved"},"property.moved"),(0,a.kt)("p",null,"It is fired every time a property was moved from one key to another."),(0,a.kt)("p",null,"It contains as ",(0,a.kt)("inlineCode",{parentName:"p"},"origin"),", the key of the source property, and as ",(0,a.kt)("inlineCode",{parentName:"p"},"target"),", the key of the property where it was moved to."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "payload": {\n    "origin": "string",\n    "target": "string"\n  }\n}\n')),(0,a.kt)("h2",{id:"propertyupdated"},"property.updated"),(0,a.kt)("p",null,"It is fired after a property has been updated in the property store."),(0,a.kt)("p",null,"It contains as ",(0,a.kt)("inlineCode",{parentName:"p"},"origin"),", the property before the update, and as ",(0,a.kt)("inlineCode",{parentName:"p"},"target"),", the property after the update."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "payload": {\n    "origin": {\n      "uuid": "string",\n      "key": "string",\n      "type": "string",\n      "value": "string",\n      "created": timestamp,\n      "updated": timestamp\n    },\n    "target": {\n      "uuid": "string",\n      "key": "string",\n      "type": "string",\n      "value": "string",\n      "created": timestamp,\n      "updated": timestamp\n    }\n  }\n}\n')),(0,a.kt)("h2",{id:"setupfinished"},"setup.finished"),(0,a.kt)("p",null,"It is fired after the hub service gets successfully started, and all setup scripts have been executed successfully."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"This event contains no payload.")),(0,a.kt)("h2",{id:"setupstarting"},"setup.starting"),(0,a.kt)("p",null,"It is fired after the hub service was successfully started, but right before all setup scripts are executed."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"This event contains no payload.")),(0,a.kt)("h2",{id:"hubcontextstarted"},"hub.context.started"),(0,a.kt)("p",null,"It is fired after the hub service was successfully started."),(0,a.kt)("p",null,"It contains as ",(0,a.kt)("inlineCode",{parentName:"p"},"origin"),", the configuration of the context as key-value-pairs. The ",(0,a.kt)("inlineCode",{parentName:"p"},"target")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "payload": {\n    "origin": {\n      "key1": "value1",\n      "key2": "value2"\n    },\n    "target": null\n  }\n}\n')),(0,a.kt)("h2",{id:"iambruteforcedetected"},"iam.bruteforce.detected"),(0,a.kt)("p",null,"It is fired every time a potential brute force attempt was detected."),(0,a.kt)("h2",{id:"iamloginerror"},"iam.login.error"),(0,a.kt)("p",null,"It is fired every time a login attempt gets failed."),(0,a.kt)("h2",{id:"report-an-issue"},"Report an Issue"),(0,a.kt)("admonition",{title:"Your help is needed!",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"In case you're missing something on this page, you found an error or you have an idea for improvement, please ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/pipeforce/pipeforce.github.io/issues/new"},"click here to create a new issue"),". Another way to contribute is, to click ",(0,a.kt)("strong",{parentName:"p"},"Edit this page")," below and directly add your changes in GitHub. Many thanks for your contribution in order to improve PIPEFORCE!")))}u.isMDXComponent=!0}}]);