"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[5405],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=s(t),d=i,h=c["".concat(p,".").concat(d)]||c[d]||m[d]||o;return t?a.createElement(h,l(l({ref:n},u),{},{components:t})):a.createElement(h,l({ref:n},u))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,l=new Array(o);l[0]=c;var r={};for(var p in n)hasOwnProperty.call(n,p)&&(r[p]=n[p]);r.originalType=e,r.mdxType="string"==typeof e?e:i,l[1]=r;for(var s=2;s<o;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5629:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>s});var a=t(7462),i=(t(7294),t(3905));const o={sidebar_label:"17. Python Functions"},l="Python Functions as a Service",r={unversionedId:"guides/faas",id:"guides/faas",title:"Python Functions as a Service",description:"Since Version: 9.0 (BETA)",source:"@site/docs/guides/170_faas.md",sourceDirName:"guides",slug:"/guides/faas",permalink:"/docs/guides/faas",draft:!1,editUrl:"https://github.com/pipeforce/pipeforce.github.io/edit/master/docs/guides/170_faas.md",tags:[],version:"current",sidebarPosition:170,frontMatter:{sidebar_label:"17. Python Functions"},sidebar:"tutorialSidebar",previous:{title:"16. Command Line Interface",permalink:"/docs/cli"},next:{title:"Tutorial 1: Basics",permalink:"/docs/tutorials/basics"}},p={},s=[{value:"Deploy a function",id:"deploy-a-function",level:2},{value:"Auto deployment",id:"auto-deployment",level:4},{value:"Manual deployment",id:"manual-deployment",level:4},{value:"Execute a function",id:"execute-a-function",level:2},{value:"Auto deployment",id:"auto-deployment-1",level:4},{value:"Passing arguments",id:"passing-arguments",level:2},{value:"JSON object argument",id:"json-object-argument",level:3},{value:"Dynamic arguments",id:"dynamic-arguments",level:4},{value:"JSON array argument",id:"json-array-argument",level:3},{value:"Dynamic arguments",id:"dynamic-arguments-1",level:4},{value:"Byte array argument",id:"byte-array-argument",level:3},{value:"No argument",id:"no-argument",level:3},{value:"Custom URI argument",id:"custom-uri-argument",level:3},{value:"Use a custom function name",id:"use-a-custom-function-name",level:2},{value:"Calling Commands and Pipelines",id:"calling-commands-and-pipelines",level:2},{value:"Show deployed functions",id:"show-deployed-functions",level:2},{value:"Return all functions",id:"return-all-functions",level:3},{value:"Return a single function",id:"return-a-single-function",level:3},{value:"Hooks",id:"hooks",level:2},{value:"<code>on_deploy</code>",id:"on_deploy",level:3},{value:"<code>on_undeploy</code>",id:"on_undeploy",level:3},{value:"Install Packages",id:"install-packages",level:2},{value:"<code>on_requirements</code>",id:"on_requirements",level:3},{value:"Undeploy a function",id:"undeploy-a-function",level:2},{value:"Report an Issue",id:"report-an-issue",level:2}],u={toc:s};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"python-functions-as-a-service"},"Python Functions as a Service"),(0,i.kt)("p",{class:"theme-doc-version-badge badge badge--secondary"},"Since Version: 9.0 (BETA)"),(0,i.kt)("p",null,"PIPEFORCE has an advanced mechanism to execute ",(0,i.kt)("a",{parentName:"p",href:"https://www.python.org/doc/"},"Python")," functions as part of a pipeline execution. This way you can use the full power of this popular scripting language inside your pipelines."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"(https://www.w3schools.com/python/python_functions.asp)"},"Python functions")," will be executed by a backend service inside PIPEFORCE so the developer is not in charge of setting up and maintain a Python runtime environment. This approach is also known as Function as a Service (FaaS) or Lambda: You just send a Python function to the service and receive the calculated result. You do not care about any interpreter, image deployment, scalability issues or any other task related to the execution side."),(0,i.kt)("p",null,"This approach opens a lot of new possibilities to pipelines and your applications, such as for example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create a set of libraries of functions for your custom needs and re-use them from anywhere inside your app pipelines."),(0,i.kt)("li",{parentName:"ul"},"Write advanced tests using a Python testing framework."),(0,i.kt)("li",{parentName:"ul"},"Do advanced data transformations and mappings with Python."),(0,i.kt)("li",{parentName:"ul"},"And many more...")),(0,i.kt)("p",null,"Since the FaaS services are stateless inside PIPEFORCE, it is possible to scale the execution of the Python scripts automatically and nearly unlimited. Since it is possible to run multiple of such FaaS execution services. Only the resources available to your cluster set the limit."),(0,i.kt)("p",null,"Here are some documentation references to Python:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.python.org/doc/"},"Official Python Documentation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.w3schools.com/python/python_functions.asp"},"Intro to Python Functions"))),(0,i.kt)("h2",{id:"deploy-a-function"},"Deploy a function"),(0,i.kt)("p",null,"The first step is to declare and deploy the function. "),(0,i.kt)("h4",{id:"auto-deployment"},"Auto deployment"),(0,i.kt)("p",null,"The easiest way is to let PIPEFORCE manage the deployment of function scripts for you."),(0,i.kt)("p",null,"To do so, create a new property at ",(0,i.kt)("inlineCode",{parentName:"p"},"global/app/myapp/function/helloworld")," with mime type ",(0,i.kt)("inlineCode",{parentName:"p"},"application/python")," (the mime parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"type=script")," is optional). Whereas ",(0,i.kt)("inlineCode",{parentName:"p"},"myapp")," must be replaced by the name of your app and ",(0,i.kt)("inlineCode",{parentName:"p"},"helloworld")," must be replaced by the name of the Python script you would like to create."),(0,i.kt)("p",null,"The value of this property must be a valid Python script with a single function with name ",(0,i.kt)("inlineCode",{parentName:"p"},"function")," in it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def function():\n  return "Hello World"\n')),(0,i.kt)("p",null,"After you have saved this property in the property editor, it automatically gets deployed to the FaaS backend using the app name and the script name as the module name of the function to be called later. In this example this would be ",(0,i.kt)("inlineCode",{parentName:"p"},"myapp.helloworld"),". This is also true in case you edit or rename the property. If you delete the property, it will also be undeployed from the FaaS backend automatically for you."),(0,i.kt)("admonition",{title:"Note",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"In case a function is called using the command ",(0,i.kt)("inlineCode",{parentName:"p"},"function.run")," and the function could not be found in the FaaS backend (for example because the backend did auto-rescale), it will be tried to auto-install this script from the property store. Therefore, you should store the script code always in the property store. More information can be found in the section about executing a function below.")),(0,i.kt)("h4",{id:"manual-deployment"},"Manual deployment"),(0,i.kt)("p",null,"Alternatively, you can use the command ",(0,i.kt)("inlineCode",{parentName:"p"},"function.put")," in order to declare and deploy a Python function manually. See this example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - function.put:\n      name: "myapp.helloworld"\n      code: |\n        def function():\n          return "Hello World!"\n')),(0,i.kt)("p",null,"For parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"code")," you can also set a custom uri pointing to the script to be deployed. Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - function.put:\n      name: "myapp.helloworld"\n      code: "$uri:property:global/app/myapp/function/hello"\n')),(0,i.kt)("admonition",{title:"Note",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Make sure to always define a module prefix to your function name like ",(0,i.kt)("inlineCode",{parentName:"p"},"myapp.")," which will specify to which app the function script belongs to. By default functions without this prefix will be rejected.")),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Be aware that scripts deployed manually using ",(0,i.kt)("inlineCode",{parentName:"p"},"function.put")," must also be managed by yourself. In case the FaaS container in the backend automatically re-scales, it could be that your functions deployed there are gone. So you have to re-deploy them also manually. Therefore, if possible, instead of doing a manual deployment using ",(0,i.kt)("inlineCode",{parentName:"p"},"function.put")," ",(0,i.kt)("strong",{parentName:"p"},"prefer to save your scripts in the property store and let PIPEFORCE automatically manage the deployment for you"),".")),(0,i.kt)("h2",{id:"execute-a-function"},"Execute a function"),(0,i.kt)("p",null,"Once a function has been deployed, it can be called from inside any pipeline using the command  ",(0,i.kt)("inlineCode",{parentName:"p"},"function.run")," as this example shows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - function.run:\n      name: "myapp.helloworld"\n')),(0,i.kt)("p",null,"The result of such a call is always a JSON in the PIPEFORCE result format, which looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "status": "ok",\n  "statusCode": 200,\n  "valueType": "string",\n  "value": "Hello World: Max"\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"status")," - Can be one of ",(0,i.kt)("inlineCode",{parentName:"li"},"ok")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"error")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"statusCode")," - Is compatible with the HTTP status codes. For example ",(0,i.kt)("inlineCode",{parentName:"li"},"200")," is OK and ",(0,i.kt)("inlineCode",{parentName:"li"},"500")," would mean an internal error."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"statusMessage")," - Is an optional field and contains information about the status. For example a short hint in case of an error."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"valueType")," - Defines the JSON type of the value field which can be one of the types declared by the ",(0,i.kt)("a",{parentName:"li",href:"https://json-schema.org/understanding-json-schema/reference/type.html"},"JSON schema specification"),". For example ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"number"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"object"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"array")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value")," - This is the return value of given type. In case the function has no return value, this value is set to ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"valueType")," is set to ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),".")),(0,i.kt)("p",null,"You can then use the returned value for further processing inside your pipeline."),(0,i.kt)("p",null,"Another option to execute a function is using the util ",(0,i.kt)("inlineCode",{parentName:"p"},"@function.run(name, args)"),". It is similar to the command ",(0,i.kt)("inlineCode",{parentName:"p"},"function.run"),". For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - set.var:\n      name: "resultFromFunction"\n      value: "#{@function.run(\'myapp.helloworld\')}"\n')),(0,i.kt)("h4",{id:"auto-deployment-1"},"Auto deployment"),(0,i.kt)("p",null,"In case ",(0,i.kt)("inlineCode",{parentName:"p"},"function.run")," is called and the function was not found in the FaaS backend, it will be tried to automatically deploy it from the property store. Since the path in the property store is derived from the function script name, it is important to keep the source of the functions in the property store always under the path ",(0,i.kt)("inlineCode",{parentName:"p"},"global/app/myapp/function/")," whereas ",(0,i.kt)("inlineCode",{parentName:"p"},"myapp")," must be replaced by the prefix of your function call."),(0,i.kt)("p",null,"The schema to find the property for a given function is like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"<appName>.<functionPath>\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"First part of the name (the part before the first period ",(0,i.kt)("inlineCode",{parentName:"li"},"."),") is the app name."),(0,i.kt)("li",{parentName:"ol"},"Second part of the name (after the first period ",(0,i.kt)("inlineCode",{parentName:"li"},"."),") is the sub path inside the ",(0,i.kt)("inlineCode",{parentName:"li"},"/function")," folder. Any period ",(0,i.kt)("inlineCode",{parentName:"li"},".")," will be replaced by a forward slash ",(0,i.kt)("inlineCode",{parentName:"li"},"/"),"."),(0,i.kt)("li",{parentName:"ol"},"Any implicit function name will be ignored (everything starting from the colon ",(0,i.kt)("inlineCode",{parentName:"li"},":")," if exists).")),(0,i.kt)("p",null,"Here are some example mappings from function script name to function properties in the property store:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"myapp.util.hello")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"global/app/myapp/function/util/hello")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"myapp.util.hello:my_func")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"global/app/myapp/function/util/hello")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"hello")," = Invalid, since no app part exists.")),(0,i.kt)("h2",{id:"passing-arguments"},"Passing arguments"),(0,i.kt)("p",null,"You can also pass arguments to a function. These arguments must be passed as a JSON object, JSON array or as simple byte array to the command ",(0,i.kt)("inlineCode",{parentName:"p"},"function.run")," using the parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"args"),". "),(0,i.kt)("h3",{id:"json-object-argument"},"JSON object argument"),(0,i.kt)("p",null,"Let's assume you have a function like this deployed under name ",(0,i.kt)("inlineCode",{parentName:"p"},"myapp.hello"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def function(firstName, lastName):\n  return "Hello: " + firstName + " " + lastName\n')),(0,i.kt)("p",null,"The arguments can be passed to the function as JSON object by using the parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"args")," of the command ",(0,i.kt)("inlineCode",{parentName:"p"},"function.run"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - function.run:\n      name: "myapp.helloworld"\n      args: {"firstName": "Sabrina", "lastName": "Smith"}\n')),(0,i.kt)("p",null,"Or like this in full YAML:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - function.run:\n      name: "myapp.helloworld"\n      args:\n        firstName: "Sabrina"\n        lastName: "Smith"\n')),(0,i.kt)("p",null,"In this case the name of an argument of the function will be mappped to the name of the attribute in the first level of the JSON Object. This way, the order of the attributes and arguments doesn't matter as long as the names match (for example firstName -> firstName). Therefore, a call like this would also work in order to call a function with this signature: ",(0,i.kt)("inlineCode",{parentName:"p"},"function(firstName, lastName)")," (order of arguments is different compared to the order in the JSON): "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - function.run:\n      name: "myapp.helloworld"\n      args: {"lastName": "Smith", "firstName": "Sabrina"}\n')),(0,i.kt)("h4",{id:"dynamic-arguments"},"Dynamic arguments"),(0,i.kt)("p",null,"In case you have dynamic arguments or entries in the JSON not known beforehand, you can use the variable keyword arguments symbol ",(0,i.kt)("inlineCode",{parentName:"p"},"**kwargs")," of Python inside your script. See this example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def function(**kwargs):\n  return \"Hello: \" + kwargs['firstName'] + \" \" + kwargs['lastName']\n")),(0,i.kt)("p",null,"See the official Python documentation about ",(0,i.kt)("inlineCode",{parentName:"p"},"**kwargs")," for more details."),(0,i.kt)("h3",{id:"json-array-argument"},"JSON array argument"),(0,i.kt)("p",null,"Another option to pass arguments to a function is by using a JSON array."),(0,i.kt)("p",null,"Let's assume again you have a function like this deployed under name ",(0,i.kt)("inlineCode",{parentName:"p"},"myapp.hello"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def function(firstName, lastName):\n  return "Hello: " + firstName + " " + lastName\n')),(0,i.kt)("p",null,"Then, you can call this function with arguments using a JSON array like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - function.run:\n      name: "myapp.helloworld"\n      args: ["Sabrina", "Smith"]\n')),(0,i.kt)("p",null,"Or like this in full YAML:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - function.run:\n      name: "myapp.helloworld"\n      args: \n        - "Sabrina"\n        - "Smith"\n')),(0,i.kt)("p",null,"The entries of the JSON array will be mapped to the arguments of the function from left to right. So entry ","[0]"," will map to ",(0,i.kt)("inlineCode",{parentName:"p"},"firstName")," and entry ","[1]"," will map to ",(0,i.kt)("inlineCode",{parentName:"p"},"lastName"),"."),(0,i.kt)("h4",{id:"dynamic-arguments-1"},"Dynamic arguments"),(0,i.kt)("p",null,"In case you have dynamic arguments or the number of entries in the JSON array is not known beforehand, you can use the variable arguments symbol ",(0,i.kt)("inlineCode",{parentName:"p"},"*arg")," of Python inside your script. See this example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def function(**args):\n  return "Hello: " + args[0] + " " + args[1]\n')),(0,i.kt)("p",null,"See the official Python documentation about ",(0,i.kt)("inlineCode",{parentName:"p"},"*args")," for more details."),(0,i.kt)("h3",{id:"byte-array-argument"},"Byte array argument"),(0,i.kt)("p",null,"It is also possible to pass a byte array to a function. This is handy in case you would like to send binary data or single arguments in an easy way."),(0,i.kt)("p",null,"Let's assume you have a function like this deployed under name ",(0,i.kt)("inlineCode",{parentName:"p"},"myapp.hello"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def function(my_data):\n  return "Data: " + str(my_data)\n')),(0,i.kt)("p",null,"You can pass for example a text string to this function as a byte array, by using this call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - function.run:\n      name: "myapp.helloworld"\n      args: "This is a simple text"\n')),(0,i.kt)("p",null,"The value ",(0,i.kt)("inlineCode",{parentName:"p"},"This is a simple text")," will be passed to the argument ",(0,i.kt)("inlineCode",{parentName:"p"},"my_data")," as byte array. So make sure to treat it inside the function like this. Refer to the Python docs in order to see how to handle byte arrays inside a Python script."),(0,i.kt)("h3",{id:"no-argument"},"No argument"),(0,i.kt)("p",null,"These values passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"args")," parameter of the command ",(0,i.kt)("inlineCode",{parentName:"p"},"function.run")," will all be interpreted as calls to functions having no argument: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"args: null")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"args: []")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"args: {}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"args: "))),(0,i.kt)("p",null,"And if no ",(0,i.kt)("inlineCode",{parentName:"p"},"args")," parameter is given at all."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - function.run:\n      name: "myapp.helloworld"\n      args: []\n')),(0,i.kt)("h3",{id:"custom-uri-argument"},"Custom URI argument"),(0,i.kt)("p",null,"It is also possible to pass a custom URI to the ",(0,i.kt)("inlineCode",{parentName:"p"},"args")," parameter of command ",(0,i.kt)("inlineCode",{parentName:"p"},"function.run"),", pointing to the value to be passed as argument. Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - function.run:\n      name: "yourapp.helloworld"\n      args: "$uri:property:global/app/myapp/data/myjsonargs"\n')),(0,i.kt)("p",null,"The given URI will be resolved and it's content will be passed to the function by applying the rules mentioned above."),(0,i.kt)("h2",{id:"use-a-custom-function-name"},"Use a custom function name"),(0,i.kt)("p",null,"By default the name of the function inside the script must be ",(0,i.kt)("inlineCode",{parentName:"p"},"function"),", for example, lets assume you have this function script deployed under name ",(0,i.kt)("inlineCode",{parentName:"p"},"myapp.helloworld"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def function():\n  return "Hello"\n')),(0,i.kt)("p",null,"In order to call this function, you can execute the command ",(0,i.kt)("inlineCode",{parentName:"p"},"function.run")," like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - function.run:\n      name: "myapp.helloworld"\n')),(0,i.kt)("p",null,"This call will load the script ",(0,i.kt)("inlineCode",{parentName:"p"},"helloworld")," and will implicitely call the function ",(0,i.kt)("inlineCode",{parentName:"p"},"function()")," inside of it."),(0,i.kt)("p",null,"In case you have function names inside your script with names differently to ",(0,i.kt)("inlineCode",{parentName:"p"},"function"),", then you need to specify them by passing the suffix ",(0,i.kt)("inlineCode",{parentName:"p"},":my_function_name")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," parameter of the ",(0,i.kt)("inlineCode",{parentName:"p"},"function.run")," command, whereas ",(0,i.kt)("inlineCode",{parentName:"p"},"my_function_name")," must be replaced with the name of the function you'd like to call."),(0,i.kt)("p",null,"Let's assume, you have a script deployed under name ",(0,i.kt)("inlineCode",{parentName:"p"},"myapp.helloworld")," with a custom function name in it like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def say_hello():\n  return "Hello"\n')),(0,i.kt)("p",null,"Then, you can call this function using this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - function.run:\n      name: "myapp.helloworld:say_hello"\n')),(0,i.kt)("p",null,"For sure it is also possible to have multiple functions with different names inside a single script. Let's see this example script deployed under ",(0,i.kt)("inlineCode",{parentName:"p"},"myapp.utils"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def calc():\n    return srt(2+2)\n\ndef hello():\n    return "Hello"\n\ndef function():\n    return "Default function"\n')),(0,i.kt)("p",null,"In order to call the specific function ",(0,i.kt)("inlineCode",{parentName:"p"},"hello"),", you can use this command call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - function.run:\n      name: "myapp.utils:hello"\n')),(0,i.kt)("p",null,"In case the sufix is missing, the default function name ",(0,i.kt)("inlineCode",{parentName:"p"},"function")," will be expected to exist inside the code."),(0,i.kt)("h2",{id:"calling-commands-and-pipelines"},"Calling Commands and Pipelines"),(0,i.kt)("p",null,"In some cases it is necessary to callback PIPEFORCE hub and execute commands or pipelines from inside a Python function. For example if you would like to lookup some data from the property store, trigger automations or send messages to name just a few use cases."),(0,i.kt)("p",null,"This can be done, by simply defining the named argument ",(0,i.kt)("inlineCode",{parentName:"p"},"pipeforce")," in your function signature. In case such an argument exists, the FaaS service automatically injects a new instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"PipeforceClient")," with it so it can be used inside your function. This client is already setup with\ncurrent authentication and tracing features so no need for you to configure this."),(0,i.kt)("p",null,"In this example we will use the auto-injected ",(0,i.kt)("inlineCode",{parentName:"p"},"pipeforce")," client in order to load a property value from the property store:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def hello(pipeforce: PipeforceClient):\n  return pipeforce.run_command("property.value.get", {"key": "global/app/hello/data/text"})\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"PipeforceClient")," injected here is part of the official ",(0,i.kt)("a",{parentName:"p",href:"https://pypi.org/project/pipeforce-sdk-python/"},"Python SDK library for PIPEFORCE"),". "),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"/sdk-python/index.html"},"here")," for developer documentation of the SDK."),(0,i.kt)("p",null,"You can call this function from inside your pipeline as usual:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n  - function.run:\n      name: myapp.myfunction:hello\n")),(0,i.kt)("p",null,"Note: We did not specify any args in the ",(0,i.kt)("inlineCode",{parentName:"p"},"function.run")," command since the ",(0,i.kt)("inlineCode",{parentName:"p"},"pipeforce")," argument will be automatically set by the FaaS service."),(0,i.kt)("h2",{id:"show-deployed-functions"},"Show deployed functions"),(0,i.kt)("h3",{id:"return-all-functions"},"Return all functions"),(0,i.kt)("p",null,"In order to list all deployed functions, you can use the command ",(0,i.kt)("inlineCode",{parentName:"p"},"functions.get")," without any parameter:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n  - function.get\n")),(0,i.kt)("p",null,"This will return a list of all functions with additional metadata. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": "ok",\n    "statusCode": 200,\n    "value": [\n        {\n            "name": "function1",\n            "size": 100,\n            "created": 1.6742085685755234E9,\n            "modified": 1.6742085685755234E9,\n            "language": "python",\n            "status": "ok",\n            "statusMessage": ""\n        },\n        {\n            "name": "function2",\n            "size": 52,\n            "created": 1.6742124433455272E9,\n            "modified": 1.6742124433455272E9,\n            "language": "python",\n            "status": "ok",\n            "statusMessage": ""\n        },\n        {\n            "name": "common.function3",\n            "size": 60,\n            "created": 1.6742906565813148E9,\n            "modified": 1.6742906565813148E9,\n            "language": "python",\n            "status": "ok",\n            "statusMessage": ""\n        }\n    ],\n    "valueType": "array",\n    "count": 3\n}\n')),(0,i.kt)("h3",{id:"return-a-single-function"},"Return a single function"),(0,i.kt)("p",null,"For performance reasons ",(0,i.kt)("inlineCode",{parentName:"p"},"function.get")," without any parameters will return a list which doesn't contain the code of the functions. In order to see the code, you have to query for a single function using command ",(0,i.kt)("inlineCode",{parentName:"p"},"function.get")," and parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," set to the function you would like to return:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - function.get:\n      name: "myfunction"\n')),(0,i.kt)("p",null,"Which will return the information about the function like this example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": "ok",\n    "statusCode": 200,\n    "value": {\n        "type": "object",\n        "data": {\n            "name": "myfunction",\n            "size": 60,\n            "created": 1.6742906565813148E9,\n            "modified": 1.6742906565813148E9,\n            "language": "python",\n            "content": "def function(args):\\n    return \\"HELLO WORLD: \\" + args[\'foo\']"\n        }\n    },\n    "valueType": "object"\n}\n')),(0,i.kt)("h2",{id:"hooks"},"Hooks"),(0,i.kt)("p",null,"Hooks are functions with a reserved name. In case such a function is defined in a script, it will be called whenever the according action happened."),(0,i.kt)("h3",{id:"on_deploy"},(0,i.kt)("inlineCode",{parentName:"h3"},"on_deploy")),(0,i.kt)("p",null,"This function will be called, whenever a script was deployed to the FaaS backend. This is true for new deployments, but also for updates."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def on_deploy():\n    return "Script has been deployed..."\n')),(0,i.kt)("h3",{id:"on_undeploy"},(0,i.kt)("inlineCode",{parentName:"h3"},"on_undeploy")),(0,i.kt)("p",null,"This function will be called, whenever a script is about to be undeployed from the FaaS backend. "),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def on_undeploy():\n    return "Script is about to be undeployed..."\n')),(0,i.kt)("h2",{id:"install-packages"},"Install Packages"),(0,i.kt)("h3",{id:"on_requirements"},(0,i.kt)("inlineCode",{parentName:"h3"},"on_requirements")),(0,i.kt)("p",null,"You can also install dependencies for your Python scripts from the ",(0,i.kt)("a",{parentName:"p",href:"https://pypi.org/"},"PyPi")," package index. To do so, declare a function ",(0,i.kt)("inlineCode",{parentName:"p"},"on_requirements()")," without any args and return a list of requirements to be installed. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def on_requirements():\n  return [\n    "pytz==2022.7.1",\n    "requests"\n  ]\n')),(0,i.kt)("p",null,"On deployment, this function will be auto-executed and each requirement from the list will be installed using ",(0,i.kt)("inlineCode",{parentName:"p"},"pip"),". "),(0,i.kt)("admonition",{title:"Note",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you install a package, this package will be available for all scripts deployed to the same FaaS instance.")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Since the ",(0,i.kt)("inlineCode",{parentName:"p"},"on_requirements()")," function is called ",(0,i.kt)("strong",{parentName:"p"},"before")," any requirement is installed, it is not possible to\nuse such a requirement from the list inside this function.")),(0,i.kt)("h2",{id:"undeploy-a-function"},"Undeploy a function"),(0,i.kt)("p",null,"In order to undeploy a function, you can use the command ",(0,i.kt)("inlineCode",{parentName:"p"},"function.delete"),". For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'pipeline:\n  - function.delete:\n      name: "myapp.utils"\n')),(0,i.kt)("h2",{id:"report-an-issue"},"Report an Issue"),(0,i.kt)("admonition",{title:"Your help is needed!",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"In case you're missing something on this page, you found an error or you have an idea for improvement, please ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/pipeforce/pipeforce.github.io/issues/new"},"click here to create a new issue"),". Another way to contribute is, to click ",(0,i.kt)("strong",{parentName:"p"},"Edit this page")," below and directly add your changes in GitHub. Many thanks for your contribution in order to improve PIPEFORCE!")))}m.isMDXComponent=!0}}]);