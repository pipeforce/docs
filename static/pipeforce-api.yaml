---
openapi: "3.0.1"
info:
  title: "PIPEFORCE API"
  version: "v3"
  description: |
    Last update: 2023-10-30T16:08:40.087045Z
    
    This lists all PIPEFORCE RESTful endpoints accessible via the hub service.<br/>
    As base path use `https://hub-namespace.pipeforce.net` and replace `namespace` by the namespace of your target PIPEFORCE instance.<br/>
    This documentation contains three main sections:
     - <b>Pipeline API</b>: All endpoints related to store, read, delete and execute pipelines.
     - <b>Property API</b>: All endpoints related to store, read and delete properties.
     - <b>Command API</b>: All endpoints related to execute a specific command. Note: Only POST version of these endpoints are listed. But most of them can be used also with REST method.

    For more details, courses and examples, go to the [PIPEFORCE Academy](https://logabit.atlassian.net/wiki/spaces/PA/pages/2543353860/Getting+Started).
paths:
  /api/v3/pipeline:
    post:
      summary: "Executes the pipeline script in the body without storing it (= adhoc)."
      description: |
        Executes the pipeline script provided in the request body. Can be a YAML, JSON or Multipart in the body.<br/>
        See the `Content-Type` header for more details to specify the body type. <br/>
        
         - Request headers can be accessed using `${request.headers.<headerName>}` inside the pipeline. <br/>
         - Request params can be accessed using `${request.params.<paramName>}` inside the pipeline. <br/>
         - The request body becomes the initial body of the pipeline. <br/>

        <br/>
          <b>cURL</b>: 
          ```
          curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/pipeline?text=world' \
          --header 'Content-Type: application/yaml' \
          -u 'username:password' \
          --data '
          pipeline:
            - body.set: |
              {"hello": "${request.params.text}"}
          '
          ```

          Learn more: 
           - [Commands & Pipelines](https://logabit.atlassian.net/wiki/spaces/PA/pages/2542796840/Command+and+Pipeline)
           - [Command HTTP API](https://logabit.atlassian.net/wiki/spaces/PA/pages/2543026781/Command+HTTP+API)
           - [Pipeline HTTP API](https://logabit.atlassian.net/wiki/spaces/PA/pages/2542862901/Pipeline+HTTP+API)
      parameters:
        - name: "Content-Type"
          in: "header"
          required: true
          description: |
            If set to `application/yaml` expects a YAML pipeline script in the body which will be parsed and executed. <br/>
            If set to `application/json` expects a JSON pipeline script in the body which will be parsed and executed. <br/>
            If set to `multipart/form-data` expects in the body one part with name `pipeline` containing the pipeline (with part Content-Type set to `application/json` or `application/yaml` (default)) and one or more file upload parts with name `file` which will be converted to a <a href='https://docs.pipeforce.org/contentreference' target='_blank'>content collection</a> and provided in the message body.
          schema:
            type: "string"
      requestBody:
        content:
          "application/yaml":
            schema:
              $ref: "#/components/schemas/Pipeline"
          "application/json":
            schema:
              $ref: "#/components/schemas/Pipeline"
          "multipart/form-data":
            schema:
              $ref: "#/components/schemas/PipelineMultipart"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/PipelineResult"
        '500':
          description: ERROR
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"

      tags:
        - "Pipeline API"
  "/api/v3/pipeline:{path}":
    parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
          minimum: 1
        description: |
          The property path of the pipeline in the property store. Must be of format: `global/app/{app}/pipeline/{pipeline}`. Any other pipeline location is not allowed by this endpoint.
    put:
      summary: "Persists the pipeline given in body in the property store at path."
      description: |
        Stores the pipeline from the body into the property store at given `{path}`. <br/>
        If such a pipeline already exists at this path, updates the existing one. Otherhwise, creates a new one.<br/>
        The pipeline in the body can be a JSON, YAML or a x-www-form-urlencoded query string.
      tags:
        - "Pipeline API"
      parameters:
        - name: "Content-Type"
          in: "header"
          required: true
          description: |
            If set to `application/yaml` expects a YAML pipeline script in the body. <br/>
            If set to `application/json` expects a JSON pipeline script in the body. </br>
            If set to `x-www-form-urlencoded` expects a pipeline query string in the body. For details of this format, see here: [URL encoded Pipeline](https://logabit.atlassian.net/wiki/spaces/PA/pages/2542862901/Pipeline+HTTP+API#Example-7:-With-url-encoded-pipeline%E2%80%8B).
          schema:
            type: "string"
      responses:
        '200':
          description: |
            OK - If pipeline could be stored without problems.
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: string
                    enum:
                      - create
                      - update
                      - skip
                      - error
                  path:
                    type: string
                    description: The full path of the pipeline in the property store.
                  uuid:
                    type: string
                    description: The uuid of the pipeline property in the property store.
                  correlationId:
                    type: string
    post:
      summary: "Executes the persisted pipeline given by path."
      description: |
        Loads the pipeline from property store by given path. Executes it and returns the result in the response body. 
        
         - Request headers can be accessed using `${request.headers.<headerName>}` inside the pipeline. <br/>
         - Request params can be accessed using `${request.params.<paramName>}` inside the pipeline. <br/>
         - The request body becomes the initial body of the pipeline. <br/>

        <br/>
          <b>cURL</b>: 
          ```
          curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/pipeline:global/app/myapp/pipeline/mypipeline' \
          -u 'username:password' \
          ```

          Learn more: 
           - [Commands & Pipelines](https://logabit.atlassian.net/wiki/spaces/PA/pages/2542796840/Command+and+Pipeline)
           - [Command HTTP API](https://logabit.atlassian.net/wiki/spaces/PA/pages/2543026781/Command+HTTP+API)
           - [Pipeline HTTP API](https://logabit.atlassian.net/wiki/spaces/PA/pages/2542862901/Pipeline+HTTP+API)

      tags:
        - "Pipeline API"
      responses:
        '200':
          description: |
            OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/PipelineResult"
        '500':
          description: |
            ERROR
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
    get:
      summary: "Returns the persisted pipeline given by path."
      description: "Loads the pipeline script from property store by given path and returns it."
      tags:
        - "Pipeline API"
      responses:
        '200':
          description: OK
          content:
            application/yaml:
              schema:
                $ref: "#/components/schemas/Pipeline"
            application/json:
              schema:
                $ref: "#/components/schemas/Pipeline"
        '404':
          description: NOT FOUND - In case pipeline at given path was not found.

    delete:
      summary: "Deletes the persisted pipeline given by path."
      description: "Executes the pipeline script provided in the body as YAML or JSON. See the `Content-Type` header for more details. Learn more about [Commands & Pipelines](http://docs.pipeforce.io/docs/commands_pipelines) and the [HTTP API](http://docs.pipeforce.io/docs/guides/commands_pipelines/http_api)."
      tags:
        - "Pipeline API"
  "/api/v3/pipeline:uuid:{uuid}":
    post:
      summary: "Executes the persisted pipeline given by uuid."
      description: "Executes the pipeline script provided in the body as YAML or JSON. See the `Content-Type` header for more details. Learn more about [Commands & Pipelines](http://docs.pipeforce.io/docs/commands_pipelines) and the [HTTP API](http://docs.pipeforce.io/docs/guides/commands_pipelines/http_api)."
      parameters:
        - name: "Content-Type"
          in: "headers"
          required: false
          description: "If set to `application/yaml` expects a YAML pipeline script in the body which will be parsed and executed. If set to `application/json` expects a JSON pipeline script in the body which will be parsed and executed. If set to `multipart/form-data` expects in the body one part with name `pipeline` containing the pipeline YAML and one or more file upload parts with name `file` which will be converted to a <a href='http://docs.pipeforce.io/docs/guides/contentobject' target='_blank'>content collection</a> and provided in the message body. If this header is not specified, `application/yaml` is used as default."
          schema:
            type: "string"
      tags:
        - "Pipeline API"
    put:
      summary: "Stores the pipeline given by uuid."
      description: "Executes the pipeline script provided in the body as YAML or JSON. See the `Content-Type` header for more details. Learn more about [Commands & Pipelines](http://docs.pipeforce.io/docs/commands_pipelines) and the [HTTP API](http://docs.pipeforce.io/docs/guides/commands_pipelines/http_api)."
      parameters:
        - name: "Content-Type"
          in: "headers"
          required: false
          description: "If set to `application/yaml` expects a YAML pipeline script in the body which will be parsed and executed. If set to `application/json` expects a JSON pipeline script in the body which will be parsed and executed. If set to `multipart/form-data` expects in the body one part with name `pipeline` containing the pipeline YAML and one or more file upload parts with name `file` which will be converted to a <a href='http://docs.pipeforce.io/docs/guides/contentobject' target='_blank'>content collection</a> and provided in the message body. If this header is not specified, `application/yaml` is used as default."
          schema:
            type: "string"
      tags:
        - "Pipeline API"
    get:
      summary: "Returns the pipeline given by uuid."
      description: "Executes the pipeline script provided in the body as YAML or JSON. See the `Content-Type` header for more details. Learn more about [Commands & Pipelines](http://docs.pipeforce.io/docs/commands_pipelines) and the [HTTP API](http://docs.pipeforce.io/docs/guides/commands_pipelines/http_api)."
      parameters:
        - name: "Content-Type"
          in: "headers"
          required: false
          description: "If set to `application/yaml` expects a YAML pipeline script in the body which will be parsed and executed. If set to `application/json` expects a JSON pipeline script in the body which will be parsed and executed. If set to `multipart/form-data` expects in the body one part with name `pipeline` containing the pipeline YAML and one or more file upload parts with name `file` which will be converted to a <a href='http://docs.pipeforce.io/docs/guides/contentobject' target='_blank'>content collection</a> and provided in the message body. If this header is not specified, `application/yaml` is used as default."
          schema:
            type: "string"
      tags:
        - "Pipeline API"
    delete:
      summary: "Deletes the persisted pipeline given by uuid."
      description: "Executes the pipeline script provided in the body as YAML or JSON. See the `Content-Type` header for more details. Learn more about [Commands & Pipelines](http://docs.pipeforce.io/docs/commands_pipelines) and the [HTTP API](http://docs.pipeforce.io/docs/guides/commands_pipelines/http_api)."
      parameters:
        - name: "Content-Type"
          in: "headers"
          required: false
          description: "If set to `application/yaml` expects a YAML pipeline script in the body which will be parsed and executed. If set to `application/json` expects a JSON pipeline script in the body which will be parsed and executed. If set to `multipart/form-data` expects in the body one part with name `pipeline` containing the pipeline YAML and one or more file upload parts with name `file` which will be converted to a <a href='http://docs.pipeforce.io/docs/guides/contentobject' target='_blank'>content collection</a> and provided in the message body. If this header is not specified, `application/yaml` is used as default."
          schema:
            type: "string"
      tags:
        - "Pipeline API"
  "/api/v3/property:{path}":
    post:
      summary: "Stores the property value given in body at given path."
      description: "Stores the property from the body into the property store. If such a property already exists, updates the existing one."
      parameters:
        - name: "Content-Type"
          in: "headers"
          required: false
          description: "If set to `application/yaml` expects a YAML pipeline script in the body which will be parsed and executed. If set to `application/json` expects a JSON pipeline script in the body which will be parsed and executed. If set to `multipart/form-data` expects in the body one part with name `pipeline` containing the pipeline YAML and one or more file upload parts with name `file` which will be converted to a <a href='http://docs.pipeforce.io/docs/guides/contentobject' target='_blank'>content collection</a> and provided in the message body. If this header is not specified, `application/yaml` is used as default."
          schema:
            type: "string"
      tags:
        - "Property API"
    get:
      summary: "Returns the property at given path."
      description: "Stores the property from the body into the property store. If such a property already exists, updates the existing one."
      parameters:
        - name: "Content-Type"
          in: "headers"
          required: false
          description: "If set to `application/yaml` expects a YAML pipeline script in the body which will be parsed and executed. If set to `application/json` expects a JSON pipeline script in the body which will be parsed and executed. If set to `multipart/form-data` expects in the body one part with name `pipeline` containing the pipeline YAML and one or more file upload parts with name `file` which will be converted to a <a href='http://docs.pipeforce.io/docs/guides/contentobject' target='_blank'>content collection</a> and provided in the message body. If this header is not specified, `application/yaml` is used as default."
          schema:
            type: "string"
      tags:
        - "Property API"
    delete:
      summary: "Deletes the property at given path."
      description: "Stores the property from the body into the property store. If such a property already exists, updates the existing one."
      parameters:
        - name: "Content-Type"
          in: "headers"
          required: false
          description: "If set to `application/yaml` expects a YAML pipeline script in the body which will be parsed and executed. If set to `application/json` expects a JSON pipeline script in the body which will be parsed and executed. If set to `multipart/form-data` expects in the body one part with name `pipeline` containing the pipeline YAML and one or more file upload parts with name `file` which will be converted to a <a href='http://docs.pipeforce.io/docs/guides/contentobject' target='_blank'>content collection</a> and provided in the message body. If this header is not specified, `application/yaml` is used as default."
          schema:
            type: "string"
      tags:
        - "Property API"
  "/api/v3/property:uuid:{uuid}":
    post:
      summary: "Updates the property value given in body at given uuid."
      description: "Stores the property from the body into the property store. If such a property already exists, updates the existing one."
      parameters:
        - name: "Content-Type"
          in: "headers"
          required: false
          description: "If set to `application/yaml` expects a YAML pipeline script in the body which will be parsed and executed. If set to `application/json` expects a JSON pipeline script in the body which will be parsed and executed. If set to `multipart/form-data` expects in the body one part with name `pipeline` containing the pipeline YAML and one or more file upload parts with name `file` which will be converted to a <a href='http://docs.pipeforce.io/docs/guides/contentobject' target='_blank'>content collection</a> and provided in the message body. If this header is not specified, `application/yaml` is used as default."
          schema:
            type: "string"
      tags:
        - "Property API"
    get:
      summary: "Returns the property value with given uuid."
      description: "Stores the property from the body into the property store. If such a property already exists, updates the existing one."
      parameters:
        - name: "Content-Type"
          in: "headers"
          required: false
          description: "If set to `application/yaml` expects a YAML pipeline script in the body which will be parsed and executed. If set to `application/json` expects a JSON pipeline script in the body which will be parsed and executed. If set to `multipart/form-data` expects in the body one part with name `pipeline` containing the pipeline YAML and one or more file upload parts with name `file` which will be converted to a <a href='http://docs.pipeforce.io/docs/guides/contentobject' target='_blank'>content collection</a> and provided in the message body. If this header is not specified, `application/yaml` is used as default."
          schema:
            type: "string"
      tags:
        - "Property API"
    delete:
      summary: "Deletes the property with given uuid."
      description: "Stores the property from the body into the property store. If such a property already exists, updates the existing one."
      parameters:
        - name: "Content-Type"
          in: "headers"
          required: false
          description: "If set to `application/yaml` expects a YAML pipeline script in the body which will be parsed and executed. If set to `application/json` expects a JSON pipeline script in the body which will be parsed and executed. If set to `multipart/form-data` expects in the body one part with name `pipeline` containing the pipeline YAML and one or more file upload parts with name `file` which will be converted to a <a href='http://docs.pipeforce.io/docs/guides/contentobject' target='_blank'>content collection</a> and provided in the message body. If this header is not specified, `application/yaml` is used as default."
          schema:
            type: "string"
      tags:
        - "Property API"
  "/api/v3/resource/{appName}/{path}":
    get:
      summary: "Returns the property value from inside an app as a static resource."
      description: "Stores the property from the body into the property store. If such a property already exists, updates the existing one."
      parameters:
        - name: "Content-Type"
          in: "headers"
          required: false
          description: "If set to `application/yaml` expects a YAML pipeline script in the body which will be parsed and executed. If set to `application/json` expects a JSON pipeline script in the body which will be parsed and executed. If set to `multipart/form-data` expects in the body one part with name `pipeline` containing the pipeline YAML and one or more file upload parts with name `file` which will be converted to a <a href='http://docs.pipeforce.io/docs/guides/contentobject' target='_blank'>content collection</a> and provided in the message body. If this header is not specified, `application/yaml` is used as default."
          schema:
            type: "string"
      tags:
        - "Property API"
  "/api/v3/resource/uuid:{appUuid}/{path}":
    get:
      summary: "Returns the property value from inside the app with given uuid as a static resource."
      description: "Stores the property from the body into the property store. If such a property already exists, updates the existing one."
      parameters:
        - name: "Content-Type"
          in: "headers"
          required: false
          description: "If set to `application/yaml` expects a YAML pipeline script in the body which will be parsed and executed. If set to `application/json` expects a JSON pipeline script in the body which will be parsed and executed. If set to `multipart/form-data` expects in the body one part with name `pipeline` containing the pipeline YAML and one or more file upload parts with name `file` which will be converted to a <a href='http://docs.pipeforce.io/docs/guides/contentobject' target='_blank'>content collection</a> and provided in the message body. If this header is not specified, `application/yaml` is used as default."
          schema:
            type: "string"
      tags:
        - "Property API"

  ## --- This section will be auto-generated
  "/api/v3/command/apidoc.commands":
    post:
      summary: "Returns the OpenAPI documentation of commands."
      description: |
        Returns the OpenAPI documentation of commands. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=apidoc.commands' target='_blank'>Search Academy for more details about: <b>apidoc.commands</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - apidoc.commands:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/apidoc.commands' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - apidoc
  "/api/v3/command/apidoc.pel.utils":
    post:
      summary: "Returns the OpenAPI documentation of PEL utils."
      description: |
        Returns the OpenAPI documentation of PEL utils. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=apidoc.pel.utils' target='_blank'>Search Academy for more details about: <b>apidoc.pel.utils</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - apidoc.pel.utils:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/apidoc.pel.utils' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - apidoc
  "/api/v3/command/apidoc.pipeforce":
    post:
      summary: "Returns the OpenAPI documentation of all default PIPEFORCE hub endpoints as YAML."
      description: |
        Returns the OpenAPI documentation of all default PIPEFORCE hub endpoints as YAML. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=apidoc.pipeforce' target='_blank'>Search Academy for more details about: <b>apidoc.pipeforce</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - apidoc.pipeforce:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/apidoc.pipeforce' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - apidoc
  "/api/v3/command/app.config.find":
    post:
      summary: "Returns the configuration of an app or a list of apps the currently logged-in user is allowed to see."
      description: |
        Returns the configuration of an app or a list of apps the currently logged-in user is allowed to see. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=app.config.find' target='_blank'>Search Academy for more details about: <b>app.config.find</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - app.config.find:
              app: string
              async: boolean
              branch: string
              credentials: string
              github: string
              runTests: boolean
              secret: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/app.config.find?app=string&async=boolean&branch=string&credentials=string&github=string&runTests=boolean&secret=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: app
            in: "query"
            required: false
            description: "The name of the app to load the config from. If null or empty, the config of all apps will be returned instead. If not found, empty JSON is returned."
            schema:
              type: string
          - name: async
            in: "query"
            required: false
            description: "Run the installation async?"
            schema:
              type: boolean
          - name: branch
            in: "query"
            required: false
            description: "The GitHub repo branch, commit or tag reference to be used. If null or empty, the default branch of the GitHub repo will be used. This parameter will be ignored in case no value for github is given."
            schema:
              type: string
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: github
            in: "query"
            required: false
            description: "A GitHub repository path (owner/reponame) to download the app resources from. For example acme/myproject. If no credentials are given, the github-default secret will be used if exists. Otherwise, repo is expected to be a public one. If this parameter is missing, the app sources are expected in the body as zip file content instead."
            schema:
              type: string
          - name: runTests
            in: "query"
            required: false
            description: "Run the tests of the app after installation?"
            schema:
              type: boolean
          - name: secret
            in: "query"
            required: false
            description: "Refers to the name of a stored secret entry to be used by this command. If not null, all other credentials parameters are ignored if there exists any."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - app
  "/api/v3/command/app.install":
    post:
      summary: "Installs an app into the property store"
      description: |
        Installs an app into the property store. The app can be located on GitHub or can be provided as zip file content in the body. If app is located in a private GitHub repo, the param secret must be set or the default secret github-default-readonly must exist which will be used as fallback in case no secret is set as param here. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=app.install' target='_blank'>Search Academy for more details about: <b>app.install</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - app.install:
              async: boolean
              branch: string
              credentials: string
              github: string
              overwrite: boolean
              runTests: boolean
              secret: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/app.install?async=boolean&branch=string&credentials=string&github=string&overwrite=boolean&runTests=boolean&secret=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: async
            in: "query"
            required: false
            description: "Run the installation async?"
            schema:
              type: boolean
          - name: branch
            in: "query"
            required: false
            description: "The GitHub repo branch, commit or tag reference to be used. If null or empty, the default branch of the GitHub repo will be used. This parameter will be ignored in case no value for github is given."
            schema:
              type: string
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: github
            in: "query"
            required: false
            description: "A GitHub repository path (owner/reponame) to download the app resources from. For example acme/myproject. If no credentials are given, the github-default secret will be used if exists. Otherwise, repo is expected to be a public one. If this parameter is missing, the app sources are expected in the body as zip file content instead."
            schema:
              type: string
          - name: overwrite
            in: "query"
            required: false
            description: "What to do if app with this key already exists? If true, the existing app will be uninstalled and replaced by this new version. Otherwise, an attempt to install an existing app will cause an error."
            schema:
              type: boolean
          - name: runTests
            in: "query"
            required: false
            description: "Run the tests of the app after installation?"
            schema:
              type: boolean
          - name: secret
            in: "query"
            required: false
            description: "Refers to the name of a stored secret entry to be used by this command. If not null, all other credentials parameters are ignored if there exists any."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - app
  "/api/v3/command/app.marketplace.search":
    post:
      summary: "Searches the marketplace for apps ready to be installed. <br/>Note: This command is limited to max. 10 calls per minute."
      description: |
        Searches the marketplace for apps ready to be installed. <br/>Note: This command is limited to max. 10 calls per minute. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=app.marketplace.search' target='_blank'>Search Academy for more details about: <b>app.marketplace.search</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - app.marketplace.search:
              license: string
              order: string
              page: string
              results: string
              searchInDesc: boolean
              searchInName: boolean
              searchInReadme: boolean
              searchInTopics: boolean
              searchString: string
              secret: string
              sort: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/app.marketplace.search?license=string&order=string&page=string&results=string&searchInDesc=boolean&searchInName=boolean&searchInReadme=boolean&searchInTopics=boolean&searchString=string&secret=string&sort=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: license
            in: "query"
            required: false
            description: "Limit the search to app repos with given exact license keyword only."
            schema:
              type: string
          - name: order
            in: "query"
            required: false
            description: "Orders the result desc or asc."
            schema:
              type: string
          - name: page
            in: "query"
            required: false
            description: "The 1-based page number to return."
            schema:
              type: string
          - name: results
            in: "query"
            required: false
            description: "Max. number of results per page."
            schema:
              type: string
          - name: searchInDesc
            in: "query"
            required: false
            description: "Search for searchString in the app repo description?"
            schema:
              type: boolean
          - name: searchInName
            in: "query"
            required: false
            description: "Search for searchString in the app repo name?"
            schema:
              type: boolean
          - name: searchInReadme
            in: "query"
            required: false
            description: "Search for searchString in the app repo README file?"
            schema:
              type: boolean
          - name: searchInTopics
            in: "query"
            required: false
            description: "Search for searchString in the repo topics?"
            schema:
              type: boolean
          - name: searchString
            in: "query"
            required: false
            description: "The text to search for."
            schema:
              type: string
          - name: secret
            in: "query"
            required: false
            description: "Refers to the name of a stored secret entry to be used by this command. If not null, all other credentials parameters are ignored if there exists any."
            schema:
              type: string
          - name: sort
            in: "query"
            required: false
            description: "Sorts the results by author-date or committer-date or (best-match). If null or empty, best-match will be used as default."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - app
  "/api/v3/command/app.name.list":
    post:
      summary: "Returns the names of all installed global apps"
      description: |
        Returns the names of all installed global apps. This command is optimized for best performance. So prefer to use it instead of reading properties or property paths with pattern matching. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=app.name.list' target='_blank'>Search Academy for more details about: <b>app.name.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - app.name.list:
              async: boolean
              branch: string
              credentials: string
              github: string
              runTests: boolean
              secret: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/app.name.list?async=boolean&branch=string&credentials=string&github=string&runTests=boolean&secret=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: async
            in: "query"
            required: false
            description: "Run the installation async?"
            schema:
              type: boolean
          - name: branch
            in: "query"
            required: false
            description: "The GitHub repo branch, commit or tag reference to be used. If null or empty, the default branch of the GitHub repo will be used. This parameter will be ignored in case no value for github is given."
            schema:
              type: string
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: github
            in: "query"
            required: false
            description: "A GitHub repository path (owner/reponame) to download the app resources from. For example acme/myproject. If no credentials are given, the github-default secret will be used if exists. Otherwise, repo is expected to be a public one. If this parameter is missing, the app sources are expected in the body as zip file content instead."
            schema:
              type: string
          - name: runTests
            in: "query"
            required: false
            description: "Run the tests of the app after installation?"
            schema:
              type: boolean
          - name: secret
            in: "query"
            required: false
            description: "Refers to the name of a stored secret entry to be used by this command. If not null, all other credentials parameters are ignored if there exists any."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - app
  "/api/v3/command/app.resource.get":
    post:
      summary: "Returns resources from inside a given app resource folder of the property store."
      description: |
        Returns resources from inside a given app resource folder of the property store. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=app.resource.get' target='_blank'>Search Academy for more details about: <b>app.resource.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - app.resource.get:
              app: string
              async: boolean
              branch: string
              credentials: string
              github: string
              path: string
              runTests: boolean
              secret: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/app.resource.get?app=string&async=boolean&branch=string&credentials=string&github=string&path=string&runTests=boolean&secret=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: app
            in: "query"
            required: true
            description: "The name of the app to load the resource from"
            schema:
              type: string
          - name: async
            in: "query"
            required: false
            description: "Run the installation async?"
            schema:
              type: boolean
          - name: branch
            in: "query"
            required: false
            description: "The GitHub repo branch, commit or tag reference to be used. If null or empty, the default branch of the GitHub repo will be used. This parameter will be ignored in case no value for github is given."
            schema:
              type: string
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: github
            in: "query"
            required: false
            description: "A GitHub repository path (owner/reponame) to download the app resources from. For example acme/myproject. If no credentials are given, the github-default secret will be used if exists. Otherwise, repo is expected to be a public one. If this parameter is missing, the app sources are expected in the body as zip file content instead."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path relative to the app's resource folder of the resource to be returned."
            schema:
              type: string
          - name: runTests
            in: "query"
            required: false
            description: "Run the tests of the app after installation?"
            schema:
              type: boolean
          - name: secret
            in: "query"
            required: false
            description: "Refers to the name of a stored secret entry to be used by this command. If not null, all other credentials parameters are ignored if there exists any."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - app
  "/api/v3/command/app.uninstall":
    post:
      summary: "Uninstalls the given app."
      description: |
        Uninstalls the given app. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=app.uninstall' target='_blank'>Search Academy for more details about: <b>app.uninstall</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - app.uninstall:
              appKey: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/app.uninstall?appKey=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: appKey
            in: "query"
            required: false
            description: "The key of the app to uninstall. For example: global/app/myapp."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - app
  "/api/v3/command/app.update":
    post:
      summary: "Deprecated. Use app.install with param update:true instead. Updates the given apps."
      description: |
        Deprecated. Use app.install with param update:true instead. Updates the given apps. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=app.update' target='_blank'>Search Academy for more details about: <b>app.update</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - app.update:
              async: boolean
              branch: string
              credentials: string
              github: string
              runTests: boolean
              secret: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/app.update?async=boolean&branch=string&credentials=string&github=string&runTests=boolean&secret=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: async
            in: "query"
            required: false
            description: "Run the installation async?"
            schema:
              type: boolean
          - name: branch
            in: "query"
            required: false
            description: "The GitHub repo branch, commit or tag reference to be used. If null or empty, the default branch of the GitHub repo will be used. This parameter will be ignored in case no value for github is given."
            schema:
              type: string
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: github
            in: "query"
            required: false
            description: "A GitHub repository path (owner/reponame) to download the app resources from. For example acme/myproject. If no credentials are given, the github-default secret will be used if exists. Otherwise, repo is expected to be a public one. If this parameter is missing, the app sources are expected in the body as zip file content instead."
            schema:
              type: string
          - name: runTests
            in: "query"
            required: false
            description: "Run the tests of the app after installation?"
            schema:
              type: boolean
          - name: secret
            in: "query"
            required: false
            description: "Refers to the name of a stored secret entry to be used by this command. If not null, all other credentials parameters are ignored if there exists any."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - app
  "/api/v3/command/assert":
    post:
      summary: "Evaluates a given PEL conditions and throws an error in case a condition is invalid."
      description: |
        Evaluates a given PEL conditions and throws an error in case a condition is invalid. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=assert' target='_blank'>Search Academy for more details about: <b>assert</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - assert:
              actual: string
              body.equals: string
              equals: string
              expect: string
              false: string
              message: string
              true: string
              value: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/assert?actual=string&body.equals=string&equals=string&expect=string&false=string&message=string&true=string&value=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: actual
            in: "query"
            required: false
            description: "The actual value to be compared with the expect value. If both values do not match, the assert fails."
            schema:
              type: string
          - name: body.equals
            in: "query"
            required: false
            description: "The value of this param is compared to the body. If different, exception is thrown. Can be a PE."
            schema:
              type: string
          - name: equals
            in: "query"
            required: false
            description: "Compares the result of param value with this. If not equal, throws exception. Can be a PE."
            schema:
              type: string
          - name: expect
            in: "query"
            required: false
            description: "The value to be expected."
            schema:
              type: string
          - name: false
            in: "query"
            required: false
            description: "A PE which must evaluate to false."
            schema:
              type: string
          - name: message
            in: "query"
            required: false
            description: "An optional message to be used in case of invalid condition. Can be a PE."
            schema:
              type: string
          - name: true
            in: "query"
            required: false
            description: "(default) A PE which must evaluate to true."
            schema:
              type: string
          - name: value
            in: "query"
            required: false
            description: "The value to be used for comparision. Can be a PE."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - assert
  "/api/v3/command/audit.log":
    post:
      summary: "Logs an audit step. Audit logs are treated differently since they need to be archived in some cases for compliance reasons."
      description: |
        Logs an audit step. Audit logs are treated differently since they need to be archived in some cases for compliance reasons. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=audit.log' target='_blank'>Search Academy for more details about: <b>audit.log</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - audit.log:
              level: string
              message: string
              principal: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/audit.log?level=string&message=string&principal=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: level
            in: "query"
            required: false
            description: "By default all audit log entries are created with INFO level. For very sensitive or problematic actions, this can be increased to WARN or ERROR."
            schema:
              type: string
          - name: message
            in: "query"
            required: true
            description: "(default) The message to log. Can be a string or a pipe expression. If null or empty, the full pipe message will be logged."
            schema:
              type: string
          - name: principal
            in: "query"
            required: false
            description: "The optional information about the principal (user, system, account, ...) who initiated this. If null or empty, the info of the currently logged-in principal is used instead."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - audit
  "/api/v3/command/barcode.create":
    post:
      summary: "Creates a barcode from a dynamic format."
      description: |
        Creates a barcode from a dynamic format. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=barcode.create' target='_blank'>Search Academy for more details about: <b>barcode.create</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - barcode.create:
              format: string
              height: string
              text: string
              width: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/barcode.create?format=string&height=string&text=string&width=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: format
            in: "query"
            required: false
            description: "The dynamic format of the barcode to be created. One of: AZTEC, CODABAR, CODE_39, CODE_93, CODE_128, DATA_MATRIX, EAN_8, EAN_13, ITF, PDF_417, QR_CODE, UPC_A, UPC_E"
            schema:
              type: string
          - name: height
            in: "query"
            required: false
            description: "The height of the barcode. If empty, the default size is used."
            schema:
              type: string
          - name: text
            in: "query"
            required: false
            description: "(default) The text value to be transformed to a barcode."
            schema:
              type: string
          - name: width
            in: "query"
            required: false
            description: "The width of the barcode. If empty, the default size is used."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - barcode
  "/api/v3/command/barcode.read":
    post:
      summary: "Reads a barcode from a dynamic PNG format"
      description: |
        Reads a barcode from a dynamic PNG format. Expects the barcode image as content object in the body. Detects the barcode type automatically. By default returns the text extracted from the barcode in the body. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=barcode.read' target='_blank'>Search Academy for more details about: <b>barcode.read</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - barcode.read:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/barcode.read' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - barcode
  "/api/v3/command/body.delete":
    post:
      summary: "Sets the value in the body to null. Deletes any existing value in the body."
      description: |
        Sets the value in the body to null. Deletes any existing value in the body. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=body.delete' target='_blank'>Search Academy for more details about: <b>body.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - body.delete:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/body.delete' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - body
  "/api/v3/command/body.filter":
    post:
      summary: "DEPRECATED"
      description: |
        DEPRECATED. Converts the input body to JSON and then filters the input body and removes any properties not matching the given filter. Throws exception if input body cannot be converted to JSON.Does nothing, if input body is null or empty. If the first level of the body is a list, appliesthe filter to each element inside the list. This command can be used for example to filter outsensitive information or to shrink a big result set for performance reasons. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=body.filter' target='_blank'>Search Academy for more details about: <b>body.filter</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - body.filter:
              properties: string
              removeKey: boolean
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/body.filter?properties=string&removeKey=boolean' \
        -u 'username:password' 
        ```
      parameters:
          - name: properties
            in: "query"
            required: false
            description: "A comma separated list of first-level properties to be shown. If set, only those properties of the first level will be returned, those are listed here. All other properties will be omitted. For example to filter a user entity in the body with filter: id,username would return only the id and the username of the user. If not set, the body will not be converted and filtered at all and returned unchanged."
            schema:
              type: string
          - name: removeKey
            in: "query"
            required: false
            description: "Can only be applied, if the result is a list and contains elements with a single property each. For example: [{name: foo}, {name: bar}]. If set to true, removes the key from the property and converts the result to a simple list like: [foo, bar]. If the result is not a list or elements in the list contain more than one property, this param is ignored."
            schema:
              type: boolean
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - body
  "/api/v3/command/body.peek":
    post:
      summary: "Sets the most recent entry of the bodyStack as body. Doesn't remove it from the stack."
      description: |
        Sets the most recent entry of the bodyStack as body. Doesn't remove it from the stack. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=body.peek' target='_blank'>Search Academy for more details about: <b>body.peek</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - body.peek:
              var: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/body.peek?var=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: var
            in: "query"
            required: false
            description: "(default) The name of the variable to peek from."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - body
  "/api/v3/command/body.pop":
    post:
      summary: "Removes the most recent entry of the bodyStack and sets it to the body"
      description: |
        Removes the most recent entry of the bodyStack and sets it to the body. (pops from stack and sets to body), If no entry is left in body stack, null is set to body. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=body.pop' target='_blank'>Search Academy for more details about: <b>body.pop</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - body.pop:
              var: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/body.pop?var=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: var
            in: "query"
            required: false
            description: "(default) The name of the variable to pop from."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - body
  "/api/v3/command/body.push":
    post:
      summary: "Sets the current value of the body to a location defined by a PEL"
      description: |
        Sets the current value of the body to a location defined by a PEL. This is handy in case you would like to simply save the body before next command overwrites it.If target is given, it is a PEL which will be executed in order to store the body value to this location. In case the target parameter is missing, the body will be pushed to a variable of name bodyStack. If this variable exists, it is assumed to be a list where the body value can be added at its end. if this variable doesn't exist, it will be created as a stack (list). <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=body.push' target='_blank'>Search Academy for more details about: <b>body.push</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - body.push:
              var: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/body.push?var=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: var
            in: "query"
            required: false
            description: "(default) The name of the variable to create the body stack under and push the value to. If a list under this variable doesn't exist yet, it will be created."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - body
  "/api/v3/command/body.set":
    post:
      summary: "Sets a value in the body. Overwrites any existing value in the body. The value to be set can be a constant or an expression."
      description: |
        Sets a value in the body. Overwrites any existing value in the body. The value to be set can be a constant or an expression. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=body.set' target='_blank'>Search Academy for more details about: <b>body.set</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - body.set:
              format: string
              value: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/body.set?format=string&value=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: format
            in: "query"
            required: false
            description: "Converts a string value to the given target format if possible. If set to 'auto' tries to detect the target format by inspecting the value string. If set to 'none' doesnt apply any conversion."
            schema:
              type: string
          - name: value
            in: "query"
            required: false
            description: "(default) A string or an expression to be used as the value to be set. If missing, null is set."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - body
  "/api/v3/command/bot.prompt":
    post:
      summary: "Sends a prompt to a bot endpoint and returns the answer."
      description: |
        Sends a prompt to a bot endpoint and returns the answer. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=bot.prompt' target='_blank'>Search Academy for more details about: <b>bot.prompt</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - bot.prompt:
              engine: string
              maxTokens: number
              secret: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/bot.prompt?engine=string&maxTokens=number&secret=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: engine
            in: "query"
            required: false
            description: "The backend Bot implementation and model to be used. If not given, the default engine will be used."
            schema:
              type: string
          - name: maxTokens
            in: "query"
            required: false
            description: "The maximum number of tokens to return in the response."
            schema:
              type: number
          - name: secret
            in: "query"
            required: false
            description: "The name of the secret which contains the token to connect to the bot backend. If not given as parameter will lookup in the secret store using the default name."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - bot
  "/api/v3/command/cache.clear":
    post:
      summary: "Clears the underlying central cache and removes any entry those time to live has been expired"
      description: |
        Clears the underlying central cache and removes any entry those time to live has been expired. Can also be used to remove a single entry from the cache. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=cache.clear' target='_blank'>Search Academy for more details about: <b>cache.clear</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - cache.clear:
              key: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/cache.clear?key=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: key
            in: "query"
            required: false
            description: "(default) The key to load the value from the cache to remove. If empty or null, all entries in the cache will be inspected and those time to live has been expired will be removed."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - cache
  "/api/v3/command/cache.get":
    post:
      summary: "Reads a value with given key from the cache and writes it into the output."
      description: |
        Reads a value with given key from the cache and writes it into the output. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=cache.get' target='_blank'>Search Academy for more details about: <b>cache.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - cache.get:
              exit: boolean
              key: string
              remove: boolean
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/cache.get?exit=boolean&key=string&remove=boolean' \
        -u 'username:password' 
        ```
      parameters:
          - name: exit
            in: "query"
            required: false
            description: "If true, exits the pipeline if cache entry exists."
            schema:
              type: boolean
          - name: key
            in: "query"
            required: true
            description: "(default) The key to load the value from the cache."
            schema:
              type: string
          - name: remove
            in: "query"
            required: false
            description: "If true, removes the entry after it was successfully returned."
            schema:
              type: boolean
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - cache
  "/api/v3/command/cache.has":
    post:
      summary: "Checks if cache has given entry"
      description: |
        Checks if cache has given entry <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=cache.has' target='_blank'>Search Academy for more details about: <b>cache.has</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - cache.has:
              key: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/cache.has?key=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: key
            in: "query"
            required: false
            description: "(default) Checks, if cache has entry with given key. If yes, puts true in the output. Otherwise false."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - cache
  "/api/v3/command/cache.info":
    post:
      summary: "Returns information about the current state of the cache. Available for system and support users only."
      description: |
        Returns information about the current state of the cache. Available for system and support users only. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=cache.info' target='_blank'>Search Academy for more details about: <b>cache.info</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - cache.info:
              key: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/cache.info?key=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: key
            in: "query"
            required: false
            description: "Returns the info for a given cache entry. If null or empty, the overall cache info is returned."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - cache
  "/api/v3/command/cache.list":
    post:
      summary: "Lists ALL entries of the cache. Use with care!"
      description: |
        Lists ALL entries of the cache. Use with care! <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=cache.list' target='_blank'>Search Academy for more details about: <b>cache.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - cache.list:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/cache.list' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - cache
  "/api/v3/command/cache.put":
    post:
      summary: "Saves the given value under given key into a central cache.<br/>If no value param is given, uses the body as cache value."
      description: |
        Saves the given value under given key into a central cache.<br/>If no value param is given, uses the body as cache value. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=cache.put' target='_blank'>Search Academy for more details about: <b>cache.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - cache.put:
              key: string
              timeToLive: number
              value: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/cache.put?key=string&timeToLive=number&value=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: key
            in: "query"
            required: true
            description: "The unique key for the cache entry."
            schema:
              type: string
          - name: timeToLive
            in: "query"
            required: false
            description: "The min. time to live for this cache entry in millis."
            schema:
              type: number
          - name: value
            in: "query"
            required: false
            description: "The value for the cache entry. If not set, null is used."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - cache
  "/api/v3/command/call":
    post:
      summary: "Calls a pipeline script and returns with the result in the body. Note: Since version 9.0, JavaScript calls are no longer supported."
      description: |
        Calls a pipeline script and returns with the result in the body. Note: Since version 9.0, JavaScript calls are no longer supported. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=call' target='_blank'>Search Academy for more details about: <b>call</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - call:
              args: string
              uri: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/call?args=string&uri=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: args
            in: "query"
            required: false
            description: "Name value pair of arguments to be passed to the script. If the script is a pipeline, the arguments are set as vars overwriting any existing vars.If the script is a remote HTTP URL, the arguments are passed as request parameters, each.If the script is a script in classpath or property store, the arguments are passed via implicit variable: pi.args."
            schema:
              type: string
          - name: uri
            in: "query"
            required: true
            description: "(default) The uri to be called."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - call
  "/api/v3/command/capture":
    post:
      summary: "DEPREACTED (Use the cache.&#42; commands instead)"
      description: |
        DEPREACTED (Use the cache.&#42; commands instead). Captures the last pipe message and adds it into a list in the header under key {@link #HEADER_CAPTURED}. This is primarily for testing purposes but also can be used to create a snapshot of a certain pipeline state. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=capture' target='_blank'>Search Academy for more details about: <b>capture</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - capture:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/capture' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - capture
  "/api/v3/command/command.schema":
    post:
      summary: "Returns the JSON schema for all built-in commands."
      description: |
        Returns the JSON schema for all built-in commands. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=command.schema' target='_blank'>Search Academy for more details about: <b>command.schema</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - command.schema:
              command: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/command.schema?command=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: command
            in: "query"
            required: false
            description: "The specific command name to fetch schema from. If set, only the schema for this specific command is returned."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - command
  "/api/v3/command/config.find":
    post:
      summary: "Returns all admin config settings for a given group from the backend as a JSON in this format: {configKey:{value:someValue, canOverwrite:true|false}}"
      description: |
        Returns all admin config settings for a given group from the backend as a JSON in this format: {configKey:{value:someValue, canOverwrite:true|false}}. The attribute canOverwrite is only available if param includePermission is set. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=config.find' target='_blank'>Search Academy for more details about: <b>config.find</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - config.find:
              group: string
              includePermission: string
              key: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/config.find?group=string&includePermission=string&key=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: group
            in: "query"
            required: false
            description: "The config group to select. If null or empty, all configs will be returned if user has permission to do so."
            schema:
              type: string
          - name: includePermission
            in: "query"
            required: false
            description: "If true, additionally shows whether a currently logged-in user can write/change a configuration or not by adding the attribute canOverwrite:true|false. to each config entry."
            schema:
              type: string
          - name: key
            in: "query"
            required: false
            description: "The config key inside a given group. If null or empty, all configs from the selected group will be returned."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - config
  "/api/v3/command/container.registry.delete":
    post:
      summary: "Deletes a container registry."
      description: |
        Deletes a container registry. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=container.registry.delete' target='_blank'>Search Academy for more details about: <b>container.registry.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - container.registry.delete:
              credentials: string
              url: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/container.registry.delete?credentials=string&url=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: url
            in: "query"
            required: false
            description: "The url of the registry."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - container
  "/api/v3/command/container.registry.list":
    post:
      summary: "Lists all container registries."
      description: |
        Lists all container registries. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=container.registry.list' target='_blank'>Search Academy for more details about: <b>container.registry.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - container.registry.list:
              credentials: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/container.registry.list?credentials=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - container
  "/api/v3/command/container.registry.put":
    post:
      summary: "Adds a new container registry."
      description: |
        Adds a new container registry. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=container.registry.put' target='_blank'>Search Academy for more details about: <b>container.registry.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - container.registry.put:
              credentials: string
              email: string
              password: string
              url: string
              username: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/container.registry.put?credentials=string&email=string&password=string&url=string&username=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: email
            in: "query"
            required: false
            description: "The email for the registry."
            schema:
              type: string
          - name: password
            in: "query"
            required: false
            description: "The password to access the registry."
            schema:
              type: string
          - name: url
            in: "query"
            required: false
            description: "The url of the registry."
            schema:
              type: string
          - name: username
            in: "query"
            required: false
            description: "The username to access the registry."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - container
  "/api/v3/command/content.get":
    post:
      summary: "Deprecated. Use resolve command instead. Reads content from provided uri and puts the result back to body."
      description: |
        Deprecated. Use resolve command instead. Reads content from provided uri and puts the result back to body. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=content.get' target='_blank'>Search Academy for more details about: <b>content.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - content.get:
              uri: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/content.get?uri=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: uri
            in: "query"
            required: true
            description: "The content uri of the content to load."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - content
  "/api/v3/command/data.decrypt":
    post:
      summary: "Decrypts the data previously encrypted using the command data.encrypt in the body using AES-256 in CBC mode by default"
      description: |
        Decrypts the data previously encrypted using the command data.encrypt in the body using AES-256 in CBC mode by default. Puts the decrypted data into the output. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=data.decrypt' target='_blank'>Search Academy for more details about: <b>data.decrypt</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - data.decrypt:
              password: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/data.decrypt?password=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: password
            in: "query"
            required: true
            description: "The password to decrypt the body with. The PBKDF2 algorithm will be applied to this password before using it as decryption key."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - data
  "/api/v3/command/data.encrypt":
    post:
      summary: "Encrypts the data in the body using AES-256 in CBC mode by default and puts the encrypted datainto the output."
      description: |
        Encrypts the data in the body using AES-256 in CBC mode by default and puts the encrypted datainto the output. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=data.encrypt' target='_blank'>Search Academy for more details about: <b>data.encrypt</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - data.encrypt:
              password: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/data.encrypt?password=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: password
            in: "query"
            required: true
            description: "The password to encrypt the body with. The PBKDF2 algorithm will be applied to this password before using it as encryption key."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - data
  "/api/v3/command/data.enrich":
    post:
      summary: "Enriches a given data object by applying a given PEL expression on it."
      description: |
        Enriches a given data object by applying a given PEL expression on it. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=data.enrich' target='_blank'>Search Academy for more details about: <b>data.enrich</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - data.enrich:
              do: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/data.enrich?do=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: do
            in: "query"
            required: true
            description: "A PEL which will be executed in order to enrich a selected field of the data object from input. These variables will be provided in the PEL: headers (= the pipeline headers), vars (= the pipeline variables), body (= the pipeline body), input (= the input data)"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - data
  "/api/v3/command/data.list.filter":
    post:
      summary: "Iterates over a list of items given by input and removes all items matching the given criteria."
      description: |
        Iterates over a list of items given by input and removes all items matching the given criteria. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=data.list.filter' target='_blank'>Search Academy for more details about: <b>data.list.filter</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - data.list.filter:
              exclude: string
              iterItemName: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/data.list.filter?exclude=string&iterItemName=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: exclude
            in: "query"
            required: true
            description: "A PEL which will be executed on each iteration item. If the expression results in a true value, the item will be removed from the list. Additionally to the default PEL variables, the variable item (= current iteration item, default name) will be provided."
            schema:
              type: string
          - name: iterItemName
            in: "query"
            required: false
            description: "The name of the iteration item value, provided for  exclude"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - data
  "/api/v3/command/data.list.iterate":
    post:
      summary: "Iterates over a data list (like JSON array for example) and applies the given do-action on each entry matching given where-condition"
      description: |
        Iterates over a data list (like JSON array for example) and applies the given do-action on each entry matching given where-condition. If two lists a are given, iterates over both lists whereas listA will be the outer loop and listB will be the inner loop. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=data.list.iterate' target='_blank'>Search Academy for more details about: <b>data.list.iterate</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - data.list.iterate:
              do: string
              iterItemName: string
              iterItemNameA: string
              iterItemNameB: string
              listA: string
              listB: string
              where: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/data.list.iterate?do=string&iterItemName=string&iterItemNameA=string&iterItemNameB=string&listA=string&listB=string&where=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: do
            in: "query"
            required: true
            description: "A PEL which will be executed on each where-selected iteration item. It is also possible to apply multiple expressions in each iteration. Multiple such expressions must be separated by a semicolon ;Additionally to the default PEL variables, the variables itemA (= current iteration item of listA, default name) and itemB (= current iteration item of listB, default name) will be provided. In case therethere is only one list provided from body or input param, only one iteration item will be provided with name 'item' as default name."
            schema:
              type: string
          - name: iterItemName
            in: "query"
            required: false
            description: "The name of the iteration item value in case only single list has been provided via input or body."
            schema:
              type: string
          - name: iterItemNameA
            in: "query"
            required: false
            description: "The name of the iteration item value of listA provided in the PEL parts"
            schema:
              type: string
          - name: iterItemNameB
            in: "query"
            required: false
            description: "The name of the iteration item value of listB provided in the PEL parts"
            schema:
              type: string
          - name: listA
            in: "query"
            required: false
            description: "The main list where data must be merged into. If null or empty, the value from input parameter will be used instead. If both are given, the value from listA has precedence."
            schema:
              type: string
          - name: listB
            in: "query"
            required: false
            description: "The seconds list where data mast be read from. For each item in listA, this list will be fully iterated."
            schema:
              type: string
          - name: where
            in: "query"
            required: false
            description: "Selects the iteration step in listA which must be elected for the do operation. If null or empty, any iteration step will be selected. Additionally to the default PEL variables, the variables itemA (= current iteration item of listA, default name) and itemB (= current iteration item of listB) will be provided."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - data
  "/api/v3/command/data.list.limit":
    post:
      summary: "Limits a given list of data to a specific size. Removes any item from the list those index is above given maxLength - 1."
      description: |
        Limits a given list of data to a specific size. Removes any item from the list those index is above given maxLength - 1. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=data.list.limit' target='_blank'>Search Academy for more details about: <b>data.list.limit</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - data.list.limit:
              maxLength: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/data.list.limit?maxLength=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: maxLength
            in: "query"
            required: false
            description: "Limits the data list from the input to the given max. length."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - data
  "/api/v3/command/data.mapping":
    post:
      summary: "Converts from one data structure into a another by applying simple mapping rules"
      description: |
        Converts from one data structure into a another by applying simple mapping rules. Auto-creates nested elements if required. In case input is an iterable (list) and iterable is set to true then all rules will apply to each entry in the list. In case no output is given, a new target list is created to hold all newly mapped values. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=data.mapping' target='_blank'>Search Academy for more details about: <b>data.mapping</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - data.mapping:
              ignoreEmptyItems: string
              iterate: string
              rules: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/data.mapping?ignoreEmptyItems=string&iterate=string&rules=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: ignoreEmptyItems
            in: "query"
            required: false
            description: "In case iterate is set to true and an iteration item is an empty JSON, should it be ignored in the output?"
            schema:
              type: string
          - name: iterate
            in: "query"
            required: false
            description: "In case the input is a list and all the mappings rules must be applied on each single item in the list by iterating them, set this flag to true. If input is not iterable but this is set to true, nothing happens and the single input item will be processed instead."
            schema:
              type: string
          - name: rules
            in: "query"
            required: false
            description: "(default) A list of mapping PEL rules to map from the input to the output data set. A rule has the format inputPEL1 -> outputPEL1. Multiple rules are separated by a comma directly followed by a new line."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - data
  "/api/v3/command/data.transform":
    post:
      summary: "This data transformer converts the input to an output format by applying the given template"
      description: |
        This data transformer converts the input to an output format by applying the given template. By default the current message is provided as model inside the template context so you can access body, vars or headers similar to the default PEL approach. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=data.transform' target='_blank'>Search Academy for more details about: <b>data.transform</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - data.transform:
              engine: string
              groupBy: string
              iterate: string
              modelName: string
              template: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/data.transform?engine=string&groupBy=string&iterate=string&modelName=string&template=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: engine
            in: "query"
            required: false
            description: "The template engine to be used. Currently 'freemarker' and 'pel' is supported."
            schema:
              type: string
          - name: groupBy
            in: "query"
            required: false
            description: "An expression to apply on the target list in order to group the result of a row into. If the expression returns false, the row result is added to the end of the list.If null or empty, each row result creates a new entry in the target list."
            schema:
              type: string
          - name: iterate
            in: "query"
            required: false
            description: "If true, the input is expected to be a list which will be iterated. The template is then applied on each iteration row and the result is added to a target list."
            schema:
              type: string
          - name: modelName
            in: "query"
            required: false
            description: "The name of the root model under which the input can be accessed inside the template. If null or empty, then the input defines the model names."
            schema:
              type: string
          - name: template
            in: "query"
            required: true
            description: "The template to be used for the transformation. It can the template text itself as string or a qualified uri pointing to a template resource like this for example: $uri:property:/my/template/path"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - data
  "/api/v3/command/datetime":
    post:
      summary: "Returns the current time at server side."
      description: |
        Returns the current time at server side. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=datetime' target='_blank'>Search Academy for more details about: <b>datetime</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - datetime:
              format: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/datetime?format=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: format
            in: "query"
            required: false
            description: "The date time format pattern. If null, the system default format is used."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - datetime
  "/api/v3/command/datetime.zones":
    post:
      summary: "Returns all official IANA time-zone names supported by this PIPEFORCE instance: http://www.iana.org/time-zones"
      description: |
        Returns all official IANA time-zone names supported by this PIPEFORCE instance: http://www.iana.org/time-zones <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=datetime.zones' target='_blank'>Search Academy for more details about: <b>datetime.zones</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - datetime.zones:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/datetime.zones' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - datetime
  "/api/v3/command/delivery.attachment.add":
    post:
      summary: "Adds a single attachment to an existing PIPEFORCE Secure Delivery. Note: Attachments can be added to deliveries only in state DRAFT."
      description: |
        Adds a single attachment to an existing PIPEFORCE Secure Delivery. Note: Attachments can be added to deliveries only in state DRAFT. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=delivery.attachment.add' target='_blank'>Search Academy for more details about: <b>delivery.attachment.add</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - delivery.attachment.add:
              deliveryUuid: string
              length: string
              mimeType: string
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/delivery.attachment.add?deliveryUuid=string&length=string&mimeType=string&name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: deliveryUuid
            in: "query"
            required: true
            description: "The uuid of an existing delivery to be updated."
            schema:
              type: string
          - name: length
            in: "query"
            required: false
            description: "The length of the attachment in bytes."
            schema:
              type: string
          - name: mimeType
            in: "query"
            required: false
            description: "The mime type of the attachment."
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "The name of the attachment."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - delivery
  "/api/v3/command/delivery.create":
    post:
      summary: "Creates a new PIPEFORCE Secure Delivery and sets it in the target"
      description: |
        Creates a new PIPEFORCE Secure Delivery and sets it in the target <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=delivery.create' target='_blank'>Search Academy for more details about: <b>delivery.create</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - delivery.create:
              attachments: string
              deleteAfter: string
              message: string
              notifySender: string
              privacyLevel: number
              recipients: string
              subject: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/delivery.create?attachments=string&deleteAfter=string&message=string&notifySender=string&privacyLevel=number&recipients=string&subject=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: attachments
            in: "query"
            required: false
            description: "The list of attachment file names or a list of JSON objects to be added to this delivery."
            schema:
              type: string
          - name: deleteAfter
            in: "query"
            required: false
            description: "Delete the delivery attachments after this date and time given as unix timestamp in millis. If null, empty, 0 or negative, delivery will never be deleted."
            schema:
              type: string
          - name: message
            in: "query"
            required: false
            description: "The message of the delivery. If null or empty, the default message will be used."
            schema:
              type: string
          - name: notifySender
            in: "query"
            required: false
            description: "If true, notifies sender when recipients have downloaded delivery."
            schema:
              type: string
          - name: privacyLevel
            in: "query"
            required: false
            description: "The privacy level to send the delivery. Must be one of 1, 2, 3 or 4."
            schema:
              type: number
          - name: recipients
            in: "query"
            required: false
            description: "A comma separated list of email recipients. Also PEL is supported here."
            schema:
              type: string
          - name: subject
            in: "query"
            required: false
            description: "The subject of the delivery. If null or empty, the default subject will be used."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - delivery
  "/api/v3/command/delivery.delete":
    post:
      summary: "Deletes a given delivery."
      description: |
        Deletes a given delivery. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=delivery.delete' target='_blank'>Search Academy for more details about: <b>delivery.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - delivery.delete:
              deliveryUuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/delivery.delete?deliveryUuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: deliveryUuid
            in: "query"
            required: true
            description: "The uuid of the delivery to delete."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - delivery
  "/api/v3/command/delivery.finalize":
    post:
      summary: "Finalizes an existing delivery. After finalized, only recipients can be added but message and attachments of delivery can not be changed any longer."
      description: |
        Finalizes an existing delivery. After finalized, only recipients can be added but message and attachments of delivery can not be changed any longer. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=delivery.finalize' target='_blank'>Search Academy for more details about: <b>delivery.finalize</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - delivery.finalize:
              deliveryUuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/delivery.finalize?deliveryUuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: deliveryUuid
            in: "query"
            required: true
            description: "The uuid of the delivery to finalize."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - delivery
  "/api/v3/command/delivery.get":
    post:
      summary: "Returns an existing delivery."
      description: |
        Returns an existing delivery. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=delivery.get' target='_blank'>Search Academy for more details about: <b>delivery.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - delivery.get:
              deliveryUuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/delivery.get?deliveryUuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: deliveryUuid
            in: "query"
            required: true
            description: "The uuid of the delivery."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - delivery
  "/api/v3/command/delivery.inbox.details":
    post:
      summary: "Returns the details of a given inbox Delivery."
      description: |
        Returns the details of a given inbox Delivery. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=delivery.inbox.details' target='_blank'>Search Academy for more details about: <b>delivery.inbox.details</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - delivery.inbox.details:
              deliveryUuid: string
              recipientEmail: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/delivery.inbox.details?deliveryUuid=string&recipientEmail=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: deliveryUuid
            in: "query"
            required: true
            description: "The uuid of the delivery."
            schema:
              type: string
          - name: recipientEmail
            in: "query"
            required: false
            description: "The email of the recipient. If not specified request user email is used"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - delivery
  "/api/v3/command/delivery.inbox.list":
    post:
      summary: "Lists all deliveries for the currently logged-in user."
      description: |
        Lists all deliveries for the currently logged-in user. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=delivery.inbox.list' target='_blank'>Search Academy for more details about: <b>delivery.inbox.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - delivery.inbox.list:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/delivery.inbox.list' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - delivery
  "/api/v3/command/delivery.migration":
    post:
      summary: "It returns migrated UUIDs in return body"
      description: |
        It returns migrated UUIDs in return body <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=delivery.migration' target='_blank'>Search Academy for more details about: <b>delivery.migration</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - delivery.migration:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/delivery.migration' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - delivery
  "/api/v3/command/delivery.outbox.delete":
    post:
      summary: "Deletes a delivery from the currently logged-in users outbox."
      description: |
        Deletes a delivery from the currently logged-in users outbox. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=delivery.outbox.delete' target='_blank'>Search Academy for more details about: <b>delivery.outbox.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - delivery.outbox.delete:
              deliveryUuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/delivery.outbox.delete?deliveryUuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: deliveryUuid
            in: "query"
            required: true
            description: "The uuid of the delivery."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - delivery
  "/api/v3/command/delivery.outbox.details":
    post:
      summary: "Returns the details of a given outbox Delivery."
      description: |
        Returns the details of a given outbox Delivery. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=delivery.outbox.details' target='_blank'>Search Academy for more details about: <b>delivery.outbox.details</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - delivery.outbox.details:
              deliveryUuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/delivery.outbox.details?deliveryUuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: deliveryUuid
            in: "query"
            required: true
            description: "The uuid of the delivery."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - delivery
  "/api/v3/command/delivery.outbox.list":
    post:
      summary: "Lists all deliveries sent by the currently logged-in user."
      description: |
        Lists all deliveries sent by the currently logged-in user. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=delivery.outbox.list' target='_blank'>Search Academy for more details about: <b>delivery.outbox.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - delivery.outbox.list:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/delivery.outbox.list' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - delivery
  "/api/v3/command/delivery.recipient.add":
    post:
      summary: "Adds recipients to an existing PIPEFORCE Secure Delivery. Note: Recipients can be added to deliveries only in state DRAFT or FINALIZED."
      description: |
        Adds recipients to an existing PIPEFORCE Secure Delivery. Note: Recipients can be added to deliveries only in state DRAFT or FINALIZED. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=delivery.recipient.add' target='_blank'>Search Academy for more details about: <b>delivery.recipient.add</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - delivery.recipient.add:
              deliveryUuid: string
              email: string
              locale: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/delivery.recipient.add?deliveryUuid=string&email=string&locale=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: deliveryUuid
            in: "query"
            required: false
            description: "The uuid of an existing delivery to be updated."
            schema:
              type: string
          - name: email
            in: "query"
            required: false
            description: "The email address of the recipient to be added."
            schema:
              type: string
          - name: locale
            in: "query"
            required: false
            description: "The locale to be used for this recipient like de, en or fr for example."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - delivery
  "/api/v3/command/delivery.send":
    post:
      summary: "Sends a given PIPEFORCE Secure Delivery. If delivery is in status DRAFT it will be converted to FINALIZED before send."
      description: |
        Sends a given PIPEFORCE Secure Delivery. If delivery is in status DRAFT it will be converted to FINALIZED before send. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=delivery.send' target='_blank'>Search Academy for more details about: <b>delivery.send</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - delivery.send:
              deliveryUuid: string
              recipients: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/delivery.send?deliveryUuid=string&recipients=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: deliveryUuid
            in: "query"
            required: true
            description: "The uuid of the delivery to send."
            schema:
              type: string
          - name: recipients
            in: "query"
            required: false
            description: "The comma separated or PEL list of recipients to (re-)send the delivery to. The recipients must already exist in the delivery. If null or empty, the delivery message is send to all existing recipients of the delivery."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - delivery
  "/api/v3/command/delivery.update":
    post:
      summary: "Updates an existing PIPEFORCE Secure Delivery."
      description: |
        Updates an existing PIPEFORCE Secure Delivery. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=delivery.update' target='_blank'>Search Academy for more details about: <b>delivery.update</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - delivery.update:
              attachments: string
              deleteAfter: string
              deliveryUuid: string
              message: string
              notifySender: string
              privacyLevel: number
              recipients: string
              subject: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/delivery.update?attachments=string&deleteAfter=string&deliveryUuid=string&message=string&notifySender=string&privacyLevel=number&recipients=string&subject=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: attachments
            in: "query"
            required: false
            description: "The attachments to be set to this delivery. Overwrites any existing attachments. If null or empty, this attribute wont be updated."
            schema:
              type: string
          - name: deleteAfter
            in: "query"
            required: false
            description: "Delete the delivery attachments after this date and time given as unix timestamp in millis. If 0 or negative, delivery will never be deleted. If null or empty, this attribute wont be updated. If set overwrites any existing value."
            schema:
              type: string
          - name: deliveryUuid
            in: "query"
            required: false
            description: "The uuid of an existing delivery to be updated with values from the params. Any existing value will be overwritten by parameter set on this command. If null or empty, a new delivery will be created and initialized with values from params. Note: Deliveries can only be fully updated in DRAFT state. In FINALIZED state, only recipients can be updated."
            schema:
              type: string
          - name: message
            in: "query"
            required: false
            description: "The message of the delivery. If null or empty, this attribute wont be updated. Overwrites any existing value."
            schema:
              type: string
          - name: notifySender
            in: "query"
            required: false
            description: "If true, notifies sender when recipients have downloaded delivery. If null or empty, this attribute wont be updated."
            schema:
              type: string
          - name: privacyLevel
            in: "query"
            required: false
            description: "The privacy level to send the delivery. Must be one of 1, 2, 3 or 4. Overwrites any existing value. If null or empty, this attribute wont be updated."
            schema:
              type: number
          - name: recipients
            in: "query"
            required: false
            description: "A comma separated list of email recipients. Overwrites any existing recipients. If null or empty, this attribute wont be updated."
            schema:
              type: string
          - name: subject
            in: "query"
            required: false
            description: "The subject of the delivery. If null or empty, this attribute wont be updated.. Overwrites any existing value."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - delivery
  "/api/v3/command/dev.null":
    post:
      summary: "This command simply reads the body (if there is any) and sends its content to '/dev/null'. It is mainly for testing purposes."
      description: |
        This command simply reads the body (if there is any) and sends its content to '/dev/null'. It is mainly for testing purposes. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=dev.null' target='_blank'>Search Academy for more details about: <b>dev.null</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - dev.null:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/dev.null' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - dev
  "/api/v3/command/doc.api.pelutils":
    post:
      summary: "Returns the api doc for the available PEL utils."
      description: |
        Returns the api doc for the available PEL utils. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=doc.api.pelutils' target='_blank'>Search Academy for more details about: <b>doc.api.pelutils</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - doc.api.pelutils:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/doc.api.pelutils' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - doc
  "/api/v3/command/document.understand":
    post:
      summary: "Returns metadata for a given unstructured document like an invoice PDF for example"
      description: |
        Returns metadata for a given unstructured document like an invoice PDF for example. Expects the document to be in the body by default. Returns the result as JSON in the body (replacing any existing value in the body). <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=document.understand' target='_blank'>Search Academy for more details about: <b>document.understand</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - document.understand:
              apiKey: string
              config: string
              filter: string
              provider: string
              restUrl: string
              secret: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/document.understand?apiKey=string&config=string&filter=string&provider=string&restUrl=string&secret=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: apiKey
            in: "query"
            required: false
            description: "The alternative API key to connect to the service. If null or empty, the default one will be used, as defined by the default backend settings."
            schema:
              type: string
          - name: config
            in: "query"
            required: false
            description: "The config json to process document"
            schema:
              type: string
          - name: filter
            in: "query"
            required: false
            description: "A PEL as filter to be applied to the output data before it is returned by this command. If null or empty, no filter is applied."
            schema:
              type: string
          - name: provider
            in: "query"
            required: false
            description: "The name of the provider to process document."
            schema:
              type: string
          - name: restUrl
            in: "query"
            required: false
            description: "The URL to be called by the command. If null or empty, the default url will be used as defined in the backend."
            schema:
              type: string
          - name: secret
            in: "query"
            required: false
            description: "The name of the secret in secret store."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - document
  "/api/v3/command/docusign":
    post:
      summary: "Requests a signature of the given document in the body <br/>via email (remote signing) using DocuSign"
      description: |
        Requests a signature of the given document in the body <br/>via email (remote signing) using DocuSign. See here: <br/>https://developers.docusign.com/esign-rest-api/code-examples/code-example-request-a-signature-via-email<br/>Expects the to be signed document in the body with json.file encoding. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=docusign' target='_blank'>Search Academy for more details about: <b>docusign</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - docusign:
              accessToken: string
              accountId: string
              ccEmail: string
              ccName: string
              signerEmail: string
              signerName: string
              subject: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/docusign?accessToken=string&accountId=string&ccEmail=string&ccName=string&signerEmail=string&signerName=string&subject=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: accessToken
            in: "query"
            required: false
            description: "The DocuSign access token. If null or empty, the token will be read from settings."
            schema:
              type: string
          - name: accountId
            in: "query"
            required: false
            description: "The docuSign account Id for REST calls. Can be obtained here: https://developers.docusign.com/esign-rest-api/guides/authentication/user-info-endpoints . If not set, the command tries to get the account ID by an additional request from DocuSign"
            schema:
              type: string
          - name: ccEmail
            in: "query"
            required: false
            description: "The email of cc user to get informed about the signing request. If null, no cc mail is sent."
            schema:
              type: string
          - name: ccName
            in: "query"
            required: false
            description: "The name of cc email user to get informed about the signing request."
            schema:
              type: string
          - name: signerEmail
            in: "query"
            required: true
            description: "The email address of the signer."
            schema:
              type: string
          - name: signerName
            in: "query"
            required: false
            description: "The real name of the signer."
            schema:
              type: string
          - name: subject
            in: "query"
            required: false
            description: "The email subject to be send to the signer. If null or empty, the default subject will be set."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - docusign
  "/api/v3/command/drive.archive.save":
    post:
      summary: "Saves the content of the body to the given archive folder in Drive"
      description: |
        Saves the content of the body to the given archive folder in Drive. The content of the body must be a single file. Verifies the integrity of the archive on write. Returns the final archive file name / path (without archive root path) into the output target. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=drive.archive.save' target='_blank'>Search Academy for more details about: <b>drive.archive.save</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - drive.archive.save:
              namingPattern: string
              path: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/drive.archive.save?namingPattern=string&path=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: namingPattern
            in: "query"
            required: false
            description: "The PEL pattern to be applied to generate the final archive file name / path. This name / path will be relative to the given archive root path. Additionally, provides these variables in this PEL pattern context: archiveCounter = The last value used as counter as it comes from the .counter file. When not present, is initialized by counting all files in archive folder. counter = The archiveCounter increased by 1.archivePath = The path to the archive root as given by path param. basename = The base filename of the archive file, without extension (for example myfile.pdf = myfile). basenameNoId = Same as basename but without the _ID-123 part in the file name if there is any.ext = The extension of the archive file, without a period (for example myfile.pdf = pdf) filename = The full name of the archive file, with extension (for example myfile.pdf = myfile.pdf). The default pattern is this: basename_counter.ext"
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The root path of the archive folder where the file to be saved to."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - drive
  "/api/v3/command/drive.copy":
    post:
      summary: "Copies a folder or file on Drive."
      description: |
        Copies a folder or file on Drive. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=drive.copy' target='_blank'>Search Academy for more details about: <b>drive.copy</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - drive.copy:
              path: string
              to: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/drive.copy?path=string&to=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: path
            in: "query"
            required: true
            description: "The path of the folder or file to be copied."
            schema:
              type: string
          - name: to
            in: "query"
            required: true
            description: "The target folder to copy the resource into."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - drive
  "/api/v3/command/drive.delete":
    post:
      summary: "Deletes a file or folder on Drive. If resource doesnt exist, nothing happens."
      description: |
        Deletes a file or folder on Drive. If resource doesnt exist, nothing happens. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=drive.delete' target='_blank'>Search Academy for more details about: <b>drive.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - drive.delete:
              path: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/drive.delete?path=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: path
            in: "query"
            required: true
            description: "The path of the resource to be deleted. If it is a folder, it will be deleted recursively."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - drive
  "/api/v3/command/drive.exists":
    post:
      summary: "Checks whether a resource in Drive exists. Puts the string true or false in the message body depending whether the resource exists."
      description: |
        Checks whether a resource in Drive exists. Puts the string true or false in the message body depending whether the resource exists. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=drive.exists' target='_blank'>Search Academy for more details about: <b>drive.exists</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - drive.exists:
              path: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/drive.exists?path=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: path
            in: "query"
            required: true
            description: "The path of the resource to check for existence."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - drive
  "/api/v3/command/drive.list":
    post:
      summary: "Lists all resources from drive folder."
      description: |
        Lists all resources from drive folder. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=drive.list' target='_blank'>Search Academy for more details about: <b>drive.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - drive.list:
              path: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/drive.list?path=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: path
            in: "query"
            required: true
            description: "The path of the folder to be listed."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - drive
  "/api/v3/command/drive.mkdir":
    post:
      summary: "Creates a new dir on Drive if it not already exists."
      description: |
        Creates a new dir on Drive if it not already exists. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=drive.mkdir' target='_blank'>Search Academy for more details about: <b>drive.mkdir</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - drive.mkdir:
              path: string
              recurse: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/drive.mkdir?path=string&recurse=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: path
            in: "query"
            required: true
            description: "The path of the folder the new dir should be created within."
            schema:
              type: string
          - name: recurse
            in: "query"
            required: false
            description: "If set to true, any non existing folder in the path will be created."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - drive
  "/api/v3/command/drive.move":
    post:
      summary: "Moves a folder or file on Drive from one location into another."
      description: |
        Moves a folder or file on Drive from one location into another. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=drive.move' target='_blank'>Search Academy for more details about: <b>drive.move</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - drive.move:
              path: string
              to: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/drive.move?path=string&to=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: path
            in: "query"
            required: true
            description: "The path of the folder or file to be moved."
            schema:
              type: string
          - name: to
            in: "query"
            required: true
            description: "The target folder to move the resource into."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - drive
  "/api/v3/command/drive.read":
    post:
      summary: "Reads a file from drive and puts its content as a pipeline resource into the body."
      description: |
        Reads a file from drive and puts its content as a pipeline resource into the body. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=drive.read' target='_blank'>Search Academy for more details about: <b>drive.read</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - drive.read:
              append: boolean
              path: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/drive.read?append=boolean&path=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: append
            in: "query"
            required: false
            description: "If true, appends the files read from drive to any existing collection in the body. In case the body is no collection but a content (single file), creates a new collection and adds all to this collection (already existing file and read files). In case the body is different from collection or content, an error is thrown. If false (default), overwrites any existing body value."
            schema:
              type: boolean
          - name: path
            in: "query"
            required: true
            description: "(default) The path of the file to be read from Drive."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - drive
  "/api/v3/command/drive.save":
    post:
      summary: "Saves the content of the body to Drive"
      description: |
        Saves the content of the body to Drive. The content of the body can be a content object (= single file) or a content collection (= folder of files).In case the body is not a content object, it will be tried to convert it to such a content object. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=drive.save' target='_blank'>Search Academy for more details about: <b>drive.save</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - drive.save:
              cleanupBody: string
              namingStrategy: string
              path: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/drive.save?cleanupBody=string&namingStrategy=string&path=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: cleanupBody
            in: "query"
            required: false
            description: "If true, deletes the content from the body after it was saved to drive (default). Note: In case the body content is a stream, this stream will be empty even if this was set to false since streams can be processed only once and was already processed by writing its data to drive here."
            schema:
              type: string
          - name: namingStrategy
            in: "query"
            required: false
            description: "If defined, applies the given naming strategy to the name of the resource. If null or empty, no naming strategy is applied."
            schema:
              type: string
          - name: path
            in: "query"
            required: false
            description: "(default) The path of the file to be saved in drive. If a content collection is in the body, this is the path of the base folder where to store these files recursively. Otherwise, it is expected to be the full path to a single file. If null or empty, the name of the content object is used as path. If content object has also no path set, an exception is thrown."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - drive
  "/api/v3/command/drive.share":
    post:
      summary: "Shares a folder in Drive given by path to users given by recipients."
      description: |
        Shares a folder in Drive given by path to users given by recipients. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=drive.share' target='_blank'>Search Academy for more details about: <b>drive.share</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - drive.share:
              expires: string
              invite: boolean
              message: string
              model: string
              password: string
              path: string
              permission: number
              subject: string
              to: string
              type: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/drive.share?expires=string&invite=boolean&message=string&model=string&password=string&path=string&permission=number&subject=string&to=string&type=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: expires
            in: "query"
            required: false
            description: "NOT SUPPORTED YET. A timestamp in millis since 1970 when this share will expire. If -1 share will never expire."
            schema:
              type: string
          - name: invite
            in: "query"
            required: false
            description: "NOT SUPPORTED YET. Send an invite email to recipients."
            schema:
              type: boolean
          - name: message
            in: "query"
            required: false
            description: "Optional message of the share email to be send to the recipient. If type=user and at least one of subject or message parameter is set, an email will be send to the recipient after it was shared to him."
            schema:
              type: string
          - name: model
            in: "query"
            required: false
            description: "Optional model for the share email to be send to the recipient."
            schema:
              type: string
          - name: password
            in: "query"
            required: false
            description: "NOT SUPPORTED YET. A password to protect the share."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path to the folder to be shared."
            schema:
              type: string
          - name: permission
            in: "query"
            required: false
            description: "The permission for the share: 1 (read), 2 (update), 4 (create), 8 (delete), 16 (share), 31 (all).  Note: Permissions can be combined by additions: For example read (1) + update (2) would be 3. For public shares defaults to 1 (read)."
            schema:
              type: number
          - name: subject
            in: "query"
            required: false
            description: "Optional subject of the share email to be send to the recipient. If type=user and at least one of subject or message parameter is set, an email will be send to the recipient after it was shared to him."
            schema:
              type: string
          - name: to
            in: "query"
            required: true
            description: "Comma separated list of users, group names or email addresses. Never null. If this is an expression and points to comma separated list, an array or a collection, will create share to any of the entries. If this value is missing, a public share is created instead"
            schema:
              type: string
          - name: type
            in: "query"
            required: false
            description: "Can be either shared to 'user' or to 'group'. Defaults to 'user'"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - drive
  "/api/v3/command/drive.tag":
    post:
      summary: "Adds or removes a WebDAV tag to a resource on drive."
      description: |
        Adds or removes a WebDAV tag to a resource on drive. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=drive.tag' target='_blank'>Search Academy for more details about: <b>drive.tag</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - drive.tag:
              path: string
              remove: boolean
              tagname: string
              tagvalue: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/drive.tag?path=string&remove=boolean&tagname=string&tagvalue=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: path
            in: "query"
            required: true
            description: "The path of the resource to tag."
            schema:
              type: string
          - name: remove
            in: "query"
            required: false
            description: "If true (or any non empty/null value), removes the given tag."
            schema:
              type: boolean
          - name: tagname
            in: "query"
            required: true
            description: "The name of the tag to add."
            schema:
              type: string
          - name: tagvalue
            in: "query"
            required: false
            description: "The value of the tag to add."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - drive
  "/api/v3/command/drive.upload.chunked":
    post:
      summary: "Supports chunked uploads of large files into the Drive endpoint"
      description: |
        Supports chunked uploads of large files into the Drive endpoint. Expects an object in the body which can be converted to an input stream as the chunk data to be uploaded. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=drive.upload.chunked' target='_blank'>Search Academy for more details about: <b>drive.upload.chunked</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - drive.upload.chunked:
              action: string
              index: number
              path: string
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/drive.upload.chunked?action=string&index=number&path=string&uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: action
            in: "query"
            required: true
            description: "Defines the action of the chunked upload. One of: create, upload, finalize, cancel"
            schema:
              type: string
          - name: index
            in: "query"
            required: false
            description: "The index of the chunk. Mandatory for the upload action."
            schema:
              type: number
          - name: path
            in: "query"
            required: false
            description: "The target path where to copy the final file on finalize action. Mandatory for the finalize action."
            schema:
              type: string
          - name: uuid
            in: "query"
            required: false
            description: "The uuid to refer to the upload session as returned by the create action. Required for upload, finalize and cancel actions."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - drive
  "/api/v3/command/error":
    post:
      summary: "This command stops the execution of the current pipeline and returns an error to the caller."
      description: |
        This command stops the execution of the current pipeline and returns an error to the caller. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=error' target='_blank'>Search Academy for more details about: <b>error</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - error:
              message: string
              type: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/error?message=string&type=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: message
            in: "query"
            required: true
            description: "(default) The error message to return to the caller."
            schema:
              type: string
          - name: type
            in: "query"
            required: false
            description: "The type string to set for this exception."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - error
  "/api/v3/command/eval":
    post:
      summary: "Executes a given pipeline expression with the message as context."
      description: |
        Executes a given pipeline expression with the message as context. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=eval' target='_blank'>Search Academy for more details about: <b>eval</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - eval:
              expr: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/eval?expr=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: expr
            in: "query"
            required: true
            description: "(default) The pipeline expression to be executed. Can be a single pel string or a list of expression strings."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - eval
  "/api/v3/command/event.listen":
    post:
      summary: "Listening for events works like this: Add this command at the very first in your pipeline, define the event key you want to listen for and an optional..."
      description: |
        Listening for events works like this: Add this command at the very first in your pipeline, define the event key you want to listen for and an optional filter expression. Then save this pipeline into the property store. This causes the system to automatically register this pipeline and execute it whenever an event with given key and matching filter is fired. Note: Only one event.listen command per pipeline is allowed and it needs to be the very first command in the pipeline. In the body of the pipeline the event object is provided and can be used for filtering for example. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=event.listen' target='_blank'>Search Academy for more details about: <b>event.listen</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - event.listen:
              eventKey: string
              filter: string
              key: string
              selector: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/event.listen?eventKey=string&filter=string&key=string&selector=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: eventKey
            in: "query"
            required: false
            description: "The key to listen for."
            schema:
              type: string
          - name: filter
            in: "query"
            required: false
            description: "DEPRECATED: Use parameter 'selector' instead. An optional PEL to execute the pipeline only in case the filter applies."
            schema:
              type: string
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use eventKey instead."
            schema:
              type: string
          - name: selector
            in: "query"
            required: false
            description: "Selects the message to be passed to this listener. Can be a PEL or a selector expression. Note: For performance reasons, using the body payload for filtering is not allowed here and will throw an exception. Use headers for filtering instead. If this parameter is set, filter will be ignored."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - event
  "/api/v3/command/event.mapping.get":
    post:
      summary: "Returns all event key to pipeline key mappings."
      description: |
        Returns all event key to pipeline key mappings. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=event.mapping.get' target='_blank'>Search Academy for more details about: <b>event.mapping.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - event.mapping.get:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/event.mapping.get' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - event
  "/api/v3/command/event.send":
    post:
      summary: "Sends a new event to inform listeners in pipelines and microservices."
      description: |
        Sends a new event to inform listeners in pipelines and microservices. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=event.send' target='_blank'>Search Academy for more details about: <b>event.send</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - event.send:
              async: string
              key: string
              payload: string
              traceId: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/event.send?async=string&key=string&payload=string&traceId=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: async
            in: "query"
            required: false
            description: "Send the event in ASYNC mode? Note: ASYNC is faster but lacks transaction capability. If false, message is send in SYNC. Slower but can use the current authentication and transaction context."
            schema:
              type: string
          - name: key
            in: "query"
            required: true
            description: "The key under which to send this event."
            schema:
              type: string
          - name: payload
            in: "query"
            required: false
            description: "The payload to send with this event. May be null."
            schema:
              type: string
          - name: traceId
            in: "query"
            required: false
            description: "The optional tracedId to be used to send this event. If not defined, a random traceId is created automatically."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - event
  "/api/v3/command/except":
    post:
      summary: "In case an exception happens in a command, the pipeline execution will go to the first except command it finds (it will skip all other commands) after..."
      description: |
        In case an exception happens in a command, the pipeline execution will go to the first except command it finds (it will skip all other commands) after it. If the conditions on this except command match, the body of the except command will be executed. This means all commands after the except command will be executed until end of the pipeline or except.end was found whatever is first. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=except' target='_blank'>Search Academy for more details about: <b>except</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - except:
              drop: string
              responseStatusCode: string
              type: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/except?drop=string&responseStatusCode=string&type=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: drop
            in: "query"
            required: false
            description: "Should the exception be dropped after it was processed by this command or re-thrown?"
            schema:
              type: string
          - name: responseStatusCode
            in: "query"
            required: false
            description: "In case this exception was raised because of a call of an external HTTP endpoint, the HTTP status code returned by this external service can be matched here."
            schema:
              type: string
          - name: type
            in: "query"
            required: false
            description: "(default) The type of the exception to match. Can be a single exception of a list of exception types."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - except
  "/api/v3/command/except.end":
    post:
      summary: "Indicates the end of an except block."
      description: |
        Indicates the end of an except block. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=except.end' target='_blank'>Search Academy for more details about: <b>except.end</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - except.end:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/except.end' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - except
  "/api/v3/command/exit":
    post:
      summary: "Exits the current pipeline flow and returns the current body state to the caller."
      description: |
        Exits the current pipeline flow and returns the current body state to the caller. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=exit' target='_blank'>Search Academy for more details about: <b>exit</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - exit:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/exit' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - exit
  "/api/v3/command/finally":
    post:
      summary: "Any command placed after this finally command will be executed even if the pipeline execution was quit using the exit command or by an exception."
      description: |
        Any command placed after this finally command will be executed even if the pipeline execution was quit using the exit command or by an exception. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=finally' target='_blank'>Search Academy for more details about: <b>finally</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - finally:
              do: string
              drop: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/finally?do=string&drop=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: do
            in: "query"
            required: false
            description: "An optional PE to execute finally."
            schema:
              type: string
          - name: drop
            in: "query"
            required: false
            description: "If set to true, catches and drops any existing exception and does not re-throw it. This is useful in case the exceptions will be handled by the finally block or should be dropped at all."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - finally
  "/api/v3/command/foreach":
    post:
      summary: "Splits a given set of data and repeats the subsequent commands for each entry in a given list until location of 'foreach.end' command"
      description: |
        Splits a given set of data and repeats the subsequent commands for each entry in a given list until location of 'foreach.end' command. The current iteration item can be accessed using the path 'vars.[as]' or 'vars.loop.[as].item'. The current iteration index can be accessed using the path 'vars.loop.[as].index'. In order to find out whether current iteration index is odd or even, use 'vars.loop.[as].even'. Whereas [as] stands for the name given by the [as] parameter. Note: Even if not an error, you should prefer to set the 'as' parameter for every 'foreach' command. Not using it is discouraged and support for not using it will be removed in future versions. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=foreach' target='_blank'>Search Academy for more details about: <b>foreach</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - foreach:
              as: string
              end: string
              in: string
              item: string
              loopName: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/foreach?as=string&end=string&in=string&item=string&loopName=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: as
            in: "query"
            required: false
            description: "For each iteration/split, puts the current iteration item into the vars scope under this name. If this parameter is null or empty, the item wont be additionally exposed to vars scope. Additionally puts the current loop context under the variable name 'vars.loop.NAME.item' whereas 'NAME' is the value of this 'as' parameter. For example, if you set 'as' to 'myitem', then you can access the item using the path 'vars.loop.myitem.item' or 'vars.myitem'.The loop context contains these objects for each iteration: 'item' = The current iteration item. In case the iteration input is a map or a JSON, you can access the key of the item using 'item.key' and the value using 'item.value'.'index' = The current 0-based iteration index. 'even' = A boolean value whether current iteration index is even or not. This is useful for example for layouting."
            schema:
              type: string
          - name: end
            in: "query"
            required: false
            description: "&#42;Deprecated&#42;. Use the foreach.end command instead. Signals the end of a for each loop."
            schema:
              type: string
          - name: in
            in: "query"
            required: false
            description: "(default) This parameter points to a list of items to be iterated over. Each iteration item is placed under 'vars.loop.[as].item' and 'vars.[as]' whereas '[as]' will be replaced by the name given by the 'as' parameter."
            schema:
              type: string
          - name: item
            in: "query"
            required: false
            description: "&#42;Deprecated&#42;. Contains an optional expression which will be evaluated for each iteration to extract or prepare the iteration item. The result of this expression will be placed as iteration item."
            schema:
              type: string
          - name: loopName
            in: "query"
            required: false
            description: "&#42;Deprecated.&#42; Use parameter 'as' instead. This parameter is only here for downwards compatibility and will be removed in one of the next releases. If 'as' parameter is null or empty, this parameter gets checked. And if not null or empty,  it will change the default loop context name in the vars scope from 'vars.loop' to 'vars.[loopName]', so you can access the current iteration item using 'vars.[loopName].item'."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - foreach
  "/api/v3/command/foreach.end":
    post:
      summary: "Defines the end of a foreach loop."
      description: |
        Defines the end of a foreach loop. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=foreach.end' target='_blank'>Search Academy for more details about: <b>foreach.end</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - foreach.end:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/foreach.end' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - foreach
  "/api/v3/command/function.backend.cache.clear":
    post:
      summary: "Clears the cache of the FaaS backend."
      description: |
        Clears the cache of the FaaS backend. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=function.backend.cache.clear' target='_blank'>Search Academy for more details about: <b>function.backend.cache.clear</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - function.backend.cache.clear:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/function.backend.cache.clear' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - function
  "/api/v3/command/function.backend.status":
    post:
      summary: "Returns the status of the FaaS backend."
      description: |
        Returns the status of the FaaS backend. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=function.backend.status' target='_blank'>Search Academy for more details about: <b>function.backend.status</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - function.backend.status:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/function.backend.status' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - function
  "/api/v3/command/function.delete":
    post:
      summary: "Undeploys a function from the FaaS backend."
      description: |
        Undeploys a function from the FaaS backend. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=function.delete' target='_blank'>Search Academy for more details about: <b>function.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - function.delete:
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/function.delete?name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: name
            in: "query"
            required: false
            description: "The name of the function to undeploy."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - function
  "/api/v3/command/function.get":
    post:
      summary: "Returns all deployed functions or a specific one."
      description: |
        Returns all deployed functions or a specific one. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=function.get' target='_blank'>Search Academy for more details about: <b>function.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - function.get:
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/function.get?name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: name
            in: "query"
            required: false
            description: "The name of the function to return. If null or empty, all deployed functions will be returned."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - function
  "/api/v3/command/function.put":
    post:
      summary: "Deploys a new function to the FaaS backend. Expects the function code in the body or input of the command."
      description: |
        Deploys a new function to the FaaS backend. Expects the function code in the body or input of the command. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=function.put' target='_blank'>Search Academy for more details about: <b>function.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - function.put:
              code: string
              language: string
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/function.put?code=string&language=string&name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: code
            in: "query"
            required: false
            description: "The code of the function to deploy. Can also be a custom uri starting with $uri:... . In this case the function code will be loaded from this uri and then deployed."
            schema:
              type: string
          - name: language
            in: "query"
            required: false
            description: "The language of the function (currently only python is supported)."
            schema:
              type: string
          - name: name
            in: "query"
            required: false
            description: "The name of the function to deploy."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - function
  "/api/v3/command/function.run":
    post:
      summary: "Executes a function given by name on the FaaS backend."
      description: |
        Executes a function given by name on the FaaS backend. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=function.run' target='_blank'>Search Academy for more details about: <b>function.run</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - function.run:
              args: string
              evalArgs: string
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/function.run?args=string&evalArgs=string&name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: args
            in: "query"
            required: false
            description: "The arguments to be passed to the function. Must be serializable to JSON. Can also be a custom uri starting with $uri: pointing to a document which is a JSON document or can be converted to a JSON."
            schema:
              type: string
          - name: evalArgs
            in: "query"
            required: false
            description: "Search the args param value recursively for PEL expressions and parse them?"
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "(default) The name of the function to run."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - function
  "/api/v3/command/gateway.endpoint.delete":
    post:
      summary: "Deletes an endpoint configuration."
      description: |
        Deletes an endpoint configuration. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=gateway.endpoint.delete' target='_blank'>Search Academy for more details about: <b>gateway.endpoint.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - gateway.endpoint.delete:
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/gateway.endpoint.delete?uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: uuid
            in: "query"
            required: true
            description: "The uuid of the endpoint to delete."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - gateway
  "/api/v3/command/gateway.endpoint.get":
    post:
      summary: "Returns an endpoint configuration."
      description: |
        Returns an endpoint configuration. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=gateway.endpoint.get' target='_blank'>Search Academy for more details about: <b>gateway.endpoint.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - gateway.endpoint.get:
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/gateway.endpoint.get?uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: uuid
            in: "query"
            required: true
            description: "The uuid of the endpoint to return."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - gateway
  "/api/v3/command/gateway.endpoint.list":
    post:
      summary: "Lists all existing endpoint configurations."
      description: |
        Lists all existing endpoint configurations. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=gateway.endpoint.list' target='_blank'>Search Academy for more details about: <b>gateway.endpoint.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - gateway.endpoint.list:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/gateway.endpoint.list' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - gateway
  "/api/v3/command/gateway.endpoint.put":
    post:
      summary: "Adds a new endpoint configuration. Expects the config as JSON in the input. In case no uuid is given, a new entry is created."
      description: |
        Adds a new endpoint configuration. Expects the config as JSON in the input. In case no uuid is given, a new entry is created. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=gateway.endpoint.put' target='_blank'>Search Academy for more details about: <b>gateway.endpoint.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - gateway.endpoint.put:
              authenticate: string
              enabled: string
              groups: string
              methods: string
              mocked: string
              pattern: string
              polling: string
              roles: string
              target: string
              uuid: string
              weight: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/gateway.endpoint.put?authenticate=string&enabled=string&groups=string&methods=string&mocked=string&pattern=string&polling=string&roles=string&target=string&uuid=string&weight=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: authenticate
            in: "query"
            required: false
            description: "Is authentication needed for this endpoint? In this case, the Authorization header must exist and must contain a valid authentication token or credentials. This will overwrite the value of the input JSON if there is any."
            schema:
              type: string
          - name: enabled
            in: "query"
            required: false
            description: "Enables or disables this endpoint temporarily. This will overwrite the value of the input JSON if there is any."
            schema:
              type: string
          - name: groups
            in: "query"
            required: false
            description: "The authenticated user must be member to at least one of the groups from this list. If null or empty, no authorization check is done after successful authentication. Authentication is mandatory to be enabled for this. This will overwrite the value of the input JSON if there is any."
            schema:
              type: string
          - name: methods
            in: "query"
            required: false
            description: "A list of HTTP methods to allow. If this list contains &#42;, all methods are allowed. This will overwrite the value of the input JSON if there is any."
            schema:
              type: string
          - name: mocked
            in: "query"
            required: false
            description: "If given, mocks this endpoint for testing (= doesn't forward to real endpoint). This will overwrite the value of the input JSON if there is any."
            schema:
              type: string
          - name: pattern
            in: "query"
            required: true
            description: "The wildcard pattern, the incoming request path must match in order to get called. This will overwrite the value of the input JSON if there is any."
            schema:
              type: string
          - name: polling
            in: "query"
            required: false
            description: "In case this endpoints is an async target, should a polling redirect be applied to the request so it polls for the result until has been processed or timed out?"
            schema:
              type: string
          - name: roles
            in: "query"
            required: false
            description: "The authenticated user must be assigned to at least one of the roles from this list. If null or empty, no authorization check is done after successful authentication. Authentication is mandatory to be enabled for this. This will overwrite the value of the input JSON if there is any."
            schema:
              type: string
          - name: target
            in: "query"
            required: true
            description: "The target uri to be executed in case the request matches. This will overwrite the value of the input JSON if there is any."
            schema:
              type: string
          - name: uuid
            in: "query"
            required: false
            description: "The uuid of the endpoint to update. This will overwrite the value of the input JSON if there is any or create a new entry if missing."
            schema:
              type: string
          - name: weight
            in: "query"
            required: false
            description: "The weighting of this entry. In case a path matches two entries, the one with higher wight value will win."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - gateway
  "/api/v3/command/gateway.group.list":
    post:
      summary: "Lists all groups allowed to be assigned to endpoints."
      description: |
        Lists all groups allowed to be assigned to endpoints. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=gateway.group.list' target='_blank'>Search Academy for more details about: <b>gateway.group.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - gateway.group.list:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/gateway.group.list' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - gateway
  "/api/v3/command/gateway.role.list":
    post:
      summary: "Lists all roles allowed to be assigned to endpoints."
      description: |
        Lists all roles allowed to be assigned to endpoints. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=gateway.role.list' target='_blank'>Search Academy for more details about: <b>gateway.role.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - gateway.role.list:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/gateway.role.list' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - gateway
  "/api/v3/command/header.set":
    post:
      summary: "DEPRECATED"
      description: |
        DEPRECATED. Use the set command instead. Sets any parameter value as header. For example header.set?key1=value1&key2=value2 would become the headers: key1: value1 and key2: value2 <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=header.set' target='_blank'>Search Academy for more details about: <b>header.set</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - header.set:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/header.set' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - header
  "/api/v3/command/htmlunit.website.form.find":
    post:
      summary: "Searches for a form on the page and sets is as vars.form model in PEL"
      description: |
        Searches for a form on the page and sets is as vars.form model in PEL. If param 'select' is given, uses this PEL to find the form object. Otherwise tries to detect the form automatically by searching the page and using the first form found. Note: The pipe is BETA and not intended to be used in production! <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=htmlunit.website.form.find' target='_blank'>Search Academy for more details about: <b>htmlunit.website.form.find</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - htmlunit.website.form.find:
              select: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/htmlunit.website.form.find?select=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: select
            in: "query"
            required: false
            description: "A PE to select elements on a website for subsequent RPA commands. If null, form is tried to select automatically."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - htmlunit
  "/api/v3/command/htmlunit.website.form.input":
    post:
      summary: "Searches for an input element with given name and sets the given value on it. Note: The pipe is BETA and not intended to be used in production!"
      description: |
        Searches for an input element with given name and sets the given value on it. Note: The pipe is BETA and not intended to be used in production! <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=htmlunit.website.form.input' target='_blank'>Search Academy for more details about: <b>htmlunit.website.form.input</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - htmlunit.website.form.input:
              select: string
              value: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/htmlunit.website.form.input?select=string&value=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: select
            in: "query"
            required: false
            description: "A PE to select elements on a website for subsequent RPA commands. If null, form is tried to select automatically."
            schema:
              type: string
          - name: value
            in: "query"
            required: false
            description: "The value to be set on the selected input field."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - htmlunit
  "/api/v3/command/htmlunit.website.form.submit":
    post:
      summary: "Searches for a submit button and clicks it. Note: The pipe is BETA and not intended to be used in production!"
      description: |
        Searches for a submit button and clicks it. Note: The pipe is BETA and not intended to be used in production! <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=htmlunit.website.form.submit' target='_blank'>Search Academy for more details about: <b>htmlunit.website.form.submit</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - htmlunit.website.form.submit:
              select: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/htmlunit.website.form.submit?select=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: select
            in: "query"
            required: false
            description: "A PE to select elements on a website for subsequent RPA commands. If null, form is tried to select automatically."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - htmlunit
  "/api/v3/command/htmlunit.website.link.click":
    post:
      summary: "Searches for a link on current page and clicks it. Note: The pipe is BETA and not intended to be used in production!"
      description: |
        Searches for a link on current page and clicks it. Note: The pipe is BETA and not intended to be used in production! <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=htmlunit.website.link.click' target='_blank'>Search Academy for more details about: <b>htmlunit.website.link.click</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - htmlunit.website.link.click:
              select: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/htmlunit.website.link.click?select=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: select
            in: "query"
            required: false
            description: "A PE to select elements on a website for subsequent RPA commands. If null, form is tried to select automatically."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - htmlunit
  "/api/v3/command/htmlunit.website.open":
    post:
      summary: "Opens a website and sets it as 'vars.page' in PEL"
      description: |
        Opens a website and sets it as 'vars.page' in PEL. Additionally sets the current browser instance as 'vars.browser'. Note: The pipe is BETA and not intended to be used in production! <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=htmlunit.website.open' target='_blank'>Search Academy for more details about: <b>htmlunit.website.open</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - htmlunit.website.open:
              url: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/htmlunit.website.open?url=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: url
            in: "query"
            required: true
            description: "The url of the web page to open."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - htmlunit
  "/api/v3/command/htmlunit.website.scrap":
    post:
      summary: "Scraps data from the current website and returns the result in the body.Note: The pipe is BETA and not intended to be used in production!"
      description: |
        Scraps data from the current website and returns the result in the body.Note: The pipe is BETA and not intended to be used in production! <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=htmlunit.website.scrap' target='_blank'>Search Academy for more details about: <b>htmlunit.website.scrap</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - htmlunit.website.scrap:
              select: string
              xpath: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/htmlunit.website.scrap?select=string&xpath=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: select
            in: "query"
            required: false
            description: "A PE to select elements on a website for subsequent RPA commands. If null, form is tried to select automatically."
            schema:
              type: string
          - name: xpath
            in: "query"
            required: true
            description: "Executes the given xpath expression on the current page and puts the result in the body. In case the xpath returns more than one results, adds an array to the body. Otherwise the body only contains the single result value."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - htmlunit
  "/api/v3/command/http.delete":
    post:
      summary: "Executes a DELETE HTTP call to the given url.Returns the result from the server in the message body."
      description: |
        Executes a DELETE HTTP call to the given url.Returns the result from the server in the message body. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=http.delete' target='_blank'>Search Academy for more details about: <b>http.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - http.delete:
              body: string
              credentials: string
              forceContentType: string
              headers: string
              ignoreErrorStatus: string
              includeRequest: string
              includeResponse: string
              passthru: string
              secret: string
              service: string
              url: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/http.delete?body=string&credentials=string&forceContentType=string&headers=string&ignoreErrorStatus=string&includeRequest=string&includeResponse=string&passthru=string&secret=string&service=string&url=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: body
            in: "query"
            required: false
            description: "The value to be set in the body of the request (if it supports a body). If this param is missing, the value from the input parameter is used. If this value is null, no body is used."
            schema:
              type: string
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: forceContentType
            in: "query"
            required: false
            description: "If this parameter is set to null or empty, the responsethe body from the response is returned in the same format as it is defined by the HTTP response Content-Type header. This can be overwritten by setting an explicit Content-Type here. When set, it will be tried to convert the response body to this content-type first and return it as this type then."
            schema:
              type: string
          - name: headers
            in: "query"
            required: false
            description: "A list of headers to append to the request. Can be a PEL pointing to a map or a list of name-value pair strings name:value or a comma separated string like: name1:value1, name2:value2."
            schema:
              type: string
          - name: ignoreErrorStatus
            in: "query"
            required: false
            description: "If true, any error status code from response will be ignored and no exception will be thrown. Otherwise, an exception will be thrown in case the request returns with status code >= 400."
            schema:
              type: string
          - name: includeRequest
            in: "query"
            required: false
            description: "If true, includes the HTTP request as JSON in the output."
            schema:
              type: string
          - name: includeResponse
            in: "query"
            required: false
            description: "If true, writes the HTTP response including headers and status code as JSON in the output."
            schema:
              type: string
          - name: passthru
            in: "query"
            required: false
            description: "If true, the response will be passed 1:1 to the caller of the pipeline without any changes. Status errors wont be handled and also no auto-conversion of body data will be applied. Note: It is not intended to alter the response in any kind when in passThru-mode."
            schema:
              type: string
          - name: secret
            in: "query"
            required: false
            description: "Refers to the name of a stored secret entry to be used by this command. If not null, all other credentials parameters are ignored if there exists any."
            schema:
              type: string
          - name: service
            in: "query"
            required: false
            description: "The name of the internal service to be called. If this parameter is given, it will prefix the url parameter, if exists. This parameter can also contain the internal port information separated by a colon like serviceName:port. If no port is given, it will be looked-up automatically."
            schema:
              type: string
          - name: url
            in: "query"
            required: false
            description: "(default) The url for the HTTP call."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - http
  "/api/v3/command/http.get":
    post:
      summary: "Executes a GET HTTP call to the given url.Returns the result from the server in the message body or wrapped in the response JSON format depending on i..."
      description: |
        Executes a GET HTTP call to the given url.Returns the result from the server in the message body or wrapped in the response JSON format depending on its configuration. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=http.get' target='_blank'>Search Academy for more details about: <b>http.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - http.get:
              body: string
              credentials: string
              forceContentType: string
              headers: string
              ignoreErrorStatus: string
              includeRequest: string
              includeResponse: string
              passthru: string
              secret: string
              service: string
              url: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/http.get?body=string&credentials=string&forceContentType=string&headers=string&ignoreErrorStatus=string&includeRequest=string&includeResponse=string&passthru=string&secret=string&service=string&url=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: body
            in: "query"
            required: false
            description: "The value to be set in the body of the request (if it supports a body). If this param is missing, the value from the input parameter is used. If this value is null, no body is used."
            schema:
              type: string
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: forceContentType
            in: "query"
            required: false
            description: "If this parameter is set to null or empty, the responsethe body from the response is returned in the same format as it is defined by the HTTP response Content-Type header. This can be overwritten by setting an explicit Content-Type here. When set, it will be tried to convert the response body to this content-type first and return it as this type then."
            schema:
              type: string
          - name: headers
            in: "query"
            required: false
            description: "A list of headers to append to the request. Can be a PEL pointing to a map or a list of name-value pair strings name:value or a comma separated string like: name1:value1, name2:value2."
            schema:
              type: string
          - name: ignoreErrorStatus
            in: "query"
            required: false
            description: "If true, any error status code from response will be ignored and no exception will be thrown. Otherwise, an exception will be thrown in case the request returns with status code >= 400."
            schema:
              type: string
          - name: includeRequest
            in: "query"
            required: false
            description: "If true, includes the HTTP request as JSON in the output."
            schema:
              type: string
          - name: includeResponse
            in: "query"
            required: false
            description: "If true, writes the HTTP response including headers and status code as JSON in the output."
            schema:
              type: string
          - name: passthru
            in: "query"
            required: false
            description: "If true, the response will be passed 1:1 to the caller of the pipeline without any changes. Status errors wont be handled and also no auto-conversion of body data will be applied. Note: It is not intended to alter the response in any kind when in passThru-mode."
            schema:
              type: string
          - name: secret
            in: "query"
            required: false
            description: "Refers to the name of a stored secret entry to be used by this command. If not null, all other credentials parameters are ignored if there exists any."
            schema:
              type: string
          - name: service
            in: "query"
            required: false
            description: "The name of the internal service to be called. If this parameter is given, it will prefix the url parameter, if exists. This parameter can also contain the internal port information separated by a colon like serviceName:port. If no port is given, it will be looked-up automatically."
            schema:
              type: string
          - name: url
            in: "query"
            required: false
            description: "(default) The url for the HTTP call."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - http
  "/api/v3/command/http.patch":
    post:
      summary: "Executes a PATCH HTTP call to the given url.Returns the result from the server in the message body."
      description: |
        Executes a PATCH HTTP call to the given url.Returns the result from the server in the message body. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=http.patch' target='_blank'>Search Academy for more details about: <b>http.patch</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - http.patch:
              body: string
              credentials: string
              forceContentType: string
              headers: string
              ignoreErrorStatus: string
              includeRequest: string
              includeResponse: string
              passthru: string
              secret: string
              service: string
              url: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/http.patch?body=string&credentials=string&forceContentType=string&headers=string&ignoreErrorStatus=string&includeRequest=string&includeResponse=string&passthru=string&secret=string&service=string&url=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: body
            in: "query"
            required: false
            description: "The value to be set in the body of the request (if it supports a body). If this param is missing, the value from the input parameter is used. If this value is null, no body is used."
            schema:
              type: string
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: forceContentType
            in: "query"
            required: false
            description: "If this parameter is set to null or empty, the responsethe body from the response is returned in the same format as it is defined by the HTTP response Content-Type header. This can be overwritten by setting an explicit Content-Type here. When set, it will be tried to convert the response body to this content-type first and return it as this type then."
            schema:
              type: string
          - name: headers
            in: "query"
            required: false
            description: "A list of headers to append to the request. Can be a PEL pointing to a map or a list of name-value pair strings name:value or a comma separated string like: name1:value1, name2:value2."
            schema:
              type: string
          - name: ignoreErrorStatus
            in: "query"
            required: false
            description: "If true, any error status code from response will be ignored and no exception will be thrown. Otherwise, an exception will be thrown in case the request returns with status code >= 400."
            schema:
              type: string
          - name: includeRequest
            in: "query"
            required: false
            description: "If true, includes the HTTP request as JSON in the output."
            schema:
              type: string
          - name: includeResponse
            in: "query"
            required: false
            description: "If true, writes the HTTP response including headers and status code as JSON in the output."
            schema:
              type: string
          - name: passthru
            in: "query"
            required: false
            description: "If true, the response will be passed 1:1 to the caller of the pipeline without any changes. Status errors wont be handled and also no auto-conversion of body data will be applied. Note: It is not intended to alter the response in any kind when in passThru-mode."
            schema:
              type: string
          - name: secret
            in: "query"
            required: false
            description: "Refers to the name of a stored secret entry to be used by this command. If not null, all other credentials parameters are ignored if there exists any."
            schema:
              type: string
          - name: service
            in: "query"
            required: false
            description: "The name of the internal service to be called. If this parameter is given, it will prefix the url parameter, if exists. This parameter can also contain the internal port information separated by a colon like serviceName:port. If no port is given, it will be looked-up automatically."
            schema:
              type: string
          - name: url
            in: "query"
            required: false
            description: "(default) The url for the HTTP call."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - http
  "/api/v3/command/http.post":
    post:
      summary: "Executes a POST HTTP call to the given url.Returns the result from the server in the message body."
      description: |
        Executes a POST HTTP call to the given url.Returns the result from the server in the message body. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=http.post' target='_blank'>Search Academy for more details about: <b>http.post</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - http.post:
              body: string
              credentials: string
              forceContentType: string
              headers: string
              ignoreErrorStatus: string
              includeRequest: string
              includeResponse: string
              passthru: string
              secret: string
              service: string
              url: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/http.post?body=string&credentials=string&forceContentType=string&headers=string&ignoreErrorStatus=string&includeRequest=string&includeResponse=string&passthru=string&secret=string&service=string&url=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: body
            in: "query"
            required: false
            description: "The value to be set in the body of the request (if it supports a body). If this param is missing, the value from the input parameter is used. If this value is null, no body is used."
            schema:
              type: string
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: forceContentType
            in: "query"
            required: false
            description: "If this parameter is set to null or empty, the responsethe body from the response is returned in the same format as it is defined by the HTTP response Content-Type header. This can be overwritten by setting an explicit Content-Type here. When set, it will be tried to convert the response body to this content-type first and return it as this type then."
            schema:
              type: string
          - name: headers
            in: "query"
            required: false
            description: "A list of headers to append to the request. Can be a PEL pointing to a map or a list of name-value pair strings name:value or a comma separated string like: name1:value1, name2:value2."
            schema:
              type: string
          - name: ignoreErrorStatus
            in: "query"
            required: false
            description: "If true, any error status code from response will be ignored and no exception will be thrown. Otherwise, an exception will be thrown in case the request returns with status code >= 400."
            schema:
              type: string
          - name: includeRequest
            in: "query"
            required: false
            description: "If true, includes the HTTP request as JSON in the output."
            schema:
              type: string
          - name: includeResponse
            in: "query"
            required: false
            description: "If true, writes the HTTP response including headers and status code as JSON in the output."
            schema:
              type: string
          - name: passthru
            in: "query"
            required: false
            description: "If true, the response will be passed 1:1 to the caller of the pipeline without any changes. Status errors wont be handled and also no auto-conversion of body data will be applied. Note: It is not intended to alter the response in any kind when in passThru-mode."
            schema:
              type: string
          - name: secret
            in: "query"
            required: false
            description: "Refers to the name of a stored secret entry to be used by this command. If not null, all other credentials parameters are ignored if there exists any."
            schema:
              type: string
          - name: service
            in: "query"
            required: false
            description: "The name of the internal service to be called. If this parameter is given, it will prefix the url parameter, if exists. This parameter can also contain the internal port information separated by a colon like serviceName:port. If no port is given, it will be looked-up automatically."
            schema:
              type: string
          - name: url
            in: "query"
            required: false
            description: "(default) The url for the HTTP call."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - http
  "/api/v3/command/http.put":
    post:
      summary: "Executes a PUT HTTP call to the given url.Returns the result from the server in the message body."
      description: |
        Executes a PUT HTTP call to the given url.Returns the result from the server in the message body. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=http.put' target='_blank'>Search Academy for more details about: <b>http.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - http.put:
              body: string
              credentials: string
              forceContentType: string
              headers: string
              ignoreErrorStatus: string
              includeRequest: string
              includeResponse: string
              passthru: string
              secret: string
              service: string
              url: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/http.put?body=string&credentials=string&forceContentType=string&headers=string&ignoreErrorStatus=string&includeRequest=string&includeResponse=string&passthru=string&secret=string&service=string&url=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: body
            in: "query"
            required: false
            description: "The value to be set in the body of the request (if it supports a body). If this param is missing, the value from the input parameter is used. If this value is null, no body is used."
            schema:
              type: string
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: forceContentType
            in: "query"
            required: false
            description: "If this parameter is set to null or empty, the responsethe body from the response is returned in the same format as it is defined by the HTTP response Content-Type header. This can be overwritten by setting an explicit Content-Type here. When set, it will be tried to convert the response body to this content-type first and return it as this type then."
            schema:
              type: string
          - name: headers
            in: "query"
            required: false
            description: "A list of headers to append to the request. Can be a PEL pointing to a map or a list of name-value pair strings name:value or a comma separated string like: name1:value1, name2:value2."
            schema:
              type: string
          - name: ignoreErrorStatus
            in: "query"
            required: false
            description: "If true, any error status code from response will be ignored and no exception will be thrown. Otherwise, an exception will be thrown in case the request returns with status code >= 400."
            schema:
              type: string
          - name: includeRequest
            in: "query"
            required: false
            description: "If true, includes the HTTP request as JSON in the output."
            schema:
              type: string
          - name: includeResponse
            in: "query"
            required: false
            description: "If true, writes the HTTP response including headers and status code as JSON in the output."
            schema:
              type: string
          - name: passthru
            in: "query"
            required: false
            description: "If true, the response will be passed 1:1 to the caller of the pipeline without any changes. Status errors wont be handled and also no auto-conversion of body data will be applied. Note: It is not intended to alter the response in any kind when in passThru-mode."
            schema:
              type: string
          - name: secret
            in: "query"
            required: false
            description: "Refers to the name of a stored secret entry to be used by this command. If not null, all other credentials parameters are ignored if there exists any."
            schema:
              type: string
          - name: service
            in: "query"
            required: false
            description: "The name of the internal service to be called. If this parameter is given, it will prefix the url parameter, if exists. This parameter can also contain the internal port information separated by a colon like serviceName:port. If no port is given, it will be looked-up automatically."
            schema:
              type: string
          - name: url
            in: "query"
            required: false
            description: "(default) The url for the HTTP call."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - http
  "/api/v3/command/http.response.set":
    post:
      summary: "Prepares the HTTP response in case this pipeline is executed in an HTTP request context"
      description: |
        Prepares the HTTP response in case this pipeline is executed in an HTTP request context. In case the pipeline is not running inside an HTTP request context, nothing happens in executing this command. Note: In case the pipeline was initiated by an HTTP request, you can access the request headers using the headers scope: headers.request. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=http.response.set' target='_blank'>Search Academy for more details about: <b>http.response.set</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - http.response.set:
              headers: string
              statusCode: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/http.response.set?headers=string&statusCode=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: headers
            in: "query"
            required: false
            description: "The HTTP headers to be add as JSON or name-value pairs."
            schema:
              type: string
          - name: statusCode
            in: "query"
            required: false
            description: "The HTTP status code to be set on the HTTP response."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - http
  "/api/v3/command/i18n.messages":
    post:
      summary: "Returns the i18n messages of given app, context and locale."
      description: |
        Returns the i18n messages of given app, context and locale. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=i18n.messages' target='_blank'>Search Academy for more details about: <b>i18n.messages</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - i18n.messages:
              app: string
              context: string
              locale: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/i18n.messages?app=string&context=string&locale=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: app
            in: "query"
            required: false
            description: "The app which contains the i18n messages."
            schema:
              type: string
          - name: context
            in: "query"
            required: false
            description: "The context of the i18n messages."
            schema:
              type: string
          - name: locale
            in: "query"
            required: false
            description: "The locale of the i18n message. For example: en, de, fr and so on."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - i18n
  "/api/v3/command/iam.apitoken":
    post:
      summary: "Obtains the apitoken (= offline token) in exchange for user credentials provided and writes it into the output."
      description: |
        Obtains the apitoken (= offline token) in exchange for user credentials provided and writes it into the output. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.apitoken' target='_blank'>Search Academy for more details about: <b>iam.apitoken</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.apitoken:
              password: string
              username: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.apitoken?password=string&username=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: password
            in: "query"
            required: true
            description: "The user password."
            schema:
              type: string
          - name: username
            in: "query"
            required: true
            description: "The user name."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.authinfo":
    post:
      summary: "Adds header 'authUserId' - name of an user authenticated as a sender of the pipe message."
      description: |
        Adds header 'authUserId' - name of an user authenticated as a sender of the pipe message. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.authinfo' target='_blank'>Search Academy for more details about: <b>iam.authinfo</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.authinfo:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.authinfo' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.authorize":
    post:
      summary: "Authorizes pipeline execution and overwrites any existing authentication by this new, successful authentication"
      description: |
        Authorizes pipeline execution and overwrites any existing authentication by this new, successful authentication. Additionally puts the successful authentication token on an internal stack. See iam.logout to pop from stack.Subsequent commands will be executed only if authorization was successful. Tries each existing parameter for authentication in this order. If multiple params are given, first existing one is used from this list: accessToken, refreshToken, basic, username+password. Throws exception and exits pipeline execution on first not matching login try. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.authorize' target='_blank'>Search Academy for more details about: <b>iam.authorize</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.authorize:
              accessToken: string
              basic: string
              password: string
              refreshToken: string
              username: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.authorize?accessToken=string&basic=string&password=string&refreshToken=string&username=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: accessToken
            in: "query"
            required: false
            description: "The accessToken (bearer token) to be used for authentication."
            schema:
              type: string
          - name: basic
            in: "query"
            required: false
            description: "The basic authentication string to be used for authentication."
            schema:
              type: string
          - name: password
            in: "query"
            required: false
            description: "The password to be used for authentication."
            schema:
              type: string
          - name: refreshToken
            in: "query"
            required: false
            description: "The refreshToken to be used for authentication."
            schema:
              type: string
          - name: username
            in: "query"
            required: false
            description: "The username to be used for authentication."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.bruteforce.release":
    post:
      summary: "Releases any bruteforce lock for the given user. If user is not locked, nothing happens."
      description: |
        Releases any bruteforce lock for the given user. If user is not locked, nothing happens. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.bruteforce.release' target='_blank'>Search Academy for more details about: <b>iam.bruteforce.release</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.bruteforce.release:
              username: string
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.bruteforce.release?username=string&uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: username
            in: "query"
            required: false
            description: "The name of the user to unlock. If not set, param uuid must be set."
            schema:
              type: string
          - name: uuid
            in: "query"
            required: false
            description: "The uuid of the user to unlock. If set, the param username is ignored."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.bruteforce.status":
    post:
      summary: "Returns the bruteforce status for a single user"
      description: |
        Returns the bruteforce status for a single user <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.bruteforce.status' target='_blank'>Search Academy for more details about: <b>iam.bruteforce.status</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.bruteforce.status:
              username: string
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.bruteforce.status?username=string&uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: username
            in: "query"
            required: false
            description: "The name of the user to return the status for. If not set, param uuid must be set."
            schema:
              type: string
          - name: uuid
            in: "query"
            required: false
            description: "The uuid of the user to return the status for. If set, the param username is ignored."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.cache.clear":
    post:
      summary: "Clears the security objects (and reloads roles where required)"
      description: |
        Clears the security objects (and reloads roles where required). Note: Since this can be a heavy task and slow down the system, use it only in case really required! <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.cache.clear' target='_blank'>Search Academy for more details about: <b>iam.cache.clear</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.cache.clear:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.cache.clear' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.group.add.roles":
    post:
      summary: "Adds roles to a given group. Roles must exist beforehand."
      description: |
        Adds roles to a given group. Roles must exist beforehand. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.group.add.roles' target='_blank'>Search Academy for more details about: <b>iam.group.add.roles</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.group.add.roles:
              groupName: string
              groupUuid: string
              roleNames: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.group.add.roles?groupName=string&groupUuid=string&roleNames=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: groupName
            in: "query"
            required: true
            description: "The unique group name."
            schema:
              type: string
          - name: groupUuid
            in: "query"
            required: true
            description: "The unique group uuid."
            schema:
              type: string
          - name: roleNames
            in: "query"
            required: true
            description: "The role names to join. Can be a comma separated list or a PEL pointing to a list."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.group.create":
    post:
      summary: "Creates a new group and puts its uuid in the body under key groupUuid. Throws exception if group already exists."
      description: |
        Creates a new group and puts its uuid in the body under key groupUuid. Throws exception if group already exists. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.group.create' target='_blank'>Search Academy for more details about: <b>iam.group.create</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.group.create:
              attributes: string
              name: string
              roleNames: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.group.create?attributes=string&name=string&roleNames=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: attributes
            in: "query"
            required: false
            description: "A map which holds optional attributes to be added to this group."
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "The unique group name."
            schema:
              type: string
          - name: roleNames
            in: "query"
            required: false
            description: "A list of roles to be assigned to this group on creation."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.group.delete":
    post:
      summary: "Deletes the group with given uuid."
      description: |
        Deletes the group with given uuid. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.group.delete' target='_blank'>Search Academy for more details about: <b>iam.group.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.group.delete:
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.group.delete?uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: uuid
            in: "query"
            required: true
            description: "The uuid of the group to delete."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.group.list":
    post:
      summary: "Lists all groups"
      description: |
        Lists all groups. By default, the response is a JSON array with these entities: https://www.keycloak.org/docs-api/5.0/rest-api/index.html#_grouprepresentation <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.group.list' target='_blank'>Search Academy for more details about: <b>iam.group.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.group.list:
              filter: string
              max: number
              offset: number
              sortByName: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.group.list?filter=string&max=number&offset=number&sortByName=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: filter
            in: "query"
            required: false
            description: "The filter query to additionally filter the result. Not applied if null"
            schema:
              type: string
          - name: max
            in: "query"
            required: false
            description: "The max number of entries to return. If set to a higher value than 100, will be reset to 100."
            schema:
              type: number
          - name: offset
            in: "query"
            required: false
            description: "The offset to start return entries."
            schema:
              type: number
          - name: sortByName
            in: "query"
            required: false
            description: "If set, groups are returned as collection with the group name as key."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.group.list.names":
    post:
      summary: "Lists all group names"
      description: |
        Lists all group names. The response is a JSON array with these entities: https://www.keycloak.org/docs-api/5.0/rest-api/index.html#_grouprepresentation <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.group.list.names' target='_blank'>Search Academy for more details about: <b>iam.group.list.names</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.group.list.names:
              filter: string
              max: number
              offset: number
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.group.list.names?filter=string&max=number&offset=number' \
        -u 'username:password' 
        ```
      parameters:
          - name: filter
            in: "query"
            required: false
            description: "The filter query to additionally filter the result. Not applied if null"
            schema:
              type: string
          - name: max
            in: "query"
            required: false
            description: "The max number of entries to return. If set to a higher value than 100, will be reset to 100."
            schema:
              type: number
          - name: offset
            in: "query"
            required: false
            description: "The offset to start return entries."
            schema:
              type: number
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.group.members":
    post:
      summary: "Lists all users which are member of any of the given groups"
      description: |
        Lists all users which are member of any of the given groups. The response is a JSON array with these entities: https://www.keycloak.org/docs-api/5.0/rest-api/index.html#_userrepresentation <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.group.members' target='_blank'>Search Academy for more details about: <b>iam.group.members</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.group.members:
              filter: string
              max: number
              name: string
              offset: number
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.group.members?filter=string&max=number&name=string&offset=number&uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: filter
            in: "query"
            required: false
            description: "The filter query to additionally filter the result. Not applied if null"
            schema:
              type: string
          - name: max
            in: "query"
            required: false
            description: "The max number of entries to return. If set to a higher value than 100, will be reset to 100."
            schema:
              type: number
          - name: name
            in: "query"
            required: false
            description: "The name of the group. If not set, param uuid must be set."
            schema:
              type: string
          - name: offset
            in: "query"
            required: false
            description: "The offset to start return entries."
            schema:
              type: number
          - name: uuid
            in: "query"
            required: false
            description: "The uuid of the group. If set, the param name is ignored."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.group.roles":
    post:
      summary: "Lists all effective role names, the given group is assigned to."
      description: |
        Lists all effective role names, the given group is assigned to. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.group.roles' target='_blank'>Search Academy for more details about: <b>iam.group.roles</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.group.roles:
              filter: string
              groupName: string
              max: number
              offset: number
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.group.roles?filter=string&groupName=string&max=number&offset=number&uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: filter
            in: "query"
            required: false
            description: "The filter query to additionally filter the result. Not applied if null"
            schema:
              type: string
          - name: groupName
            in: "query"
            required: false
            description: "The name of the group. If not set, param uuid must be set."
            schema:
              type: string
          - name: max
            in: "query"
            required: false
            description: "The max number of entries to return. If set to a higher value than 100, will be reset to 100."
            schema:
              type: number
          - name: offset
            in: "query"
            required: false
            description: "The offset to start return entries."
            schema:
              type: number
          - name: uuid
            in: "query"
            required: false
            description: "The uuid of the group. If set, the param username is ignored."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.realm.create":
    post:
      summary: "Creates a new realm"
      description: |
        Creates a new realm. Sets the uuid in the body under key realmUuid. Throws exception if realm already exists. Expects a JSON in the body of this structure: https://www.keycloak.org/docs-api/11.0/rest-api/index.html#_realmrepresentation <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.realm.create' target='_blank'>Search Academy for more details about: <b>iam.realm.create</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.realm.create:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.realm.create' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.role.add.composites":
    post:
      summary: "Adds existing composite roles to an existing role."
      description: |
        Adds existing composite roles to an existing role. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.role.add.composites' target='_blank'>Search Academy for more details about: <b>iam.role.add.composites</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.role.add.composites:
              composites: string
              roleName: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.role.add.composites?composites=string&roleName=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: composites
            in: "query"
            required: true
            description: "The composite role names to join. Can be a comma separated list or a PEL pointing to a list."
            schema:
              type: string
          - name: roleName
            in: "query"
            required: true
            description: "The unique role name to be loaded."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.role.create":
    post:
      summary: "Creates a new role and puts its role uuid in the body under key roleUuid. Throws exception if role already exists."
      description: |
        Creates a new role and puts its role uuid in the body under key roleUuid. Throws exception if role already exists. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.role.create' target='_blank'>Search Academy for more details about: <b>iam.role.create</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.role.create:
              attributes: string
              composites: string
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.role.create?attributes=string&composites=string&name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: attributes
            in: "query"
            required: false
            description: "A map which holds optional attributes to be added to this role."
            schema:
              type: string
          - name: composites
            in: "query"
            required: false
            description: "A PEL list of roles names to add to this role as children. Makes this role a composite."
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "The unique role name."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.role.members":
    post:
      summary: "Lists all users which are member of the given role"
      description: |
        Lists all users which are member of the given role. The response is a JSON array with these entities: https://www.keycloak.org/docs-api/5.0/rest-api/index.html#_userrepresentation <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.role.members' target='_blank'>Search Academy for more details about: <b>iam.role.members</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.role.members:
              filter: string
              max: number
              offset: number
              roleName: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.role.members?filter=string&max=number&offset=number&roleName=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: filter
            in: "query"
            required: false
            description: "The filter query to additionally filter the result. Not applied if null"
            schema:
              type: string
          - name: max
            in: "query"
            required: false
            description: "The max number of entries to return. If set to a higher value than 100, will be reset to 100."
            schema:
              type: number
          - name: offset
            in: "query"
            required: false
            description: "The offset to start return entries."
            schema:
              type: number
          - name: roleName
            in: "query"
            required: false
            description: "The name of the role."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.run.as":
    post:
      summary: "Executes the subsequent pipeline as different user if following two conditions are met"
      description: |
        Executes the subsequent pipeline as different user if following two conditions are met. 1. currently logged-in user has permission CAN_RUN_AS_SOURCE 2. requested user has permission CAN_RUN_AS_TARGET <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.run.as' target='_blank'>Search Academy for more details about: <b>iam.run.as</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.run.as:
              caching: string
              username: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.run.as?caching=string&username=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: caching
            in: "query"
            required: false
            description: "Should the IAM cache used (= much faster)?"
            schema:
              type: string
          - name: username
            in: "query"
            required: true
            description: "(default) The username, subsequent pipe commands must be executed as. This user must has RUN_AS_SOURCE role assigned."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.search":
    post:
      summary: "Searches for specific entity in the IAM service matching the given filter"
      description: |
        Searches for specific entity in the IAM service matching the given filter. Returns the JSON representation of the given type as JSON array. See here for the representation types: https://www.keycloak.org/docs-api/11.0/rest-api/ .For example the type 'USER' would return a list of 'UserRepresentation'. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.search' target='_blank'>Search Academy for more details about: <b>iam.search</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.search:
              filter: string
              max: number
              offset: number
              type: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.search?filter=string&max=number&offset=number&type=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: filter
            in: "query"
            required: false
            description: "The filter query to additionally filter the result. Not applied if null"
            schema:
              type: string
          - name: max
            in: "query"
            required: false
            description: "The max number of entries to return. If set to a higher value than 100, will be reset to 100."
            schema:
              type: number
          - name: offset
            in: "query"
            required: false
            description: "The offset to start return entries."
            schema:
              type: number
          - name: type
            in: "query"
            required: true
            description: "The entity type to search for. Supported values are: ROLE, USER, GROUP, REALM."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.token":
    post:
      summary: "Obtains the full offline token response JSON in exchange for user credentials provided and writes into the output."
      description: |
        Obtains the full offline token response JSON in exchange for user credentials provided and writes into the output. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.token' target='_blank'>Search Academy for more details about: <b>iam.token</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.token:
              password: string
              username: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.token?password=string&username=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: password
            in: "query"
            required: true
            description: "The user password."
            schema:
              type: string
          - name: username
            in: "query"
            required: true
            description: "The user name."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.token.logout":
    post:
      summary: "Logs out keycloak session associated with refreshToken and removes any refresh and access tokens from headers."
      description: |
        Logs out keycloak session associated with refreshToken and removes any refresh and access tokens from headers. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.token.logout' target='_blank'>Search Academy for more details about: <b>iam.token.logout</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.token.logout:
              refreshToken: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.token.logout?refreshToken=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: refreshToken
            in: "query"
            required: true
            description: "The refresh token."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.token.refresh":
    post:
      summary: "Enrich headers with accessToken obtained from authorization server using refreshToken and returns the tokenResponse in the body."
      description: |
        Enrich headers with accessToken obtained from authorization server using refreshToken and returns the tokenResponse in the body. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.token.refresh' target='_blank'>Search Academy for more details about: <b>iam.token.refresh</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.token.refresh:
              refreshToken: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.token.refresh?refreshToken=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: refreshToken
            in: "query"
            required: true
            description: "The refresh token."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.user.add.groups":
    post:
      summary: "Adds groups to a user by group id or name and returns the group ids added."
      description: |
        Adds groups to a user by group id or name and returns the group ids added. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.user.add.groups' target='_blank'>Search Academy for more details about: <b>iam.user.add.groups</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.user.add.groups:
              groupIds: string
              groupNames: string
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.user.add.groups?groupIds=string&groupNames=string&uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: groupIds
            in: "query"
            required: false
            description: "The group ids to join. If not given, groupNames is required."
            schema:
              type: string
          - name: groupNames
            in: "query"
            required: false
            description: "The group names to join. If not given, groupIds is required."
            schema:
              type: string
          - name: uuid
            in: "query"
            required: true
            description: "The unique username as uuid."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.user.add.roles":
    post:
      summary: "Adds roles to a given user. Roles must exist beforehand."
      description: |
        Adds roles to a given user. Roles must exist beforehand. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.user.add.roles' target='_blank'>Search Academy for more details about: <b>iam.user.add.roles</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.user.add.roles:
              roleNames: string
              userUuid: string
              username: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.user.add.roles?roleNames=string&userUuid=string&username=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: roleNames
            in: "query"
            required: true
            description: "The role names to join. Can be a comma separated list or a PEL pointing to a list."
            schema:
              type: string
          - name: userUuid
            in: "query"
            required: true
            description: "The unique username as uuid."
            schema:
              type: string
          - name: username
            in: "query"
            required: true
            description: "The unique username as uuid."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.user.create":
    post:
      summary: "Creates a new user and returns its uuid in the body. Throws exception if user already exists."
      description: |
        Creates a new user and returns its uuid in the body. Throws exception if user already exists. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.user.create' target='_blank'>Search Academy for more details about: <b>iam.user.create</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.user.create:
              attributes: string
              email: string
              firstName: string
              groupNames: string
              lastName: string
              name: string
              password: string
              roleNames: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.user.create?attributes=string&email=string&firstName=string&groupNames=string&lastName=string&name=string&password=string&roleNames=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: attributes
            in: "query"
            required: false
            description: "A map which holds optional attributes to be added to this user."
            schema:
              type: string
          - name: email
            in: "query"
            required: true
            description: "The unique email."
            schema:
              type: string
          - name: firstName
            in: "query"
            required: false
            description: "The optional first name."
            schema:
              type: string
          - name: groupNames
            in: "query"
            required: false
            description: "The optional groups the user joins."
            schema:
              type: string
          - name: lastName
            in: "query"
            required: false
            description: "The optional last name."
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "The unique username."
            schema:
              type: string
          - name: password
            in: "query"
            required: false
            description: "The password to be set for this user or null in order to let the user choose one on login."
            schema:
              type: string
          - name: roleNames
            in: "query"
            required: false
            description: "The optional roles (permissions) the user must join."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.user.delete":
    post:
      summary: "Deletes the user with given uuid."
      description: |
        Deletes the user with given uuid. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.user.delete' target='_blank'>Search Academy for more details about: <b>iam.user.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.user.delete:
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.user.delete?uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: uuid
            in: "query"
            required: true
            description: "The uuid of the user to delete."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.user.get":
    post:
      summary: "Looks up a user returns it in the body if exists"
      description: |
        Looks up a user returns it in the body if exists. The response is a JSON array of these entities: https://www.keycloak.org/docs-api/15.0/rest-api/#_userrepresentation <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.user.get' target='_blank'>Search Academy for more details about: <b>iam.user.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.user.get:
              username: string
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.user.get?username=string&uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: username
            in: "query"
            required: false
            description: "The name of the user. If not set, param uuid must be set."
            schema:
              type: string
          - name: uuid
            in: "query"
            required: false
            description: "The uuid of the user. If set, the param username is ignored."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.user.groups":
    post:
      summary: "Lists all groups, the given user is member of"
      description: |
        Lists all groups, the given user is member of. By default, the response is a JSON array with these entities: https://www.keycloak.org/docs-api/5.0/rest-api/index.html#_grouprepresentation <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.user.groups' target='_blank'>Search Academy for more details about: <b>iam.user.groups</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.user.groups:
              filter: string
              max: number
              offset: number
              username: string
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.user.groups?filter=string&max=number&offset=number&username=string&uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: filter
            in: "query"
            required: false
            description: "The filter query to additionally filter the result. Not applied if null"
            schema:
              type: string
          - name: max
            in: "query"
            required: false
            description: "The max number of entries to return. If set to a higher value than 100, will be reset to 100."
            schema:
              type: number
          - name: offset
            in: "query"
            required: false
            description: "The offset to start return entries."
            schema:
              type: number
          - name: username
            in: "query"
            required: false
            description: "The name of the user. If not set, param uuid must be set."
            schema:
              type: string
          - name: uuid
            in: "query"
            required: false
            description: "The uuid of the user. If set, the param username is ignored."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.user.list":
    post:
      summary: "Lists all users. The response is a JSON array of these entities: https://www.keycloak.org/docs-api/5.0/rest-api/index.html#_userrepresentation"
      description: |
        Lists all users. The response is a JSON array of these entities: https://www.keycloak.org/docs-api/5.0/rest-api/index.html#_userrepresentation <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.user.list' target='_blank'>Search Academy for more details about: <b>iam.user.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.user.list:
              filter: string
              includeGroups: boolean
              includeRoles: boolean
              max: number
              offset: number
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.user.list?filter=string&includeGroups=boolean&includeRoles=boolean&max=number&offset=number' \
        -u 'username:password' 
        ```
      parameters:
          - name: filter
            in: "query"
            required: false
            description: "The filter query to additionally filter the result. Not applied if null"
            schema:
              type: string
          - name: includeGroups
            in: "query"
            required: false
            description: "Include all groups, for each user he is member of? Note: If true, the command execution becomes significantly slower!"
            schema:
              type: boolean
          - name: includeRoles
            in: "query"
            required: false
            description: "Include all realm roles, for each user he is member of? Note: If true, the command execution becomes significantly slower!"
            schema:
              type: boolean
          - name: max
            in: "query"
            required: false
            description: "The max number of entries to return. If set to a higher value than 100, will be reset to 100."
            schema:
              type: number
          - name: offset
            in: "query"
            required: false
            description: "The offset to start return entries."
            schema:
              type: number
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/iam.user.roles":
    post:
      summary: "Lists all effective role names, the given user is member of."
      description: |
        Lists all effective role names, the given user is member of. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=iam.user.roles' target='_blank'>Search Academy for more details about: <b>iam.user.roles</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - iam.user.roles:
              filter: string
              max: number
              offset: number
              username: string
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/iam.user.roles?filter=string&max=number&offset=number&username=string&uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: filter
            in: "query"
            required: false
            description: "The filter query to additionally filter the result. Not applied if null"
            schema:
              type: string
          - name: max
            in: "query"
            required: false
            description: "The max number of entries to return. If set to a higher value than 100, will be reset to 100."
            schema:
              type: number
          - name: offset
            in: "query"
            required: false
            description: "The offset to start return entries."
            schema:
              type: number
          - name: username
            in: "query"
            required: false
            description: "The name of the user. If not set, param uuid must be set."
            schema:
              type: string
          - name: uuid
            in: "query"
            required: false
            description: "The uuid of the user. If set, the param username is ignored."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - iam
  "/api/v3/command/if":
    post:
      summary: "Executes the subsequent pipeline only if given condition evaluates to true. Otherwise, jumps to the end of this block given by the 'if.end' command."
      description: |
        Executes the subsequent pipeline only if given condition evaluates to true. Otherwise, jumps to the end of this block given by the 'if.end' command. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=if' target='_blank'>Search Academy for more details about: <b>if</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - if:
              else: string
              end: string
              true: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/if?else=string&end=string&true=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: else
            in: "query"
            required: false
            description: "&#42;Deprecated&#42;. Use the command 'if.else' instead. Defines the else part of the if statement. If value of if evaluates to 'false', the section right after this else statement is executed until the 'if.end' command."
            schema:
              type: string
          - name: end
            in: "query"
            required: false
            description: "&#42;Deprecated&#42;. Use command 'if.end' instead. Defines the end of of the if command block."
            schema:
              type: string
          - name: true
            in: "query"
            required: false
            description: "(default) The expression which must evaluate to true in order to execute the if block. Otherwise execution flow jumps to the 'if.end' command."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - if
  "/api/v3/command/if.else":
    post:
      summary: "Executes all commands below this command up to the 'if.end' command in case initial 'if' command did not execute its containing command block."
      description: |
        Executes all commands below this command up to the 'if.end' command in case initial 'if' command did not execute its containing command block. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=if.else' target='_blank'>Search Academy for more details about: <b>if.else</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - if.else:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/if.else' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - if
  "/api/v3/command/if.end":
    post:
      summary: "Defines the end of an 'if' command."
      description: |
        Defines the end of an 'if' command. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=if.end' target='_blank'>Search Academy for more details about: <b>if.end</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - if.end:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/if.end' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - if
  "/api/v3/command/imap.delete":
    post:
      summary: "Deletes the selected mails by the given filter parameters, e.g. delete mails for the filters unreadOnly, folder, sender."
      description: |
        Deletes the selected mails by the given filter parameters, e.g. delete mails for the filters unreadOnly, folder, sender. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=imap.delete' target='_blank'>Search Academy for more details about: <b>imap.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - imap.delete:
              folder: string
              from: string
              host: string
              secret: string
              unreadOnly: boolean
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/imap.delete?folder=string&from=string&host=string&secret=string&unreadOnly=boolean' \
        -u 'username:password' 
        ```
      parameters:
          - name: folder
            in: "query"
            required: false
            description: "Optional filter parameter, Folder from where we want to delete the mails. Default value is INBOX."
            schema:
              type: string
          - name: from
            in: "query"
            required: false
            description: "Optional filter parameter, filter mails by provided sender."
            schema:
              type: string
          - name: host
            in: "query"
            required: true
            description: "Host for the mailbox. E.g. outlook.office365.com"
            schema:
              type: string
          - name: secret
            in: "query"
            required: true
            description: "Secret, which contains the imap credentials and config json."
            schema:
              type: string
          - name: unreadOnly
            in: "query"
            required: false
            description: "Optional filter parameter, true to get unread mails only. Default value will be false."
            schema:
              type: boolean
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - imap
  "/api/v3/command/imap.get":
    post:
      summary: "Searches the mails and returns all the mails retrieved using the given criteria."
      description: |
        Searches the mails and returns all the mails retrieved using the given criteria. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=imap.get' target='_blank'>Search Academy for more details about: <b>imap.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - imap.get:
              folder: string
              from: string
              host: string
              secret: string
              unreadOnly: boolean
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/imap.get?folder=string&from=string&host=string&secret=string&unreadOnly=boolean' \
        -u 'username:password' 
        ```
      parameters:
          - name: folder
            in: "query"
            required: false
            description: "Optional filter parameter, search mails from particular given folder. Default value will be INBOX."
            schema:
              type: string
          - name: from
            in: "query"
            required: false
            description: "Optional filter parameter, filter mails by provided sender."
            schema:
              type: string
          - name: host
            in: "query"
            required: true
            description: "Host for the mailbox. E.g. outlook.office365.com"
            schema:
              type: string
          - name: secret
            in: "query"
            required: true
            description: "Secret, which contains the imap credentials and config json."
            schema:
              type: string
          - name: unreadOnly
            in: "query"
            required: false
            description: "Optional filter parameter, true to get unread mails only. Default value will be false."
            schema:
              type: boolean
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - imap
  "/api/v3/command/imap.mkdir":
    post:
      summary: "Creates the folder as a sibling of INBOX or inside INBOX or any other folder and returns the status."
      description: |
        Creates the folder as a sibling of INBOX or inside INBOX or any other folder and returns the status. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=imap.mkdir' target='_blank'>Search Academy for more details about: <b>imap.mkdir</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - imap.mkdir:
              destinationFolder: string
              folderName: string
              host: string
              secret: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/imap.mkdir?destinationFolder=string&folderName=string&host=string&secret=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: destinationFolder
            in: "query"
            required: false
            description: "Optional filter parameter, creates a folder inside the given folder. Default value is INBOX."
            schema:
              type: string
          - name: folderName
            in: "query"
            required: true
            description: "Folder name to create a folder inside a destination folder."
            schema:
              type: string
          - name: host
            in: "query"
            required: true
            description: "Host for the mailbox. E.g. outlook.office365.com"
            schema:
              type: string
          - name: secret
            in: "query"
            required: true
            description: "Secret, which contains the imap credentials and config json."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - imap
  "/api/v3/command/imap.move":
    post:
      summary: "Moves the selected mails by the given filter parameters to the provided mailbox folder."
      description: |
        Moves the selected mails by the given filter parameters to the provided mailbox folder. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=imap.move' target='_blank'>Search Academy for more details about: <b>imap.move</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - imap.move:
              destinationFolder: string
              from: string
              host: string
              secret: string
              sourceFolder: string
              unreadOnly: boolean
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/imap.move?destinationFolder=string&from=string&host=string&secret=string&sourceFolder=string&unreadOnly=boolean' \
        -u 'username:password' 
        ```
      parameters:
          - name: destinationFolder
            in: "query"
            required: true
            description: "Targeted folder for the mails to move."
            schema:
              type: string
          - name: from
            in: "query"
            required: false
            description: "Optional filter parameter, filter mails by provided sender."
            schema:
              type: string
          - name: host
            in: "query"
            required: true
            description: "Host for the mailbox. E.g. outlook.office365.com"
            schema:
              type: string
          - name: secret
            in: "query"
            required: true
            description: "Secret, which contains the imap credentials and config json."
            schema:
              type: string
          - name: sourceFolder
            in: "query"
            required: false
            description: "Optional filter parameter, Source folder from where we want to move the mails. Default value is INBOX."
            schema:
              type: string
          - name: unreadOnly
            in: "query"
            required: false
            description: "Optional filter parameter, true to get unread mails only. Default value will be false."
            schema:
              type: boolean
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - imap
  "/api/v3/command/job":
    post:
      summary: "Schedules any subsequent commands of the current pipeline and executes it at the scheduled times."
      description: |
        Schedules any subsequent commands of the current pipeline and executes it at the scheduled times. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=job' target='_blank'>Search Academy for more details about: <b>job</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - job:
              schedule: string
              stop: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/job?schedule=string&stop=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: schedule
            in: "query"
            required: true
            description: "A schedule string which configures the execution of the job. Can be one of: EVERY_5_MIN, EVERY_15_MIN, EVERY_30_MIN, EVERY_45_MIN, HOURLY, DAILY, WEEKLY, MONTHLY. Furthermore in development stage also EVERY_1_MIN is allowed. Throws an exception in production stage."
            schema:
              type: string
          - name: stop
            in: "query"
            required: false
            description: "Deprecated. Use the command job.stop instead. If this param is set, all other params are ignored. It contains the id of the job to be canceled."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - job
  "/api/v3/command/job.list":
    post:
      summary: "Lists all scheduled pipeline jobs."
      description: |
        Lists all scheduled pipeline jobs. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=job.list' target='_blank'>Search Academy for more details about: <b>job.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - job.list:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/job.list' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - job
  "/api/v3/command/job.status":
    post:
      summary: "Returns the status of a given job or null in case the job doesnt exist."
      description: |
        Returns the status of a given job or null in case the job doesnt exist. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=job.status' target='_blank'>Search Academy for more details about: <b>job.status</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - job.status:
              pipelineKey: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/job.status?pipelineKey=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: pipelineKey
            in: "query"
            required: true
            description: "The pipelineKey of the job those status to return"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - job
  "/api/v3/command/job.stop":
    post:
      summary: "Stops the job with given id"
      description: |
        Stops the job with given id. Note: Usually it is not required to use this command. In order to stop and unregister a job, simply remove it from the pipeline or delete the pipeline. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=job.stop' target='_blank'>Search Academy for more details about: <b>job.stop</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - job.stop:
              pipelineKey: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/job.stop?pipelineKey=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: pipelineKey
            in: "query"
            required: true
            description: "The pipeline key of the job to be cancelled."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - job
  "/api/v3/command/jpa.query":
    post:
      summary: "Executes a JPA query and returns the result as JSON in the body"
      description: |
        Executes a JPA query and returns the result as JSON in the body. NOTE: This pipe is primarily meant for support to monitor the system. Its not accessible by default accounts! This can change at any time without notice! <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=jpa.query' target='_blank'>Search Academy for more details about: <b>jpa.query</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - jpa.query:
              query: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/jpa.query?query=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: query
            in: "query"
            required: false
            description: "The JPA query to be executed."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - jpa
  "/api/v3/command/json.validate":
    post:
      summary: "Validates the syntax of the JSON document given in the body or the input parameter"
      description: |
        Validates the syntax of the JSON document given in the body or the input parameter. Can additionally validate the JSON using the given JSON schema. See https://json-schema.org/. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=json.validate' target='_blank'>Search Academy for more details about: <b>json.validate</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - json.validate:
              schema: string
              throwException: string
              version: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/json.validate?schema=string&throwException=string&version=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: schema
            in: "query"
            required: false
            description: "The JSON schema to be used for schema validation. Can be a string, a PEL or a custom uri pointing to the location of the schema. In case no schema is defined, only a JSON syntax validation is performed."
            schema:
              type: string
          - name: throwException
            in: "query"
            required: false
            description: "If 'true', an exception is thrown in case of an syntax or schema validation error and the pipeline execution will be stopped. If set to 'false', the validation result will be returned as JSON in the output having the fields 'status' and 'message' whereas 'status' can be one of 'error' or 'ok'. In case of an validation error, all validation errors will be put into the 'message' field."
            schema:
              type: string
          - name: version
            in: "query"
            required: false
            description: "The version of the schema specification to be used."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - json
  "/api/v3/command/log":
    post:
      summary: "Logs the given input message without changing it."
      description: |
        Logs the given input message without changing it. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=log' target='_blank'>Search Academy for more details about: <b>log</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - log:
              level: string
              message: string
              suffix: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/log?level=string&message=string&suffix=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: level
            in: "query"
            required: false
            description: "The log level. Can be one of DEBUG, TRACE, INFO, WARN, ERROR.<br/>If null or empty, INFO will be used."
            schema:
              type: string
          - name: message
            in: "query"
            required: true
            description: "(default) The message to log. Can be a string or a pipeline expression. If null or empty, the current pipeline message will be logged."
            schema:
              type: string
          - name: suffix
            in: "query"
            required: false
            description: "Suffix log message with path of persisted pipeline path if any. This simplifies searching in logs later."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - log
  "/api/v3/command/log.list":
    post:
      summary: "Returns the given number of log lines from specified service."
      description: |
        Returns the given number of log lines from specified service. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=log.list' target='_blank'>Search Academy for more details about: <b>log.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - log.list:
              format: string
              lines: number
              service: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/log.list?format=string&lines=number&service=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: format
            in: "query"
            required: false
            description: "The format to be returned. One of: text, json"
            schema:
              type: string
          - name: lines
            in: "query"
            required: false
            description: "The number of lines to print in case format is text. 100 is printed when not specified."
            schema:
              type: number
          - name: service
            in: "query"
            required: false
            description: "The service to print logs for. If null or empty, the 'hub' will be used."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - log
  "/api/v3/command/log.list.email":
    post:
      summary: "Returns the email audit log properties. Only available for developers, system or support users."
      description: |
        Returns the email audit log properties. Only available for developers, system or support users. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=log.list.email' target='_blank'>Search Academy for more details about: <b>log.list.email</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - log.list.email:
              auditId: string
              createdAfter: string
              createdBefore: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/log.list.email?auditId=string&createdAfter=string&createdBefore=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: auditId
            in: "query"
            required: false
            description: "The audit id (uuid) of the logged email to return. If null or empty, all emails will be returned matching the given parameters."
            schema:
              type: string
          - name: createdAfter
            in: "query"
            required: false
            description: "Returns only those emails created after this date in ISO-8601 format. If null or empty, no after filter will be set."
            schema:
              type: string
          - name: createdBefore
            in: "query"
            required: false
            description: "Returns only those emails created before this date in ISO-8601 format. If null or empty, no before filter will be set."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - log
  "/api/v3/command/log.list.environment":
    post:
      summary: "Logs the current environment properties. Only available for developers, system or support users."
      description: |
        Logs the current environment properties. Only available for developers, system or support users. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=log.list.environment' target='_blank'>Search Academy for more details about: <b>log.list.environment</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - log.list.environment:
              interpolate: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/log.list.environment?interpolate=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: interpolate
            in: "query"
            required: false
            description: "Return all properties with values interpolated? (= ${some.var} is resolved)."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - log
  "/api/v3/command/log.search":
    post:
      summary: "Searches the cloud logs and returns the last 30 entries per request"
      description: |
        Searches the cloud logs and returns the last 30 entries per request. Supports pagination toscroll thru the entries. Does not return log.search log entries in order to not repeat itself. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=log.search' target='_blank'>Search Academy for more details about: <b>log.search</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - log.search:
              endDateTime: string
              messageFilter: string
              nextPageToken: string
              service: string
              severity: string
              startDateTime: string
              typeFilter: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/log.search?endDateTime=string&messageFilter=string&nextPageToken=string&service=string&severity=string&startDateTime=string&typeFilter=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: endDateTime
            in: "query"
            required: false
            description: "An ISO8601 date-time string to end the search at. If null or empty, all results up to now will be returned."
            schema:
              type: string
          - name: messageFilter
            in: "query"
            required: false
            description: "Message search string to filter the result by matching this string. Can be null or empty to return any entry."
            schema:
              type: string
          - name: nextPageToken
            in: "query"
            required: false
            description: "If this value is given, the next page of results of a previous search is loaded."
            schema:
              type: string
          - name: service
            in: "query"
            required: false
            description: "The service to search for log entries. Can be a list or comma separated service names. If null or empty, 'hub' will be used as default."
            schema:
              type: string
          - name: severity
            in: "query"
            required: false
            description: "The severity to search inside: DEBUG, INFO, WARNING, ERROR. Can be a list or comma separated text. If null or empty, searches in all severities."
            schema:
              type: string
          - name: startDateTime
            in: "query"
            required: false
            description: "An ISO8601 date-time string to start the search at. If null or empty, the date-time string from 24h before will be used."
            schema:
              type: string
          - name: typeFilter
            in: "query"
            required: false
            description: "A list of types of message logs to show. Possible values are: command, pipeline, security_audit, event_fired, webhook. If not set, all logs will be shown."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - log
  "/api/v3/command/log.services":
    post:
      summary: "Returns all PIPEFORCE services for those logging is allowed / enabled."
      description: |
        Returns all PIPEFORCE services for those logging is allowed / enabled. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=log.services' target='_blank'>Search Academy for more details about: <b>log.services</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - log.services:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/log.services' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - log
  "/api/v3/command/log.severities":
    post:
      summary: "Returns all severities (for example, DEBUG, INFO,...), supported by the logging system."
      description: |
        Returns all severities (for example, DEBUG, INFO,...), supported by the logging system. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=log.severities' target='_blank'>Search Academy for more details about: <b>log.severities</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - log.severities:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/log.severities' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - log
  "/api/v3/command/macro":
    post:
      summary: "Defines a custom macro inside a pipeline. Such a macro can then be re-used by calling the command 'macro.run'."
      description: |
        Defines a custom macro inside a pipeline. Such a macro can then be re-used by calling the command 'macro.run'. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=macro' target='_blank'>Search Academy for more details about: <b>macro</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - macro:
              args: string
              do: string
              flow: string
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/macro?args=string&do=string&flow=string&name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: args
            in: "query"
            required: false
            description: "The args to the macro as name-value pairs. If this macro will be re-called, these args will be default args which can be overwritten by the caller."
            schema:
              type: string
          - name: do
            in: "query"
            required: false
            description: "(default) The macro body to be executed as PEL."
            schema:
              type: string
          - name: flow
            in: "query"
            required: false
            description: "If set to true, the macro will be called by the pipeline flow even if 'name' parameter is set."
            schema:
              type: string
          - name: name
            in: "query"
            required: false
            description: "The optional name of the macro. If given, the macro will be registered under this name an can be re-called using the command 'macro.run'."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - macro
  "/api/v3/command/macro.run":
    post:
      summary: "Calls a defined macro by its name."
      description: |
        Calls a defined macro by its name. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=macro.run' target='_blank'>Search Academy for more details about: <b>macro.run</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - macro.run:
              args: string
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/macro.run?args=string&name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: args
            in: "query"
            required: false
            description: "The optional args to the macro as name-value pairs."
            schema:
              type: string
          - name: name
            in: "query"
            required: false
            description: "(default) The name of the macro to call."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - macro
  "/api/v3/command/mail.dump":
    post:
      summary: "Fetches new emails from given mail inbox and uploads them into a drive folder"
      description: |
        Fetches new emails from given mail inbox and uploads them into a drive folder. Note: This command is for demo purposes only and not intended for production use. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=mail.dump' target='_blank'>Search Academy for more details about: <b>mail.dump</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - mail.dump:
              drivePassword: string
              driveUsername: string
              host: string
              inboxPassword: string
              inboxUsername: string
              path: string
              port: number
              protocol: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/mail.dump?drivePassword=string&driveUsername=string&host=string&inboxPassword=string&inboxUsername=string&path=string&port=number&protocol=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: drivePassword
            in: "query"
            required: true
            description: "The password of the drive account to upload to."
            schema:
              type: string
          - name: driveUsername
            in: "query"
            required: true
            description: "The username of the drive account to upload to."
            schema:
              type: string
          - name: host
            in: "query"
            required: true
            description: "The email host."
            schema:
              type: string
          - name: inboxPassword
            in: "query"
            required: true
            description: "The password of the email inbox."
            schema:
              type: string
          - name: inboxUsername
            in: "query"
            required: true
            description: "The username of the email inbox."
            schema:
              type: string
          - name: path
            in: "query"
            required: false
            description: "The remote folder path in drive where to upload the emails into. For each new email a new sub folder will be created inside this path. If null or empty, uploads to the root folder of the logged in user."
            schema:
              type: string
          - name: port
            in: "query"
            required: true
            description: "The port of the email host."
            schema:
              type: number
          - name: protocol
            in: "query"
            required: false
            description: "The email protocol. One of 'imap' or 'pop3'."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - mail
  "/api/v3/command/mail.fetch":
    post:
      summary: "Fetches new emails from given mail inbox and returns them as JSON in the output"
      description: |
        Fetches new emails from given mail inbox and returns them as JSON in the output. Note: This command is for demo purposes only and not intended for production use. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=mail.fetch' target='_blank'>Search Academy for more details about: <b>mail.fetch</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - mail.fetch:
              host: string
              inboxPassword: string
              inboxUsername: string
              newMailsOnly: string
              port: number
              protocol: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/mail.fetch?host=string&inboxPassword=string&inboxUsername=string&newMailsOnly=string&port=number&protocol=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: host
            in: "query"
            required: true
            description: "The email host."
            schema:
              type: string
          - name: inboxPassword
            in: "query"
            required: true
            description: "The password of the email inbox."
            schema:
              type: string
          - name: inboxUsername
            in: "query"
            required: true
            description: "The username of the email inbox."
            schema:
              type: string
          - name: newMailsOnly
            in: "query"
            required: false
            description: "Download only new mails since last processing? If true, the state of last fetch will be kept in property store. Any new fetch will be checked with this state and email will be downloaded only if not processed yet."
            schema:
              type: string
          - name: port
            in: "query"
            required: true
            description: "The port of the email host."
            schema:
              type: number
          - name: protocol
            in: "query"
            required: false
            description: "The email protocol. One of 'imap' or 'pop3'."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - mail
  "/api/v3/command/mail.send":
    post:
      summary: "Sends the given message as email. The message's subject and body will be used in the email accordingly."
      description: |
        Sends the given message as email. The message's subject and body will be used in the email accordingly. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=mail.send' target='_blank'>Search Academy for more details about: <b>mail.send</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - mail.send:
              attachments: string
              from: string
              fromName: string
              message: string
              model: string
              replyTo: string
              subject: string
              to: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/mail.send?attachments=string&from=string&fromName=string&message=string&model=string&replyTo=string&subject=string&to=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: attachments
            in: "query"
            required: false
            description: "Can be a comma separated list of URI Strings (e.g.: uri:drive:file1, uri:property:global/file2, uri:drive:file1, uri:classpath:pipeforce/file3). Also can point via PEL to a content object or a content collection. If the PEL points to an object differently to an uri or content object, serializes the value to string and attaches this as a text file."
            schema:
              type: string
          - name: from
            in: "query"
            required: false
            description: "The from email."
            schema:
              type: string
          - name: fromName
            in: "query"
            required: false
            description: "The from name."
            schema:
              type: string
          - name: message
            in: "query"
            required: false
            description: "By default, the body is used as email message. If this param is set, it will be used as message instead. Can also be a PE which points to a value to be used as the mail message."
            schema:
              type: string
          - name: model
            in: "query"
            required: false
            description: "The model to be placed into the template scope. If null, the message is used as model so you can access vars and body the same way as you would do in the pipeline."
            schema:
              type: string
          - name: replyTo
            in: "query"
            required: false
            description: "Reply-To email address is used when email receiver uses its mail client's 'reply' function. If not used,the from address is used automatically."
            schema:
              type: string
          - name: subject
            in: "query"
            required: false
            description: "The subject."
            schema:
              type: string
          - name: to
            in: "query"
            required: true
            description: "Comma separated list of to email addresses. Never null. If this is an expression and points to comma separated list, an array or a collection, will send an email to any of the entries."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - mail
  "/api/v3/command/mail.verify":
    post:
      summary: "Protects any subsequent pipe commands: Pipeline is only executed <br/> in case the caller has verified that he is the owner of given <br/> email addre..."
      description: |
        Protects any subsequent pipe commands: Pipeline is only executed <br/> in case the caller has verified that he is the owner of given <br/> email address. To do so, a magic link (verification link) is sent <br/> to his email account. Only if the user clicks on this link within <br/> a certain amount of time (default is 10min), the subsequent pipe <br/> commands are executed. From a technical point of view this is done <br/> by putting the current state of the message into a cache which deletes <br/> any entries older than 10min. Then, the email with the key to this <br/> cache entry (=challenge) is send to the user. If the user clicks on <br/> this link, the message is loaded from the cache using the challenge as <br/> the key. If the user clicked within 10min, the entry is here, can be <br/> loaded and the message execution can be resumed. Otherwise if the user <br/> clicks after 10min on the link, no more entry in it. Execution fails. <br/> User has to re-request the link. Note: This command is for demo purposes only and not intended for production use. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=mail.verify' target='_blank'>Search Academy for more details about: <b>mail.verify</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - mail.verify:
              challenge: string
              email: string
              email.blacklist: string
              email.whitelist: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/mail.verify?challenge=string&email=string&email.blacklist=string&email.whitelist=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: challenge
            in: "query"
            required: false
            description: "The challenge which will become part of the link in the email when redirecting back."
            schema:
              type: string
          - name: email
            in: "query"
            required: true
            description: "The email address to send the challenge to."
            schema:
              type: string
          - name: email.blacklist
            in: "query"
            required: false
            description: "A comma separated list of blocked email addresses. Also supports wildcards &#42;. Example: &#42;@domain.com, my@email.com"
            schema:
              type: string
          - name: email.whitelist
            in: "query"
            required: false
            description: "A comma separated list of allowed email addresses. Also supports wildcards &#42;. Example: &#42;@domain.com, my@email.com"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - mail
  "/api/v3/command/map":
    post:
      summary: "DEPRECATED. Use the set command instead. Maps, calculates and converts data from fields of the input message to fields of the output message."
      description: |
        DEPRECATED. Use the set command instead. Maps, calculates and converts data from fields of the input message to fields of the output message. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=map' target='_blank'>Search Academy for more details about: <b>map</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - map:
              reverse: boolean
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/map?reverse=boolean' \
        -u 'username:password' 
        ```
      parameters:
          - name: reverse
            in: "query"
            required: false
            description: "Reverses the left and right expressions. This is a workaround if for some reason the left sidefor example may not contain special characters."
            schema:
              type: boolean
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - map
  "/api/v3/command/memory.info":
    post:
      summary: "Shows the current system info like memory consumption. Available for system, support and developer users only."
      description: |
        Shows the current system info like memory consumption. Available for system, support and developer users only. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=memory.info' target='_blank'>Search Academy for more details about: <b>memory.info</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - memory.info:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/memory.info' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - memory
  "/api/v3/command/message.ack":
    post:
      summary: "Acks message for pipeline initiated by message.receive with autoack=false."
      description: |
        Acks message for pipeline initiated by message.receive with autoack=false. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=message.ack' target='_blank'>Search Academy for more details about: <b>message.ack</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - message.ack:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/message.ack' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - message
  "/api/v3/command/message.binding.delete":
    post:
      summary: "Deletes a binding."
      description: |
        Deletes a binding. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=message.binding.delete' target='_blank'>Search Academy for more details about: <b>message.binding.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - message.binding.delete:
              args: string
              destinationName: string
              destinationType: string
              exchange: string
              routingKey: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/message.binding.delete?args=string&destinationName=string&destinationType=string&exchange=string&routingKey=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: args
            in: "query"
            required: false
            description: "Custom args to be passed to the binding to remove."
            schema:
              type: string
          - name: destinationName
            in: "query"
            required: true
            description: "The name of the destination of the binding to remove."
            schema:
              type: string
          - name: destinationType
            in: "query"
            required: false
            description: "The type of the destination of the binding to remove. One of queue or exchange."
            schema:
              type: string
          - name: exchange
            in: "query"
            required: false
            description: "The exchange involved in this binding to remove."
            schema:
              type: string
          - name: routingKey
            in: "query"
            required: false
            description: "The routing key to be used for the binding to remove."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - message
  "/api/v3/command/message.binding.put":
    post:
      summary: "Creates a new binding. Returns the binding info as JSON."
      description: |
        Creates a new binding. Returns the binding info as JSON. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=message.binding.put' target='_blank'>Search Academy for more details about: <b>message.binding.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - message.binding.put:
              args: string
              destinationName: string
              destinationType: string
              exchange: string
              routingKey: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/message.binding.put?args=string&destinationName=string&destinationType=string&exchange=string&routingKey=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: args
            in: "query"
            required: false
            description: "Custom args to be passed to the binding creation."
            schema:
              type: string
          - name: destinationName
            in: "query"
            required: true
            description: "The name of the destination of the binding."
            schema:
              type: string
          - name: destinationType
            in: "query"
            required: false
            description: "The type of the destination of the binding. One of queue or exchange."
            schema:
              type: string
          - name: exchange
            in: "query"
            required: false
            description: "The exchange involved in this binding."
            schema:
              type: string
          - name: routingKey
            in: "query"
            required: true
            description: "The routing key to be used for the binding"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - message
  "/api/v3/command/message.drop":
    post:
      summary: "Drops message without redelivery for pipeline initiated by message.receive with autoack=false."
      description: |
        Drops message without redelivery for pipeline initiated by message.receive with autoack=false. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=message.drop' target='_blank'>Search Academy for more details about: <b>message.drop</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - message.drop:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/message.drop' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - message
  "/api/v3/command/message.exchange.delete":
    post:
      summary: "Deletes an exchange."
      description: |
        Deletes an exchange. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=message.exchange.delete' target='_blank'>Search Academy for more details about: <b>message.exchange.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - message.exchange.delete:
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/message.exchange.delete?name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: name
            in: "query"
            required: true
            description: "The name of the exchange to delete."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - message
  "/api/v3/command/message.exchange.put":
    post:
      summary: "Creates an exchange."
      description: |
        Creates an exchange. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=message.exchange.put' target='_blank'>Search Academy for more details about: <b>message.exchange.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - message.exchange.put:
              args: string
              autodelete: string
              durable: string
              name: string
              type: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/message.exchange.put?args=string&autodelete=string&durable=string&name=string&type=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: args
            in: "query"
            required: false
            description: "Optional args to the exchange."
            schema:
              type: string
          - name: autodelete
            in: "query"
            required: false
            description: "Delete the exchange if now longer in use?"
            schema:
              type: string
          - name: durable
            in: "query"
            required: false
            description: "If true, exchange will survive server restart"
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "The name of the exchange to create."
            schema:
              type: string
          - name: type
            in: "query"
            required: false
            description: "The type of the exchange like topic, fanout, direct, headers, system or a custom one starting with x-"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - message
  "/api/v3/command/message.nack":
    post:
      summary: "Nacks message with redelivery for pipeline initiated by message.receive with autoack=false."
      description: |
        Nacks message with redelivery for pipeline initiated by message.receive with autoack=false. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=message.nack' target='_blank'>Search Academy for more details about: <b>message.nack</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - message.nack:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/message.nack' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - message
  "/api/v3/command/message.queue.delete":
    post:
      summary: "Deletes a queue."
      description: |
        Deletes a queue. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=message.queue.delete' target='_blank'>Search Academy for more details about: <b>message.queue.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - message.queue.delete:
              empty: string
              name: string
              unused: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/message.queue.delete?empty=string&name=string&unused=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: empty
            in: "query"
            required: false
            description: "Delete only if empty?"
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "The name of the queue to delete."
            schema:
              type: string
          - name: unused
            in: "query"
            required: false
            description: "Delete only if not is use?"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - message
  "/api/v3/command/message.queue.get":
    post:
      summary: "Returns details about a message queue."
      description: |
        Returns details about a message queue. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=message.queue.get' target='_blank'>Search Academy for more details about: <b>message.queue.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - message.queue.get:
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/message.queue.get?name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: name
            in: "query"
            required: true
            description: "The name of the queue to return."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - message
  "/api/v3/command/message.queue.put":
    post:
      summary: "Creates or updates a queue. Returns the queue info as JSON."
      description: |
        Creates or updates a queue. Returns the queue info as JSON. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=message.queue.put' target='_blank'>Search Academy for more details about: <b>message.queue.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - message.queue.put:
              args: string
              autodelete: string
              durable: string
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/message.queue.put?args=string&autodelete=string&durable=string&name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: args
            in: "query"
            required: false
            description: "Custom args to be passed to the queue creation."
            schema:
              type: string
          - name: autodelete
            in: "query"
            required: false
            description: "Should the server delete the queue if it is no longer in use?"
            schema:
              type: string
          - name: durable
            in: "query"
            required: false
            description: "Is it an exclusive queue?"
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "The name of the queue."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - message
  "/api/v3/command/message.receive":
    post:
      summary: "Listens for cluster internal messages matching the given criteria. If matched, executes the pipeline commands below this command."
      description: |
        Listens for cluster internal messages matching the given criteria. If matched, executes the pipeline commands below this command. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=message.receive' target='_blank'>Search Academy for more details about: <b>message.receive</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - message.receive:
              autoack: string
              deleteQueue: string
              exchange: string
              key: string
              manageQueue: string
              managed: string
              maxBatchItems: string
              maxBatchSize: string
              queue: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/message.receive?autoack=string&deleteQueue=string&exchange=string&key=string&manageQueue=string&managed=string&maxBatchItems=string&maxBatchSize=string&queue=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: autoack
            in: "query"
            required: false
            description: "The acknowledge mode to be used. If false, pipes message.ack, message.nack and/or message.drop are expected in pipeline. I pipeline does not aknowledge by its own, message.ack is called after successful pipeline execution, or message.nack on any errors. manual mode can be used only when none of maxBatchSize and maxBatchItems are used."
            schema:
              type: string
          - name: deleteQueue
            in: "query"
            required: false
            description: "DEPRECATED. Use parameter managed instead. Delete the queue if this receive listener got removed or changed? Note: If this value is set to false, you have to track and cleanup queues manually, those are no longer in use!"
            schema:
              type: string
          - name: exchange
            in: "query"
            required: false
            description: "The exchange to be used. If null, the default exchange will be used."
            schema:
              type: string
          - name: key
            in: "query"
            required: true
            description: "The routing key pattern to listen for."
            schema:
              type: string
          - name: manageQueue
            in: "query"
            required: false
            description: "Auto-manage queue. Possible values are: 'false' = Queue must be created and deleted manually. 'create' = Queue will be created if not exists (default). 'delete' = Queue will be deleted automatically if this command get removed or changed. 'create,delete' = Combines create and delete."
            schema:
              type: string
          - name: managed
            in: "query"
            required: false
            description: "DEPRECATED. Use param manageQueue instead."
            schema:
              type: string
          - name: maxBatchItems
            in: "query"
            required: false
            description: "Collects the amount of messages up to the given number of maxBatchItems and then processes this pipeline with all collected messages at once. All batched messages will be provided as array into the event body. If this parameter is null, empty or negative, no batching is used at all: Processes each message as single call. If this parameter is used together with 'maxBatchSize' the one which matches first is considered."
            schema:
              type: string
          - name: maxBatchSize
            in: "query"
            required: false
            description: "Collects messages up to the given maxBatchSize in bytes and then processes this pipeline with all collected messages at once. All batched messages will be provided as array into the event body. If this parameter is null, empty or negative, no batching is used at all: Processes each message as single call. Maximum value can be 200KB (204800). If this parameter is used together with 'maxBatchItems' the one which matches first is considered."
            schema:
              type: string
          - name: queue
            in: "query"
            required: false
            description: "The name of the queue to receive messages from. If null, the default queue name will be used."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - message
  "/api/v3/command/message.send":
    post:
      summary: "Sends a new message to the message service. Uses the pipeline message body as payload."
      description: |
        Sends a new message to the message service. Uses the pipeline message body as payload. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=message.send' target='_blank'>Search Academy for more details about: <b>message.send</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - message.send:
              contentType: string
              encoding: string
              evalPayload: string
              exchange: string
              headers: string
              key: string
              payload: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/message.send?contentType=string&encoding=string&evalPayload=string&exchange=string&headers=string&key=string&payload=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: contentType
            in: "query"
            required: false
            description: "Sets the content type of the message payload."
            schema:
              type: string
          - name: encoding
            in: "query"
            required: false
            description: "The encoding of the message payload."
            schema:
              type: string
          - name: evalPayload
            in: "query"
            required: false
            description: "Search the payload param value recursively for PEL expressions and parse them?"
            schema:
              type: string
          - name: exchange
            in: "query"
            required: false
            description: "The exchange to be used. If null, the default exchange will be used."
            schema:
              type: string
          - name: headers
            in: "query"
            required: false
            description: "The headers to be send with the message. Values in here will overwrite any already existing header values."
            schema:
              type: string
          - name: key
            in: "query"
            required: true
            description: "The routing key to send the message as."
            schema:
              type: string
          - name: payload
            in: "query"
            required: false
            description: "The payload to be send in the message. If parameter is missing, the message body will be used as payload."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - message
  "/api/v3/command/microsoft.teams.send":
    post:
      summary: "Sends a message to a Microsoft Teams channel.Note: This command needs an additional license + plugin"
      description: |
        Sends a message to a Microsoft Teams channel.Note: This command needs an additional license + plugin. This is here only for documentation purposes. Ask support@pipeforce.io for more information. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=microsoft.teams.send' target='_blank'>Search Academy for more details about: <b>microsoft.teams.send</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - microsoft.teams.send:
              message: string
              url: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/microsoft.teams.send?message=string&url=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: message
            in: "query"
            required: true
            description: "The text message to be send to Teams."
            schema:
              type: string
          - name: url
            in: "query"
            required: true
            description: "The Teams webhook url to post the message to."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - microsoft
  "/api/v3/command/mock.command":
    post:
      summary: "Mocks a given command of the current pipeline."
      description: |
        Mocks a given command of the current pipeline. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=mock.command' target='_blank'>Search Academy for more details about: <b>mock.command</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - mock.command:
              command: string
              enabled: string
              thenSetBody: string
              thenSetVar: string
              when: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/mock.command?command=string&enabled=string&thenSetBody=string&thenSetVar=string&when=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: command
            in: "query"
            required: true
            description: "The name of the command to mock"
            schema:
              type: string
          - name: enabled
            in: "query"
            required: false
            description: "Is the mock active? Can be a boolean or a PEL returning a boolean"
            schema:
              type: string
          - name: thenSetBody
            in: "query"
            required: false
            description: "The value to be returned in the body when this mock applies. If not defined, the current body will not be changed."
            schema:
              type: string
          - name: thenSetVar
            in: "query"
            required: false
            description: "Defines a map which will be set as vars."
            schema:
              type: string
          - name: when
            in: "query"
            required: false
            description: "The mock expression: When this evaluates to true, the mock will be applied."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - mock
  "/api/v3/command/pdf.create":
    post:
      summary: "Creates a new PDF with blank pages."
      description: |
        Creates a new PDF with blank pages. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=pdf.create' target='_blank'>Search Academy for more details about: <b>pdf.create</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - pdf.create:
              format: string
              pages: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/pdf.create?format=string&pages=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: format
            in: "query"
            required: false
            description: "The format of the pages to create. One of: A0, A1, A2, A3, A4, A5, A6, LEGAL, LETTER"
            schema:
              type: string
          - name: pages
            in: "query"
            required: false
            description: "The number of pages to create. May not be 0 or negative."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - pdf
  "/api/v3/command/pdf.from.doc":
    post:
      summary: "This command is used to convert Word (.doc) to PDF."
      description: |
        This command is used to convert Word (.doc) to PDF. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=pdf.from.doc' target='_blank'>Search Academy for more details about: <b>pdf.from.doc</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - pdf.from.doc:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/pdf.from.doc' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - pdf
  "/api/v3/command/pdf.from.docx":
    post:
      summary: "This command is used to convert Word(.docx) to PDF."
      description: |
        This command is used to convert Word(.docx) to PDF. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=pdf.from.docx' target='_blank'>Search Academy for more details about: <b>pdf.from.docx</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - pdf.from.docx:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/pdf.from.docx' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - pdf
  "/api/v3/command/pdf.from.png":
    post:
      summary: "This command is used to convert PNG to PDF."
      description: |
        This command is used to convert PNG to PDF. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=pdf.from.png' target='_blank'>Search Academy for more details about: <b>pdf.from.png</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - pdf.from.png:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/pdf.from.png' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - pdf
  "/api/v3/command/pdf.merge":
    post:
      summary: "This command is used to merge PDFs."
      description: |
        This command is used to merge PDFs. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=pdf.merge' target='_blank'>Search Academy for more details about: <b>pdf.merge</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - pdf.merge:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/pdf.merge' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - pdf
  "/api/v3/command/pdf.stamp":
    post:
      summary: "Writes both text or images to a pdf file under a specific layer"
      description: |
        Writes both text or images to a pdf file under a specific layer. It expects the pdf file as a pipeline resource in the body and transforms the result back also as a pipeline resource in the body. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=pdf.stamp' target='_blank'>Search Academy for more details about: <b>pdf.stamp</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - pdf.stamp:
              bottom_margin: string
              fontColor: string
              fontSize: string
              font_family: string
              height: string
              image: string
              left_margin: string
              opacity: number
              right_margin: string
              rotation: number
              text: string
              top_margin: string
              width: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/pdf.stamp?bottom_margin=string&fontColor=string&fontSize=string&font_family=string&height=string&image=string&left_margin=string&opacity=number&right_margin=string&rotation=number&text=string&top_margin=string&width=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: bottom_margin
            in: "query"
            required: false
            description: "Considers page bottom margin when applying stamp."
            schema:
              type: string
          - name: fontColor
            in: "query"
            required: false
            description: "The hex code color of the font like #FF0000, #0000FF"
            schema:
              type: string
          - name: fontSize
            in: "query"
            required: false
            description: "The size of the font."
            schema:
              type: string
          - name: font_family
            in: "query"
            required: false
            description: "Considers font style that we can apply to stamp."
            schema:
              type: string
          - name: height
            in: "query"
            required: false
            description: "Considers height of the text when applying stamp."
            schema:
              type: string
          - name: image
            in: "query"
            required: false
            description: "The image to write on the pdf file. One of param text or image is required. The image must be a content uri an existing content object in the message or a built-in stamp name like APPROVED for example."
            schema:
              type: string
          - name: left_margin
            in: "query"
            required: false
            description: "Considers page left margin when applying stamp."
            schema:
              type: string
          - name: opacity
            in: "query"
            required: false
            description: "Amount of opacity that should be applied (Must be a value between >= 0.0 and <= 1.0, 0.0 means no opacity, 1.0 means invisible.)"
            schema:
              type: number
          - name: right_margin
            in: "query"
            required: false
            description: "Considers page right margin when applying stamp."
            schema:
              type: string
          - name: rotation
            in: "query"
            required: false
            description: "Specifies how many degrees the element should be rotated. Negative degree means rotated below x-axis, positive degree means above. Must be a value between >= -180.0 and <= 180.0"
            schema:
              type: number
          - name: text
            in: "query"
            required: false
            description: "The text to write on the PDF file. It is required to either enter text or image."
            schema:
              type: string
          - name: top_margin
            in: "query"
            required: false
            description: "Considers page top margin when applying stamp"
            schema:
              type: string
          - name: width
            in: "query"
            required: false
            description: "Considers width of the text when applying stamp."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - pdf
  "/api/v3/command/pdf.to.png":
    post:
      summary: "This command is used to convert PDF to PNG."
      description: |
        This command is used to convert PDF to PNG. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=pdf.to.png' target='_blank'>Search Academy for more details about: <b>pdf.to.png</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - pdf.to.png:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/pdf.to.png' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - pdf
  "/api/v3/command/pinboard.item.delete":
    post:
      summary: "Deletes a pinboard item of currently logged-in user."
      description: |
        Deletes a pinboard item of currently logged-in user. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=pinboard.item.delete' target='_blank'>Search Academy for more details about: <b>pinboard.item.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - pinboard.item.delete:
              uuid: string
              value: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/pinboard.item.delete?uuid=string&value=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: uuid
            in: "query"
            required: false
            description: "The uuid of the pinboard item to delete."
            schema:
              type: string
          - name: value
            in: "query"
            required: false
            description: "The value of the pinboard item to delete."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - pinboard
  "/api/v3/command/pinboard.item.get":
    post:
      summary: "Lists all pinboard items or returns a concrete one by uuid."
      description: |
        Lists all pinboard items or returns a concrete one by uuid. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=pinboard.item.get' target='_blank'>Search Academy for more details about: <b>pinboard.item.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - pinboard.item.get:
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/pinboard.item.get?uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: uuid
            in: "query"
            required: false
            description: "The uuid of the pinboard item to return. If not given, all pinboard items of currently logged-in user will be returned, ordered by order value."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - pinboard
  "/api/v3/command/pinboard.item.put":
    post:
      summary: "Creates a new pinboard item or updates an existing one."
      description: |
        Creates a new pinboard item or updates an existing one. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=pinboard.item.put' target='_blank'>Search Academy for more details about: <b>pinboard.item.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - pinboard.item.put:
              color: string
              icon: string
              name: string
              order: string
              uuid: string
              value: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/pinboard.item.put?color=string&icon=string&name=string&order=string&uuid=string&value=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: color
            in: "query"
            required: false
            description: "The color of the icon. If null, the default color will be used."
            schema:
              type: string
          - name: icon
            in: "query"
            required: false
            description: "The icon of the pinboard item. If null, a default icon will be used."
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "The name of the pinboard item."
            schema:
              type: string
          - name: order
            in: "query"
            required: false
            description: "The order of the item in the pinboard as int value. ASC."
            schema:
              type: string
          - name: uuid
            in: "query"
            required: false
            description: "The uuid of the pinboard item to update. If not given, a new one will be created."
            schema:
              type: string
          - name: value
            in: "query"
            required: true
            description: "The pinboard value."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - pinboard
  "/api/v3/command/pipeline.debug.status":
    post:
      summary: "Returns the status of a running debugging session."
      description: |
        Returns the status of a running debugging session. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=pipeline.debug.status' target='_blank'>Search Academy for more details about: <b>pipeline.debug.status</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - pipeline.debug.status:
              pipelineKey: string
              pipelinePath: string
              sessionId: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/pipeline.debug.status?pipelineKey=string&pipelinePath=string&sessionId=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: pipelineKey
            in: "query"
            required: false
            description: "(Deprecated, use pipelinePath instead) The property key of the pipeline to monitor. Required only on first call. Ignored if sessionId is set."
            schema:
              type: string
          - name: pipelinePath
            in: "query"
            required: false
            description: "The property path of the pipeline to monitor. Required only on first call. Ignored if sessionId is set."
            schema:
              type: string
          - name: sessionId
            in: "query"
            required: false
            description: "The debug session id. If null or empty, a new debugging session is created."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - pipeline
  "/api/v3/command/pipeline.delete":
    post:
      summary: "Deletes a persisted pipeline."
      description: |
        Deletes a persisted pipeline. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=pipeline.delete' target='_blank'>Search Academy for more details about: <b>pipeline.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - pipeline.delete:
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/pipeline.delete?name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: name
            in: "query"
            required: true
            description: "The exact name of the pipeline to delete."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - pipeline
  "/api/v3/command/pipeline.get":
    post:
      summary: "Returns all persisted pipelines matching the given name."
      description: |
        Returns all persisted pipelines matching the given name. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=pipeline.get' target='_blank'>Search Academy for more details about: <b>pipeline.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - pipeline.get:
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/pipeline.get?name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: name
            in: "query"
            required: false
            description: "The name of the pipeline to search for. Supports wildcard &#42; matching. If null or empty, returns all entries."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - pipeline
  "/api/v3/command/pipeline.put":
    post:
      summary: "Persists a new pipeline to the system or updates an existing one"
      description: |
        Persists a new pipeline to the system or updates an existing one. The pipeline yaml is expected in the body. Can be null. Returns the updated property in the output. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=pipeline.put' target='_blank'>Search Academy for more details about: <b>pipeline.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - pipeline.put:
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/pipeline.put?name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: name
            in: "query"
            required: true
            description: "The unique name of this pipeline within this namespace."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - pipeline
  "/api/v3/command/pipeline.run":
    post:
      summary: "Loads and executes the persisted pipeline and returns its result in the output."
      description: |
        Loads and executes the persisted pipeline and returns its result in the output. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=pipeline.run' target='_blank'>Search Academy for more details about: <b>pipeline.run</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - pipeline.run:
              headers: string
              key: string
              name: string
              path: string
              vars: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/pipeline.run?headers=string&key=string&name=string&path=string&vars=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: headers
            in: "query"
            required: false
            description: "A headers map to be put on this pipeline. Note: Any header in this map will overwrite the header in the target pipeline headers scope."
            schema:
              type: string
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use path instead. The key of the pipeline in the property store to load and executed. Can be relative inside current namespace or qualified."
            schema:
              type: string
          - name: name
            in: "query"
            required: false
            description: "DEPRECATED. Use param key instead. The key of the pipeline in the property store to load and executed. Can be relative inside current namespace or qualified."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path of the pipeline in the property store to load and executed. Can be relative inside current namespace or qualified."
            schema:
              type: string
          - name: vars
            in: "query"
            required: false
            description: "A variables map to be put on this pipeline. Note: Any var in this map will overwrite the var in the target pipeline vars scope."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - pipeline
  "/api/v3/command/pipeline.schema":
    post:
      summary: "Returns the V7 compliant JSON schema for all built-in pipeline commands."
      description: |
        Returns the V7 compliant JSON schema for all built-in pipeline commands. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=pipeline.schema' target='_blank'>Search Academy for more details about: <b>pipeline.schema</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - pipeline.schema:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/pipeline.schema' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - pipeline
  "/api/v3/command/pipeline.schema.get":
    post:
      summary: "Returns the V7 compliant JSON schema for a pipeline and all built-in commands."
      description: |
        Returns the V7 compliant JSON schema for a pipeline and all built-in commands. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=pipeline.schema.get' target='_blank'>Search Academy for more details about: <b>pipeline.schema.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - pipeline.schema.get:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/pipeline.schema.get' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - pipeline
  "/api/v3/command/property.app.config":
    post:
      summary: "Returns all config resources from apps the current user has access to (role CAN_APP_ is assigned) as a list into the output."
      description: |
        Returns all config resources from apps the current user has access to (role CAN_APP_ is assigned) as a list into the output. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.app.config' target='_blank'>Search Academy for more details about: <b>property.app.config</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.app.config:
              appNames: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.app.config?appNames=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: appNames
            in: "query"
            required: false
            description: "A comma separated list of app names those config must be returned. If null or empty, all configs of all apps are returned, the currently logged in user is assigned to. If there is an app name given which doesnt exist or the current user has no access to, nothing happens for security reasons."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.attachment.checksum":
    post:
      summary: "Calculates and verifies the checksum of a property attachment"
      description: |
        Calculates and verifies the checksum of a property attachment. Calculating the checksum of an attachment using this command also means closing it, so that no more chunks can be added. The checksum of an attachment is calculated by concatenating the MD5 of all chunks into a single MD5 digest. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.attachment.checksum' target='_blank'>Search Academy for more details about: <b>property.attachment.checksum</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.attachment.checksum:
              checksum: string
              key: string
              name: string
              path: string
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.attachment.checksum?checksum=string&key=string&name=string&path=string&uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: checksum
            in: "query"
            required: false
            description: "The checksum to be used for verification. If not given, no verification is done, but checksum of attachment is calculated and stored anyhow."
            schema:
              type: string
          - name: key
            in: "query"
            required: false
            description: "Depreacted. Use path instead. The key of the property containing the attachments."
            schema:
              type: string
          - name: name
            in: "query"
            required: false
            description: "The name of the attachment to be checked."
            schema:
              type: string
          - name: path
            in: "query"
            required: false
            description: "The path of the property containing the attachments."
            schema:
              type: string
          - name: uuid
            in: "query"
            required: false
            description: "The uuid of the property containing the attachments. If this is given, path param is ignored."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.attachment.chunk.content":
    post:
      summary: "Returns the content (data) of a chunk of an attachment in the output as input stream. Returns empty body if chunk was not found."
      description: |
        Returns the content (data) of a chunk of an attachment in the output as input stream. Returns empty body if chunk was not found. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.attachment.chunk.content' target='_blank'>Search Academy for more details about: <b>property.attachment.chunk.content</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.attachment.chunk.content:
              index: string
              key: string
              name: string
              path: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.attachment.chunk.content?index=string&key=string&name=string&path=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: index
            in: "query"
            required: false
            description: "The index of the chunk to return."
            schema:
              type: string
          - name: key
            in: "query"
            required: true
            description: "Deprecated. Use path instead. The key of the property this attachment belongs to."
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "The name of the attachment this chunk belongs to."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path of the property this attachment belongs to."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.attachment.chunk.get":
    post:
      summary: "Returns the metadata of an chunk of an attachment"
      description: |
        Returns the metadata of an chunk of an attachment. Throws error in case property or attachment doesn't exist. Return null in case no chunk exists at given index. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.attachment.chunk.get' target='_blank'>Search Academy for more details about: <b>property.attachment.chunk.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.attachment.chunk.get:
              index: string
              key: string
              name: string
              path: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.attachment.chunk.get?index=string&key=string&name=string&path=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: index
            in: "query"
            required: false
            description: "The index of the chunk to return."
            schema:
              type: string
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use path instead. The key of the property this attachment belongs to."
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "The name of the attachment this chunk belongs to."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path of the property this attachment belongs to."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.attachment.chunk.put":
    post:
      summary: "Adds a chunk of data to the given attachment. Note: A chunk may not be bigger than 10MB. Otherwise, it gets rejected from the backend."
      description: |
        Adds a chunk of data to the given attachment. Note: A chunk may not be bigger than 10MB. Otherwise, it gets rejected from the backend. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.attachment.chunk.put' target='_blank'>Search Academy for more details about: <b>property.attachment.chunk.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.attachment.chunk.put:
              content: string
              index: string
              key: string
              name: string
              path: string
              storageId: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.attachment.chunk.put?content=string&index=string&key=string&name=string&path=string&storageId=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: content
            in: "query"
            required: false
            description: "The content to be added to the chunk. If this parameter is null or empty, the body will be used as content instead."
            schema:
              type: string
          - name: index
            in: "query"
            required: false
            description: "The index of the chunk. If given, the content of the chunk at given index is replaced with the new content. If null or empty, a new chunk is added to the attachment."
            schema:
              type: string
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use path instead. The key of the property this attachment belongs to."
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "The name of the attachment this chunk belongs to."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path of the property this attachment belongs to."
            schema:
              type: string
          - name: storageId
            in: "query"
            required: false
            description: "The id of the storage to be used in the backend to store the binary data of the attachment. Possible values: database, drive."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.attachment.content":
    post:
      summary: "Returns the content of an property attachment as a byte stream content object into the output."
      description: |
        Returns the content of an property attachment as a byte stream content object into the output. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.attachment.content' target='_blank'>Search Academy for more details about: <b>property.attachment.content</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.attachment.content:
              key: string
              name: string
              path: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.attachment.content?key=string&name=string&path=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use path instead. The key of the property this attachment belongs to."
            schema:
              type: string
          - name: name
            in: "query"
            required: false
            description: "The name of the attachment."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path of the property this attachment belongs to."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.attachment.delete":
    post:
      summary: "Removes an attachment and its content from a property."
      description: |
        Removes an attachment and its content from a property. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.attachment.delete' target='_blank'>Search Academy for more details about: <b>property.attachment.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.attachment.delete:
              key: string
              name: string
              path: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.attachment.delete?key=string&name=string&path=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use path instead. The key of the property containing the attachment."
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "The name of the attachment to be deleted."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path of the property containing the attachment."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.attachment.get":
    post:
      summary: "Returns an attachment of a property (without content)."
      description: |
        Returns an attachment of a property (without content). <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.attachment.get' target='_blank'>Search Academy for more details about: <b>property.attachment.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.attachment.get:
              key: string
              name: string
              path: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.attachment.get?key=string&name=string&path=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use path instead. The key of the property this attachment belongs to."
            schema:
              type: string
          - name: name
            in: "query"
            required: false
            description: "The name of the attachment to return."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path of the property this attachment belongs to."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.attachment.list":
    post:
      summary: "Lists all attachments of a given property"
      description: |
        Lists all attachments of a given property. The content is not part of this list. Use property.attachment.chunk.get in order to retrieve the content data. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.attachment.list' target='_blank'>Search Academy for more details about: <b>property.attachment.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.attachment.list:
              key: string
              path: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.attachment.list?key=string&path=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use path instead. The key of the property to list its attachments for."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path of the property to list its attachments for."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.attachment.put":
    post:
      summary: "Creates and adds attachments to a property"
      description: |
        Creates and adds attachments to a property. Optionally with binary payload data. Overwrites / updates any existing attachments with same name. The attachments can be added in three ways: A) A single content object or a collection of content objects is given in input, then its payload and metadata is used to create the attachment(s). B) Data different to a content object is given in the input. Then this data will be used as the payload for the attachment. C) Input is null or empty. Then an empty attachment without any payload will be created. In case B) and C) the additional parameters name, contentType and length are mandatory. In case A) The parameters name, contentType and length are optional and will be used as fallback value in case a content object is them missing. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.attachment.put' target='_blank'>Search Academy for more details about: <b>property.attachment.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.attachment.put:
              content: string
              contentType: string
              key: string
              length: string
              name: string
              path: string
              storageId: string
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.attachment.put?content=string&contentType=string&key=string&length=string&name=string&path=string&storageId=string&uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: content
            in: "query"
            required: false
            description: "The content to add. If null, the data in the body will be added. In case you would like to explicitly set no content at all (also not from the body), set this value to: false."
            schema:
              type: string
          - name: contentType
            in: "query"
            required: false
            description: "The content type to be used for the attachment. This parameter is optional in case the input is a content object or a content collection."
            schema:
              type: string
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use path instead. The key of the property containing the attachments."
            schema:
              type: string
          - name: length
            in: "query"
            required: false
            description: "The length of the attachment. This parameter is not required in case the input is a content object or content collection."
            schema:
              type: string
          - name: name
            in: "query"
            required: false
            description: "The name of the attachment to be created. If an attachment with this name already exists, updates the existing one. This parameter is not required in case the input is a content object or a content collection."
            schema:
              type: string
          - name: path
            in: "query"
            required: false
            description: "The path of the property containing the attachments."
            schema:
              type: string
          - name: storageId
            in: "query"
            required: false
            description: "The id of the storage to be used in the backend to store the binary data of the attachment. Possible values: database, drive."
            schema:
              type: string
          - name: uuid
            in: "query"
            required: false
            description: "The uuid of the property containing the attachments. If this is given, path param is ignored."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.attachment.put.uri":
    post:
      summary: "Sets property attachment to be symlink to resource referenced by uri."
      description: |
        Sets property attachment to be symlink to resource referenced by uri. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.attachment.put.uri' target='_blank'>Search Academy for more details about: <b>property.attachment.put.uri</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.attachment.put.uri:
              key: string
              name: string
              path: string
              uri: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.attachment.put.uri?key=string&name=string&path=string&uri=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use path instead. The key of the property this attachment belongs to."
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "The name of the attachment."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path of the property this attachment belongs to."
            schema:
              type: string
          - name: uri
            in: "query"
            required: true
            description: "The uri of resource to point symlink to."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.copy":
    post:
      summary: "Copies a property from one key to another. If target property already exists, overwrites it. NOTE: Doesnt copy the attachments."
      description: |
        Copies a property from one key to another. If target property already exists, overwrites it. NOTE: Doesnt copy the attachments. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.copy' target='_blank'>Search Academy for more details about: <b>property.copy</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.copy:
              key: string
              path: string
              to: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.copy?key=string&path=string&to=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use path instead. The origin key of the property.Otherwise a new entry is created."
            schema:
              type: string
          - name: path
            in: "query"
            required: false
            description: "The origin path of the property.Otherwise a new entry is created."
            schema:
              type: string
          - name: to
            in: "query"
            required: true
            description: "The target key to copy the property to. If a property with this key already exists, it will be overwritten."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.delete":
    post:
      summary: "Deletes one or more existing properties matching the given search pattern. Use this command with care!"
      description: |
        Deletes one or more existing properties matching the given search pattern. Use this command with care! <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.delete' target='_blank'>Search Academy for more details about: <b>property.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.delete:
              pattern: string
              trashBin: string
              trashBinTimeToLive: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.delete?pattern=string&trashBin=string&trashBinTimeToLive=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: pattern
            in: "query"
            required: true
            description: "The path pattern of the properties to delete. All matching properties will be deleted!"
            schema:
              type: string
          - name: trashBin
            in: "query"
            required: false
            description: "In case this parameter is set to true, the property wont be removed but moved to the trash bin instead (= flagged with trash lock)."
            schema:
              type: string
          - name: trashBinTimeToLive
            in: "query"
            required: false
            description: "The time in millis after the property must be removed from bin and fully deleted. If set to null or empty, the system defaults will apply for final deleting trashed properties. This is typically a value between 30 and 90 days."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.exists":
    post:
      summary: "Checks whether a given property exists and returns the boolean result in the body."
      description: |
        Checks whether a given property exists and returns the boolean result in the body. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.exists' target='_blank'>Search Academy for more details about: <b>property.exists</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.exists:
              key: string
              path: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.exists?key=string&path=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use path instead. The path key of the property to check for."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path of the property to check for."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.get":
    post:
      summary: "Returns the property with given key."
      description: |
        Returns the property with given key. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.get' target='_blank'>Search Academy for more details about: <b>property.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.get:
              key: string
              path: string
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.get?key=string&path=string&uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use path instead. The relative or absolute (with namespace) property key. If uuid is given, this parameter is ignored. One of of uuid or path is mandatory."
            schema:
              type: string
          - name: path
            in: "query"
            required: false
            description: "(default) The relative or absolute (with namespace) property path. If uuid is given, this parameter is ignored. One of of uuid or path is mandatory."
            schema:
              type: string
          - name: uuid
            in: "query"
            required: false
            description: "The uuid of the property. If this parameter is given, parameter key is ignored. On of uuid or key is mandatory."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.import":
    post:
      summary: "Imports properties given as JSON document in the body into the property store."
      description: |
        Imports properties given as JSON document in the body into the property store. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.import' target='_blank'>Search Academy for more details about: <b>property.import</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.import:
              strategy: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.import?strategy=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: strategy
            in: "query"
            required: false
            description: "Defines what to do if a property with same path already exists. Possible values are: update = Update existing fields of the property from the import values. rollback = Do not import at all. Also all other properties wont be imported in this case. skip = Skip the already existing entry but log it."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.list":
    post:
      summary: "Lists all properties from the store."
      description: |
        Lists all properties from the store. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.list' target='_blank'>Search Academy for more details about: <b>property.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.list:
              filter: string
              includeTrashed: string
              pattern: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.list?filter=string&includeTrashed=string&pattern=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: filter
            in: "query"
            required: false
            description: "This parameter is deprecated. Use param 'pattern' instead."
            schema:
              type: string
          - name: includeTrashed
            in: "query"
            required: false
            description: "Include also properties moved to trash bin?"
            schema:
              type: string
          - name: pattern
            in: "query"
            required: false
            description: "(default) The key pattern of the properties to search for. Also supports key pattern matching whereas &#42; matches a single part inside a directory in the key and &#42;&#42; everything. For example '/pipeforce/namespace/user/&#42;&#42;' would return all properties of all users in the given namespace. Also sub levels of this key. To avoid sub-leveling use the &#42; instead: '/pipeforce/namespace/user/&#42;'. This would return /pipeforce/namespace/user/max' but not /pipeforce/namespace/user/max/contracts'."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.lock.get":
    post:
      summary: "Returns the lock tag for a given property. In case there is no lock for this property, null is returned."
      description: |
        Returns the lock tag for a given property. In case there is no lock for this property, null is returned. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.lock.get' target='_blank'>Search Academy for more details about: <b>property.lock.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.lock.get:
              key: string
              path: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.lock.get?key=string&path=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: key
            in: "query"
            required: true
            description: "Deprecated. Use path instead. The key of the property to return the lock tag for."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path of the property to return the lock tag for."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.lock.put":
    post:
      summary: "Creates a lock on a given property"
      description: |
        Creates a lock on a given property. In case someone tries to change or delete a locked property without being part of the exclusive guild, an exception is thrown. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.lock.put' target='_blank'>Search Academy for more details about: <b>property.lock.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.lock.put:
              details: string
              key: string
              name: string
              path: string
              ttl: string
              type: string
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.lock.put?details=string&key=string&name=string&path=string&ttl=string&type=string&uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: details
            in: "query"
            required: false
            description: "Some optional data to be set on the lock."
            schema:
              type: string
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use path instead. The key of the property to lock."
            schema:
              type: string
          - name: name
            in: "query"
            required: false
            description: "In case the lock is of type 'role' or 'group', this parameter is mandatory and defines the name of the role or group, this lock is exclusive to. In case the type of the lock is 'namespace', this parameter is optional. If given, this name is used as namespace to create the lock for, otherwise the current namespace of the instance is used. In case the type of the lock is 'global', this parameter will be ignored."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path of the property to lock."
            schema:
              type: string
          - name: ttl
            in: "query"
            required: false
            description: "The time-to-live of the lock in milliseconds. After this amount of time, the lock will be automatically removed or the property will be deleted if lock is of type 'trash'. If this value is null or empty, the lock is not limited to a time-to-live and must be removed manually. Note: The lock cleanup job will run any few minutes, so if 'ttl' of a lock has been set to a few milliseconds or seconds it can be, that it is fully removed from the metadata returned by reading a property only after some minutes. Writing to the property instead works immediately after the 'ttl' has been expired."
            schema:
              type: string
          - name: type
            in: "query"
            required: false
            description: "The type of the lock for which range the lock is exclusive. One of: 'user', 'role', 'group', 'namespace', 'global' or 'trash'. If null, empty or different from the types mentioned here, the lock will be global by default."
            schema:
              type: string
          - name: uuid
            in: "query"
            required: false
            description: "In case the lock is of type 'user', this parameter must contain the uuid of the user this lock is exclusive to. If this parameter is missing, the uuid of the currently logged-in user will be used."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.lock.remove":
    post:
      summary: "Removes a lock from a given property."
      description: |
        Removes a lock from a given property. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.lock.remove' target='_blank'>Search Academy for more details about: <b>property.lock.remove</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.lock.remove:
              key: string
              path: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.lock.remove?key=string&path=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use path instead. The key of the property to remove the lock from."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path of the property to remove the lock from."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.move":
    post:
      summary: "Moves a property from one key to another."
      description: |
        Moves a property from one key to another. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.move' target='_blank'>Search Academy for more details about: <b>property.move</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.move:
              key: string
              path: string
              to: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.move?key=string&path=string&to=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: key
            in: "query"
            required: false
            description: "The origin path key of the property.Otherwise a new entry is created."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "Deprecated. Use path instead. The origin path key of the property.Otherwise a new entry is created."
            schema:
              type: string
          - name: to
            in: "query"
            required: true
            description: "The target key to move the property to. If a property with this key already exists, an exception is thrown."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.path.children":
    post:
      summary: "Returns all property child keys for a given parent key. For any child 'folder', returns / at the very end."
      description: |
        Returns all property child keys for a given parent key. For any child 'folder', returns / at the very end. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.path.children' target='_blank'>Search Academy for more details about: <b>property.path.children</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.path.children:
              pattern: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.path.children?pattern=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: pattern
            in: "query"
            required: true
            description: "The key pattern of the parent property or properties. Can be a static suffix like my/parent/path or my/parent/path/ or a pattern like my/parent/path/&#42;.  Nested patterns like my/&#42;/path/&#42; are not supported."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.path.list":
    post:
      summary: "Returns all property paths for a given pattern."
      description: |
        Returns all property paths for a given pattern. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.path.list' target='_blank'>Search Academy for more details about: <b>property.path.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.path.list:
              includeTrashed: string
              pattern: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.path.list?includeTrashed=string&pattern=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: includeTrashed
            in: "query"
            required: false
            description: "Include also properties moved to trash bin in the search?"
            schema:
              type: string
          - name: pattern
            in: "query"
            required: true
            description: "The key pattern of the properties to search for. Also supports path pattern matching whereas &#42; matches a single part inside a directory in the key and &#42;&#42; everything. For example '/pipeforce/namespace/user/&#42;&#42;' would return all properties of all users in the given namespace. Also sub levels of this path. To avoid sub-leveling use the &#42; instead: '/pipeforce/namespace/user/&#42;'. This would return /pipeforce/namespace/user/max' but not /pipeforce/namespace/user/max/contracts'."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.put":
    post:
      summary: "Saves the value of a property. The property schema must exist in advance (no new property will be created)."
      description: |
        Saves the value of a property. The property schema must exist in advance (no new property will be created). <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.put' target='_blank'>Search Academy for more details about: <b>property.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.put:
              key: string
              path: string
              value: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.put?key=string&path=string&value=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use path instead. The path key of the property to save. If property with key already exists, the existing property will be loaded and updated instead. Otherwise a new entry is created."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path of the property to save. If property with this path already exists, the existing property will be loaded and updated instead. Otherwise a new entry is created."
            schema:
              type: string
          - name: value
            in: "query"
            required: false
            description: "The value of the property. May be null or empty."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.query":
    post:
      summary: "Queries the properties from the backend by using a certain query language."
      description: |
        Queries the properties from the backend by using a certain query language. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.query' target='_blank'>Search Academy for more details about: <b>property.query</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.query:
              dialect: string
              from: string
              params: string
              select: string
              type: string
              where: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.query?dialect=string&from=string&params=string&select=string&type=string&where=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: dialect
            in: "query"
            required: true
            description: "The query language to be used."
            schema:
              type: string
          - name: from
            in: "query"
            required: true
            description: "Defines the properties by key patterns to be selected for the query. Multiple patterns must be separated by comma. Additionally, each pattern must be assigned to a variable using 'has varName'. For example global/app/&#42;&#42; as all. This variable will used in the select and where clause."
            schema:
              type: string
          - name: params
            in: "query"
            required: false
            description: "A map of parameters an their values to be used in order to execute the query as prepared stament."
            schema:
              type: string
          - name: select
            in: "query"
            required: false
            description: "Selects the attributes / columns / scalars to return. If null or empty, and select all is used."
            schema:
              type: string
          - name: type
            in: "query"
            required: false
            description: "The property type to query for. If null, application/json will be used as default. If set to empty string or &#42; all types will be selected."
            schema:
              type: string
          - name: where
            in: "query"
            required: false
            description: "Defines the WHERE clause in order to filter the result based on the supported filter criteria. The syntax of the criteria depends on the selected query language."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.schema.delete":
    post:
      summary: "Deletes any existing property schema and its assigned value matching the given pattern or key."
      description: |
        Deletes any existing property schema and its assigned value matching the given pattern or key. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.schema.delete' target='_blank'>Search Academy for more details about: <b>property.schema.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.schema.delete:
              key: string
              pattern: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.schema.delete?key=string&pattern=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: key
            in: "query"
            required: true
            description: "Deprecated. Use pattern instead. The exact path key of the property to delete. If property with this key doesnt exist, nothing happens."
            schema:
              type: string
          - name: pattern
            in: "query"
            required: true
            description: "The path key pattern of the single property or the properties to delete. All matching properties will be deleted!"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.schema.put":
    post:
      summary: "Creates or updates a property schema"
      description: |
        Creates or updates a property schema. This command is intended for provisioning, admin and service tasks. Also consider property.put instead. Returns a result JSON indicating the result of the command which usually is one of: create, update or skip. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.schema.put' target='_blank'>Search Academy for more details about: <b>property.schema.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.schema.put:
              attachments: string
              defaultValue: string
              encrypted: boolean
              evalValue: boolean
              existStrategy: string
              finalAction: string
              key: string
              path: string
              retentionStrategy: string
              tags: string
              ttl: number
              type: string
              value: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.schema.put?attachments=string&defaultValue=string&encrypted=boolean&evalValue=boolean&existStrategy=string&finalAction=string&key=string&path=string&retentionStrategy=string&tags=string&ttl=number&type=string&value=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: attachments
            in: "query"
            required: false
            description: "The attachments to be added to this property. Can be a uri or a PEL. Overwrites existing ones."
            schema:
              type: string
          - name: defaultValue
            in: "query"
            required: false
            description: "The default value of the property. May be null."
            schema:
              type: string
          - name: encrypted
            in: "query"
            required: false
            description: "Should the value of this property be stored encrypted? If this is set to true, every time before the property value is saved, it will be auto-encrypted using the default access key. This way you can make sure that the sensitive value is always saved in encrypted format at database layer (at rest). This increases security, but also has some drawbacks. For example: JSON queries are no longer possible then. Auto-decryption is not done for lists. You have to decrypt an encrypted value explicitly by calling property.get. Event payloads for encrypted properties are also sent encrypted only. For example for property.updated event, the payload will be the encrypted value of origin and target."
            schema:
              type: boolean
          - name: evalValue
            in: "query"
            required: false
            description: "If true, the value of the property is evaluated before it is stored. Set this to false in order to store the value as it is without any interpretation."
            schema:
              type: boolean
          - name: existStrategy
            in: "query"
            required: false
            description: "In case a property with given key already exists, uses one of these strategies: update = The property is updated/overwritten by the new data. skip = The property is skipped. Nothing is changed in persistence layer. error = An error is thrown in case property already exists."
            schema:
              type: string
          - name: finalAction
            in: "query"
            required: false
            description: "What should happen with this property finally when pipeline execution has been finished? Available actions: 'persist' (writes the latest state to DB), 'remove' (removes the latest state from DB), null (nothing happens = default)"
            schema:
              type: string
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use path instead. The path key of the property to save. If property with key already exists, it will be updated. Otherwise, a new entry is created."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path key of the property to save. If property with key already exists, it will be updated. Otherwise a new entry is created."
            schema:
              type: string
          - name: retentionStrategy
            in: "query"
            required: false
            description: "The retention strategy is used to decide delete property and it's data, there are two types of strategy (0,1) that decides the deletion.0 = Deletes chunks objects and data from storage if any (keeps property + attachment metadata) 1 = Deletes all (property, attachments, chunks from DB, binary data from storage if any)"
            schema:
              type: string
          - name: tags
            in: "query"
            required: false
            description: "The initial tags to add to this property. Can be a comma separated list of name value pairs, like this name1:value1, name2:value2."
            schema:
              type: string
          - name: ttl
            in: "query"
            required: false
            description: "The time to life of this property in minutes. After this time, the property will be automatically removed from persistence. If null or empty, it wont be deleted. This param is considered only in case a new property is created."
            schema:
              type: number
          - name: type
            in: "query"
            required: false
            description: "The type of the property. One of: STRING, BOOL, INT, LONG, DECIMAL, JSON. This param is considered only in case a new property is created."
            schema:
              type: string
          - name: value
            in: "query"
            required: false
            description: "The value of the property as a preset. May be null."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.search":
    post:
      summary: "Returns all properties of given search criteria."
      description: |
        Returns all properties of given search criteria. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.search' target='_blank'>Search Academy for more details about: <b>property.search</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.search:
              includeTrashed: boolean
              info: boolean
              keyFilter: string
              maxResults: number
              offset: number
              page: number
              pathFilter: string
              typeFilter: string
              valueFilter: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.search?includeTrashed=boolean&info=boolean&keyFilter=string&maxResults=number&offset=number&page=number&pathFilter=string&typeFilter=string&valueFilter=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: includeTrashed
            in: "query"
            required: false
            description: "Include the properties moved to trash bin in the search?"
            schema:
              type: boolean
          - name: info
            in: "query"
            required: false
            description: "If set to true, the result will also include information about the request. This is useful for example for pagination."
            schema:
              type: boolean
          - name: keyFilter
            in: "query"
            required: false
            description: "Deprecated. USe path instead. They key pattern to pre-select the properties to search in."
            schema:
              type: string
          - name: maxResults
            in: "query"
            required: false
            description: "The number of results to return. Note: The maximum is 100 results per call because of performance reasons. In case there are more results, use the offset and pagination to retrieve them. If this parameter is set to a value > 100 it will be reset to 100."
            schema:
              type: number
          - name: offset
            in: "query"
            required: false
            description: "The 0-based offset of the search result to return. If not set, no offset is used."
            schema:
              type: number
          - name: page
            in: "query"
            required: false
            description: "The 1-based index of the page to return. Does the offset calculation automatically. If this param is given, offset will be ignored."
            schema:
              type: number
          - name: pathFilter
            in: "query"
            required: true
            description: "They path pattern to pre-select the properties to search in."
            schema:
              type: string
          - name: typeFilter
            in: "query"
            required: false
            description: "The type of the property. Will find any properties containing this type. This value is case in-sensitive."
            schema:
              type: string
          - name: valueFilter
            in: "query"
            required: false
            description: "The search filter to search inside the value of the properties. This value is case in-sensitive."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.send.delivery":
    post:
      summary: "Sends specified property including attachments as pipeforce delivery."
      description: |
        Sends specified property including attachments as pipeforce delivery. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.send.delivery' target='_blank'>Search Academy for more details about: <b>property.send.delivery</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.send.delivery:
              includeProperty: string
              key: string
              message: string
              model: string
              privacyLevel: string
              recipients: string
              subject: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.send.delivery?includeProperty=string&key=string&message=string&model=string&privacyLevel=string&recipients=string&subject=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: includeProperty
            in: "query"
            required: false
            description: "Specify id to add property value as additional delivery attachment."
            schema:
              type: string
          - name: key
            in: "query"
            required: true
            description: "The key of the property to send."
            schema:
              type: string
          - name: message
            in: "query"
            required: false
            description: "By default, the body is used as email message. If this param is set, it will be used as message instead. Can also be a PE which points to a value to be used as the mail message."
            schema:
              type: string
          - name: model
            in: "query"
            required: false
            description: "The optional model to be used in case point to a template."
            schema:
              type: string
          - name: privacyLevel
            in: "query"
            required: false
            description: "The privacy level to use for delivery. One of L01_URL_ONLY, L02_CREDENTIALS, L03_ENCRYPT, L04_ENCRYPT_ALL with L01_URL_ONLY as default."
            schema:
              type: string
          - name: recipients
            in: "query"
            required: true
            description: "The emails of recipients."
            schema:
              type: string
          - name: subject
            in: "query"
            required: true
            description: "The subject of produced delivery."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.tag.list":
    post:
      summary: "Returns all tags for a given property in the body as JSON: {name1:value1, name2:value2}."
      description: |
        Returns all tags for a given property in the body as JSON: {name1:value1, name2:value2}. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.tag.list' target='_blank'>Search Academy for more details about: <b>property.tag.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.tag.list:
              key: string
              path: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.tag.list?key=string&path=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use path instead. The path key of the property to list the tags for."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path of the property to list the tags for."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.tag.put":
    post:
      summary: "Adds a tag to an existing property. Overwrites any existing one."
      description: |
        Adds a tag to an existing property. Overwrites any existing one. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.tag.put' target='_blank'>Search Academy for more details about: <b>property.tag.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.tag.put:
              key: string
              name: string
              path: string
              tags: string
              value: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.tag.put?key=string&name=string&path=string&tags=string&value=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use path instead. The path key of the property to add the tag to."
            schema:
              type: string
          - name: name
            in: "query"
            required: false
            description: "The name of a single tag to add."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path of the property to add the tag to."
            schema:
              type: string
          - name: tags
            in: "query"
            required: false
            description: "A list of multiple tags to add to the property. Must a be a name-value pair list separated by comma. For example: name1:value1, name2:value2. If no tags are set, nothing happens."
            schema:
              type: string
          - name: value
            in: "query"
            required: false
            description: "The value of a single tag to add. Only used in case tag name is not null."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.value.expression":
    post:
      summary: "Executes the given expression on persisted properties and returns the matching ones"
      description: |
        Executes the given expression on persisted properties and returns the matching ones. This type of search for properties is very powerful since it allows to search on any schemaless structures. But be aware it is low performing on a huge amount of properties. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.value.expression' target='_blank'>Search Academy for more details about: <b>property.value.expression</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.value.expression:
              aggregate: string
              from: string
              includeTrashed: string
              select: string
              where: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.value.expression?aggregate=string&from=string&includeTrashed=string&select=string&where=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: aggregate
            in: "query"
            required: false
            description: "Defines an expression to be applied on the final result. For example to count all values or to transform them. If null or empty, no aggregation will be applied."
            schema:
              type: string
          - name: from
            in: "query"
            required: true
            description: "Specifies the properties to be loaded for the search. Can be a relative or absolute property wildcard key path. For example: 'global/object/invoice/&#42;"
            schema:
              type: string
          - name: includeTrashed
            in: "query"
            required: false
            description: "Should properties moved to trash bin included in this search?"
            schema:
              type: string
          - name: select
            in: "query"
            required: false
            description: "Specifies the attributes of each entity to return in the result set. For example person.firstName here would return a list of first names in the result in case the property has an (JSON) object as value which contains such a field. Can be null or set to '&#42;' to return all fields."
            schema:
              type: string
          - name: where
            in: "query"
            required: false
            description: "Specifies a selection filter to return only the properties those values match the given where filter. For example: invoice.amount > 50 would select only those properties having a field invoice.amount with value bigger than 50. If null, no where filter is applied and all properties values will be selected."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.value.get":
    post:
      summary: "Returns the value of a given property."
      description: |
        Returns the value of a given property. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.value.get' target='_blank'>Search Academy for more details about: <b>property.value.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.value.get:
              decrypt: string
              includeUuidField: string
              key: string
              path: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.value.get?decrypt=string&includeUuidField=string&key=string&path=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: decrypt
            in: "query"
            required: false
            description: "Should the value be auto-decrypted in case it is encrypted? Note: This is only possible, if the value was encrypted using the default encryption. In case this property was not encrypted, nothing happens by setting this to true."
            schema:
              type: string
          - name: includeUuidField
            in: "query"
            required: false
            description: "If the resulting property value is a JSON object, adds the property uuid at first level of the JSON using this value as the key name. Overwrites any existing entry with same name. If this parameter is null or empty, no entry will be added (default). If property is not a JSON, ignores this parameter."
            schema:
              type: string
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use path instead. The key of the property to be returned."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "(default) The path of the property to be returned."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.value.list":
    post:
      summary: "Lists only the values of all matching properties in an array."
      description: |
        Lists only the values of all matching properties in an array. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.value.list' target='_blank'>Search Academy for more details about: <b>property.value.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.value.list:
              includeKeyField: string
              includeUuidField: string
              pattern: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.value.list?includeKeyField=string&includeUuidField=string&pattern=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: includeKeyField
            in: "query"
            required: false
            description: "If the resulting property value is a JSON object, adds the property key at first level of the JSON using this value as the key name. Overwrites any existing entry with same name. If this parameter is null or empty, no entry will be added (default). If property is not a JSON, ignores this parameter."
            schema:
              type: string
          - name: includeUuidField
            in: "query"
            required: false
            description: "If the resulting property value is a JSON object, adds the property uuid at first level of the JSON using this value as the key name. Overwrites any existing entry with same name. If this parameter is null or empty, no entry will be added (default). If property is not a JSON, ignores this parameter."
            schema:
              type: string
          - name: pattern
            in: "query"
            required: false
            description: "The key pattern of the properties to search for. Also supports key pattern matching whereas &#42; matches a single part inside a directory in the key and &#42;&#42; everything. For example '/pipeforce/namespace/user/&#42;&#42;' would return all properties of all users in the given namespace. Also sub levels of this key. To avoid sub-leveling use the &#42; instead: '/pipeforce/namespace/user/&#42;'. This would return /pipeforce/namespace/user/max' but not /pipeforce/namespace/user/max/contracts'."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.value.list.put":
    post:
      summary: "Saves a list of property values by iterating over this list and storing each value separately in the property store"
      description: |
        Saves a list of property values by iterating over this list and storing each value separately in the property store. Each value will be persisted in its own property. The path of this property will be calculated from baseKey/valueOf(primaryKeyField).The property schema for each key must exist in advance (no new properties will be created). <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.value.list.put' target='_blank'>Search Academy for more details about: <b>property.value.list.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.value.list.put:
              baseKey: string
              basePath: string
              ignoreUuidField: string
              iterItemName: string
              primaryKeyField: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.value.list.put?baseKey=string&basePath=string&ignoreUuidField=string&iterItemName=string&primaryKeyField=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: baseKey
            in: "query"
            required: true
            description: "Deprecated. Use basePath instead. The base key (= folder) of the properties to save. At the end of this key path, the primary key will be appended for each value in the list in order to save it in its property."
            schema:
              type: string
          - name: basePath
            in: "query"
            required: true
            description: "The base path (= folder) of the properties to save. At the end of this path, the primary path will be appended for each value in the list in order to save it in its property."
            schema:
              type: string
          - name: ignoreUuidField
            in: "query"
            required: false
            description: "If this parameter contains a non-empty value, and a property value is a JSON type, tries to remove the uuid field with given name, so it is not stored to database. If this parameter is set, but the JSON field doesn't exist or the property value is not a JSON, nothing happens."
            schema:
              type: string
          - name: iterItemName
            in: "query"
            required: false
            description: "Changes the name of the iteration item value, provided for  primaryKeyField"
            schema:
              type: string
          - name: primaryKeyField
            in: "query"
            required: false
            description: "The field name inside each value item which contains the primary key. Can be a string constant or a PEL. If it is a PEL, will be evaluated for each item in the list separately. The PEL has access to variables: headers (= headers of the pipeline), vars (= pipeline variables), body (= body of the pipeline), value (= the current iteration item value about to be saved)."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/property.value.put":
    post:
      summary: "Saves the value of a property"
      description: |
        Saves the value of a property. The property must exist in advance. This command does not allow to change the metadata of a property. If you need to change this, use property.put instead. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=property.value.put' target='_blank'>Search Academy for more details about: <b>property.value.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - property.value.put:
              ignoreUuidField: string
              key: string
              path: string
              value: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/property.value.put?ignoreUuidField=string&key=string&path=string&value=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: ignoreUuidField
            in: "query"
            required: false
            description: "If this parameter contains a non-empty value, and the property value is a JSON type, tries to remove the uuid field with given name, so it is not stored to database. If this parameter is set but the JSON field doesn't exist or the property value is not a JSON, nothing happens."
            schema:
              type: string
          - name: key
            in: "query"
            required: false
            description: "Deprecated. Use path instead. The key of the property to save the value to."
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path key of the property to save the value to."
            schema:
              type: string
          - name: value
            in: "query"
            required: false
            description: "The value of the property to save. May be null or empty."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - property
  "/api/v3/command/provision":
    post:
      summary: "Executes a specific provision script targeted for a namespace."
      description: |
        Executes a specific provision script targeted for a namespace. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=provision' target='_blank'>Search Academy for more details about: <b>provision</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - provision:
              module: string
              path: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/provision?module=string&path=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: module
            in: "query"
            required: false
            description: "Looks in the specific module for provision scripts. Using current namespaceas default value to load a namespace-specific module."
            schema:
              type: string
          - name: path
            in: "query"
            required: false
            description: "Path of the provision script to call. If not specified, uses default path: main.pipe.yaml"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - provision
  "/api/v3/command/publicform.definition":
    post:
      summary: "Returns the form configuration of public form given by id"
      description: |
        Returns the form configuration of public form given by id. The schema path in the config will be automatically resolved and contains finally the resolved schema JSON. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=publicform.definition' target='_blank'>Search Academy for more details about: <b>publicform.definition</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - publicform.definition:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/publicform.definition' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: true
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - publicform
  "/api/v3/command/publicform.submit":
    post:
      summary: "Stores submitted public form data and attachments"
      description: |
        Stores submitted public form data and attachments. All Form definitions are searched for matching id. Additionally form needs to be marked with 'public: true' property. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=publicform.submit' target='_blank'>Search Academy for more details about: <b>publicform.submit</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - publicform.submit:
              value: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/publicform.submit?value=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: value
            in: "query"
            required: true
            description: "The value data of the form as JSON."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: true
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - publicform
  "/api/v3/command/resolve":
    post:
      summary: "Resolves a given PIPEFORCE uri to its content and returns it"
      description: |
        Resolves a given PIPEFORCE uri to its content and returns it. For example $uri:property:global/app/myapp/mydata will return the value of the mydata property. Also see: https://docs.pipeforce.org/docs/api/uris <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=resolve' target='_blank'>Search Academy for more details about: <b>resolve</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - resolve:
              uri: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/resolve?uri=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: uri
            in: "query"
            required: true
            description: "The PIPEFORCE uri of the content to resolve."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - resolve
  "/api/v3/command/resource":
    post:
      summary: "Loads a resource depending on its resource protocol like classpath:, property: or alike."
      description: |
        Loads a resource depending on its resource protocol like classpath:, property: or alike. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=resource' target='_blank'>Search Academy for more details about: <b>resource</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - resource:
              path: string
              uri: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/resource?path=string&uri=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: path
            in: "query"
            required: false
            description: "DEPRECATED. Use uri instead."
            schema:
              type: string
          - name: uri
            in: "query"
            required: true
            description: "The uri path to load the resource from. If it starts with classpath:pipeforce, a lookup in the classpath subfolder pipeforce is done (other locations are not allowed). If it starts with property: a lookup in the property store is done and the result is thevalue of the property if exists."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - resource
  "/api/v3/command/resource.save":
    post:
      summary: "Expects a resource base64 encoded in the body and saves it as a resource to hub."
      description: |
        Expects a resource base64 encoded in the body and saves it as a resource to hub. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=resource.save' target='_blank'>Search Academy for more details about: <b>resource.save</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - resource.save:
              path: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/resource.save?path=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: path
            in: "query"
            required: true
            description: "The path to save the resource to."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - resource
  "/api/v3/command/result.complete":
    post:
      summary: "Completes a processing result"
      description: |
        Completes a processing result. The input to the command will be set as completion value to the result. In case result with given id doesn't exist or was already completed, nothing happens. So calling this completion multiple times has no effect. First one wins. Also using this for polling (by checking for non-existing exception) will not work for performance and security reasons here. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=result.complete' target='_blank'>Search Academy for more details about: <b>result.complete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - result.complete:
              correlationId: string
              value: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/result.complete?correlationId=string&value=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: correlationId
            in: "query"
            required: true
            description: "The id of the result to be completed."
            schema:
              type: string
          - name: value
            in: "query"
            required: false
            description: "The optional value to be set on the result."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - result
  "/api/v3/command/result.delete":
    post:
      summary: "Cancels and deletes a processing result"
      description: |
        Cancels and deletes a processing result. If result doesn't exist or was already cancelled, nothing happens. Will return information about the cancelled task if there was any. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=result.delete' target='_blank'>Search Academy for more details about: <b>result.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - result.delete:
              correlationId: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/result.delete?correlationId=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: correlationId
            in: "query"
            required: true
            description: "The id of the result to be cancelled."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - result
  "/api/v3/command/result.get":
    post:
      summary: "Returns a result from the cache but without the result value. If the result value is required, use polling instead."
      description: |
        Returns a result from the cache but without the result value. If the result value is required, use polling instead. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=result.get' target='_blank'>Search Academy for more details about: <b>result.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - result.get:
              correlationId: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/result.get?correlationId=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: correlationId
            in: "query"
            required: true
            description: "The id of the result to return."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - result
  "/api/v3/command/result.list":
    post:
      summary: "Returns all existing results  (without result values) from cache."
      description: |
        Returns all existing results  (without result values) from cache. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=result.list' target='_blank'>Search Academy for more details about: <b>result.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - result.list:
              status: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/result.list?status=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: status
            in: "query"
            required: false
            description: "Returns all results matching this status. If null or empty, all results in any status will be returned."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - result
  "/api/v3/command/result.put":
    post:
      summary: "Creates a result new result and registers it in the cache."
      description: |
        Creates a result new result and registers it in the cache. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=result.put' target='_blank'>Search Academy for more details about: <b>result.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - result.put:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/result.put' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - result
  "/api/v3/command/rpa.website.close":
    post:
      summary: "Closes website and releases all used resources.Note: The pipe is BETA and not intended to be used in production!"
      description: |
        Closes website and releases all used resources.Note: The pipe is BETA and not intended to be used in production! <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=rpa.website.close' target='_blank'>Search Academy for more details about: <b>rpa.website.close</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - rpa.website.close:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/rpa.website.close' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - rpa
  "/api/v3/command/rpa.website.open":
    post:
      summary: "Opens a website and sets its browser instance as 'vars.browser'. Note: The pipe is BETA and not intended to be used in production!"
      description: |
        Opens a website and sets its browser instance as 'vars.browser'. Note: The pipe is BETA and not intended to be used in production! <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=rpa.website.open' target='_blank'>Search Academy for more details about: <b>rpa.website.open</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - rpa.website.open:
              url: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/rpa.website.open?url=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: url
            in: "query"
            required: true
            description: "The url of the web page to open."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - rpa
  "/api/v3/command/rpa.website.scrap":
    post:
      summary: "Scraps data from the current website and returns the result in the body.Note: The pipe is BETA and not intended to be used in production!"
      description: |
        Scraps data from the current website and returns the result in the body.Note: The pipe is BETA and not intended to be used in production! <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=rpa.website.scrap' target='_blank'>Search Academy for more details about: <b>rpa.website.scrap</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - rpa.website.scrap:
              xpath: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/rpa.website.scrap?xpath=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: xpath
            in: "query"
            required: true
            description: "Executes the given xpath expression on the current page and puts the result in the body. In case the xpath returns more than one results, adds an array to the body. Otherwise the body only contains the single result value."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - rpa
  "/api/v3/command/script.run":
    post:
      summary: "Removed. This command is not longer supported. Consider to use function.run instead."
      description: |
        Removed. This command is not longer supported. Consider to use function.run instead. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=script.run' target='_blank'>Search Academy for more details about: <b>script.run</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - script.run:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/script.run' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - script
  "/api/v3/command/secret.delete":
    post:
      summary: "Deletes a credentials entry."
      description: |
        Deletes a credentials entry. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=secret.delete' target='_blank'>Search Academy for more details about: <b>secret.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - secret.delete:
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/secret.delete?name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: name
            in: "query"
            required: true
            description: "The name of the credentials entry to delete."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - secret
  "/api/v3/command/secret.get":
    post:
      summary: "Lists the metadata (not the secret payload itself) of all available secret entries."
      description: |
        Lists the metadata (not the secret payload itself) of all available secret entries. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=secret.get' target='_blank'>Search Academy for more details about: <b>secret.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - secret.get:
              includeTrashed: string
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/secret.get?includeTrashed=string&name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: includeTrashed
            in: "query"
            required: false
            description: "Also include the secret properties moved to trash bin in the list search?"
            schema:
              type: string
          - name: name
            in: "query"
            required: false
            description: "The name of a single credentials to return. If null or empty, all credentials will be returned."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - secret
  "/api/v3/command/secret.put":
    post:
      summary: "Creates a new credentials entry."
      description: |
        Creates a new credentials entry. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=secret.put' target='_blank'>Search Academy for more details about: <b>secret.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - secret.put:
              format: string
              name: string
              secret: string
              timeToLive: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/secret.put?format=string&name=string&secret=string&timeToLive=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: format
            in: "query"
            required: true
            description: "The format of the secret to store. One of: secret-text, bearer, header, username-password."
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "The unique name of the credentials."
            schema:
              type: string
          - name: secret
            in: "query"
            required: true
            description: "The secret part (for example the username:password or Bearer TOKEN)."
            schema:
              type: string
          - name: timeToLive
            in: "query"
            required: false
            description: "The time to live in minutes. After this time, the credentials will be deleted."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - secret
  "/api/v3/command/secretsend.inbox.auth":
    post:
      summary: "Creates and verifies a magic link download token to access a given inbox transfer."
      description: |
        Creates and verifies a magic link download token to access a given inbox transfer. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=secretsend.inbox.auth' target='_blank'>Search Academy for more details about: <b>secretsend.inbox.auth</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - secretsend.inbox.auth:
              cookieToken: string
              magicToken: string
              outboxUuid: string
              recipientEmail: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/secretsend.inbox.auth?cookieToken=string&magicToken=string&outboxUuid=string&recipientEmail=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: cookieToken
            in: "query"
            required: false
            description: "In order to improve security, set a cookie value in your browser (client) and make sure on second call of this command, the cookie token is read from client and put into this command. This way you can make sure, that the client which sends the magic token is the same as theone who initially requested it. This token is optional."
            schema:
              type: string
          - name: magicToken
            in: "query"
            required: false
            description: "The magic token, sent to the recipient (via email) after he requested it."
            schema:
              type: string
          - name: outboxUuid
            in: "query"
            required: true
            description: "The uuid of the secret send outbox, the user needs access to."
            schema:
              type: string
          - name: recipientEmail
            in: "query"
            required: true
            description: "The email of the recipient to create the token for."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - secretsend
  "/api/v3/command/secretsend.inbox.download":
    post:
      summary: "Downloads the content of an attachment or a group of attachments."
      description: |
        Downloads the content of an attachment or a group of attachments. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=secretsend.inbox.download' target='_blank'>Search Academy for more details about: <b>secretsend.inbox.download</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - secretsend.inbox.download:
              filenames: string
              inboxUuid: string
              outboxUuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/secretsend.inbox.download?filenames=string&inboxUuid=string&outboxUuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: filenames
            in: "query"
            required: false
            description: "A list of one or more attachment filenames to be downloaded (comma separated or PEL list object). If this list is null or empty, all files of the inbox will be downloaded as single zip file. If only one file is defined, this file is downloaded plain. If there is more than one file defined, downloads all of these files as a single zip."
            schema:
              type: string
          - name: inboxUuid
            in: "query"
            required: false
            description: "The uuid of the inbox transfer to return."
            schema:
              type: string
          - name: outboxUuid
            in: "query"
            required: false
            description: "The uuid of the outbox transfer to return."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - secretsend
  "/api/v3/command/secretsend.inbox.get":
    post:
      summary: "Returns an inbox transfer by uuid."
      description: |
        Returns an inbox transfer by uuid. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=secretsend.inbox.get' target='_blank'>Search Academy for more details about: <b>secretsend.inbox.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - secretsend.inbox.get:
              inboxUuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/secretsend.inbox.get?inboxUuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: inboxUuid
            in: "query"
            required: true
            description: "The uuid of the inbox transfer to return."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - secretsend
  "/api/v3/command/secretsend.inbox.list":
    post:
      summary: "Lists all inbox transfers targeted to a given recipient."
      description: |
        Lists all inbox transfers targeted to a given recipient. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=secretsend.inbox.list' target='_blank'>Search Academy for more details about: <b>secretsend.inbox.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - secretsend.inbox.list:
              recipientEmail: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/secretsend.inbox.list?recipientEmail=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: recipientEmail
            in: "query"
            required: false
            description: "The email of the recipient to list the inbox for. If this param is missing, the inboxes for the currently logged-in user will be listed. This parameter can only be set in case the logged-in user has admin, developer or support permissions. Otherwise, an exception is thrown."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - secretsend
  "/api/v3/command/secretsend.outbox.attachment.chunk.put":
    post:
      summary: "Adds a chunk of data to an existing secret send attachment given by outboxUuid and name parameter."
      description: |
        Adds a chunk of data to an existing secret send attachment given by outboxUuid and name parameter. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=secretsend.outbox.attachment.chunk.put' target='_blank'>Search Academy for more details about: <b>secretsend.outbox.attachment.chunk.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - secretsend.outbox.attachment.chunk.put:
              content: string
              index: string
              name: string
              outboxUuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/secretsend.outbox.attachment.chunk.put?content=string&index=string&name=string&outboxUuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: content
            in: "query"
            required: false
            description: "The content to be added to the chunk. If this parameter is null or empty, the input will be used as content instead."
            schema:
              type: string
          - name: index
            in: "query"
            required: false
            description: "The index of the chunk. If given, the content of the chunk at given index is replaced with the new content. If null or empty, a new chunk is added to the attachment."
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "The name of the attachment inside the outbox this chunk belongs to."
            schema:
              type: string
          - name: outboxUuid
            in: "query"
            required: false
            description: "The uuid of the outbox transfer to add the chunk to."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - secretsend
  "/api/v3/command/secretsend.outbox.attachment.delete":
    post:
      summary: "Deletes an attachment from an secret send outbox. Including its content!"
      description: |
        Deletes an attachment from an secret send outbox. Including its content! <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=secretsend.outbox.attachment.delete' target='_blank'>Search Academy for more details about: <b>secretsend.outbox.attachment.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - secretsend.outbox.attachment.delete:
              name: string
              outboxUuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/secretsend.outbox.attachment.delete?name=string&outboxUuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: name
            in: "query"
            required: true
            description: "The name of the attachment to be deleted."
            schema:
              type: string
          - name: outboxUuid
            in: "query"
            required: true
            description: "The uuid of the outbox transfer to delete the attachment from."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - secretsend
  "/api/v3/command/secretsend.outbox.attachment.put":
    post:
      summary: "Creates a new attachment and adds it to the given secret send outbox"
      description: |
        Creates a new attachment and adds it to the given secret send outbox. The content of the attachment is expected to be referenced in the content param or - if empty - in the body. It's also possible to add the content later using the command secretsend.outbox.attachment.chunk.put. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=secretsend.outbox.attachment.put' target='_blank'>Search Academy for more details about: <b>secretsend.outbox.attachment.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - secretsend.outbox.attachment.put:
              content: string
              contentType: string
              length: string
              name: string
              outboxUuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/secretsend.outbox.attachment.put?content=string&contentType=string&length=string&name=string&outboxUuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: content
            in: "query"
            required: false
            description: "The content to add. If null, the data in the body will be added. In case you would like to explicitly set no content at all, set this value to: false."
            schema:
              type: string
          - name: contentType
            in: "query"
            required: false
            description: "The content type to be used for this attachment. In case there is a single content object, this value has precedence over the contentType of the content object, if there is any. In case there are multiple content objects, their contentType do have precedence, if set."
            schema:
              type: string
          - name: length
            in: "query"
            required: false
            description: "The length of the attachment."
            schema:
              type: string
          - name: name
            in: "query"
            required: false
            description: "The name of the attachment to be created. If an attachment with this name already exists, updates the existing one."
            schema:
              type: string
          - name: outboxUuid
            in: "query"
            required: false
            description: "The uuid of the outbox transfer to add the attachment to.If null or empty, a new one will be created."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - secretsend
  "/api/v3/command/secretsend.outbox.delete":
    post:
      summary: "Deletes an outbox transfer."
      description: |
        Deletes an outbox transfer. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=secretsend.outbox.delete' target='_blank'>Search Academy for more details about: <b>secretsend.outbox.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - secretsend.outbox.delete:
              outboxUuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/secretsend.outbox.delete?outboxUuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: outboxUuid
            in: "query"
            required: true
            description: "The uuid of the transfer in the outbox to delete."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - secretsend
  "/api/v3/command/secretsend.outbox.finalize":
    post:
      summary: "Finalizes a given secret send outbox: Creates inboxes for each recipient and sends notification email to each by default."
      description: |
        Finalizes a given secret send outbox: Creates inboxes for each recipient and sends notification email to each by default. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=secretsend.outbox.finalize' target='_blank'>Search Academy for more details about: <b>secretsend.outbox.finalize</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - secretsend.outbox.finalize:
              outboxUuid: string
              sendEmails: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/secretsend.outbox.finalize?outboxUuid=string&sendEmails=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: outboxUuid
            in: "query"
            required: false
            description: "The uuid of the transfer outbox to finalize."
            schema:
              type: string
          - name: sendEmails
            in: "query"
            required: false
            description: "Should the notification emails to the recipients created and send on this finalize?"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - secretsend
  "/api/v3/command/secretsend.outbox.get":
    post:
      summary: "Returns the outbox by given uuid."
      description: |
        Returns the outbox by given uuid. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=secretsend.outbox.get' target='_blank'>Search Academy for more details about: <b>secretsend.outbox.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - secretsend.outbox.get:
              outboxUuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/secretsend.outbox.get?outboxUuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: outboxUuid
            in: "query"
            required: true
            description: "The uuid of the transfer outbox to return."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - secretsend
  "/api/v3/command/secretsend.outbox.list":
    post:
      summary: "Lists all outbox transfer items created by the currently logged-in user."
      description: |
        Lists all outbox transfer items created by the currently logged-in user. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=secretsend.outbox.list' target='_blank'>Search Academy for more details about: <b>secretsend.outbox.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - secretsend.outbox.list:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/secretsend.outbox.list' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - secretsend
  "/api/v3/command/secretsend.outbox.preview":
    post:
      summary: "Returns the preview for a given outbox, if supported by security settings."
      description: |
        Returns the preview for a given outbox, if supported by security settings. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=secretsend.outbox.preview' target='_blank'>Search Academy for more details about: <b>secretsend.outbox.preview</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - secretsend.outbox.preview:
              outboxUuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/secretsend.outbox.preview?outboxUuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: outboxUuid
            in: "query"
            required: false
            description: "The uuid of the outbox transfer to return."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - secretsend
  "/api/v3/command/secretsend.outbox.put":
    post:
      summary: "Creates or updates a PIPEFORCE Secret Send with DRAFT status and saves it."
      description: |
        Creates or updates a PIPEFORCE Secret Send with DRAFT status and saves it. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=secretsend.outbox.put' target='_blank'>Search Academy for more details about: <b>secretsend.outbox.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - secretsend.outbox.put:
              expiresOn: string
              locale: string
              message: string
              notifySender: string
              notifySenderEmailReceipt: string
              outboxUuid: string
              recipients: string
              retentionStrategy: string
              subject: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/secretsend.outbox.put?expiresOn=string&locale=string&message=string&notifySender=string&notifySenderEmailReceipt=string&outboxUuid=string&recipients=string&retentionStrategy=string&subject=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: expiresOn
            in: "query"
            required: false
            description: "Delete the transfer attachments after this date and time given as unix timestamp in millis. If null, empty, 0 or negative, delivery will never be deleted."
            schema:
              type: string
          - name: locale
            in: "query"
            required: false
            description: "The locale to be used for this secret send system message and number formats (examples: de_DE, de, en_US, ...). If null, the system default one will be used."
            schema:
              type: string
          - name: message
            in: "query"
            required: false
            description: "The message of the transfer or null (in order to set it later)"
            schema:
              type: string
          - name: notifySender
            in: "query"
            required: false
            description: "If true, notifies sender when recipients have downloaded delivery."
            schema:
              type: string
          - name: notifySenderEmailReceipt
            in: "query"
            required: false
            description: "If true, notifies receipt email to the sender when mail has been sent to recipients"
            schema:
              type: string
          - name: outboxUuid
            in: "query"
            required: false
            description: "The uuid of the transfer in the outbox to update. If null or empty, a new one will be created."
            schema:
              type: string
          - name: recipients
            in: "query"
            required: false
            description: "A comma separated list of email recipients or null (in order to add it later). Also PEL is supported here."
            schema:
              type: string
          - name: retentionStrategy
            in: "query"
            required: false
            description: "The retention strategy is used to decide delete property and it's data, there are two types of strategy (0,1) that decides the deletion.0 = Deletes chunks objects and data from storage if any (keeps property + attachment metadata) 1 = Deletes all (property, attachments, chunks from DB, binary data from storage if any)"
            schema:
              type: string
          - name: subject
            in: "query"
            required: false
            description: "The subject of the transfer or null (in order to set it later)."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - secretsend
  "/api/v3/command/secretsend.outbox.recipient.delete":
    post:
      summary: "Removes a recipient from a given secret send outbox. Note: This is only possible in case this transfer is in status DRAFT."
      description: |
        Removes a recipient from a given secret send outbox. Note: This is only possible in case this transfer is in status DRAFT. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=secretsend.outbox.recipient.delete' target='_blank'>Search Academy for more details about: <b>secretsend.outbox.recipient.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - secretsend.outbox.recipient.delete:
              outboxUuid: string
              recipientEmail: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/secretsend.outbox.recipient.delete?outboxUuid=string&recipientEmail=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: outboxUuid
            in: "query"
            required: true
            description: "The uuid of the transfer outbox to add the recipient to."
            schema:
              type: string
          - name: recipientEmail
            in: "query"
            required: true
            description: "The email of the recipient to add."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - secretsend
  "/api/v3/command/secretsend.outbox.recipient.email.send":
    post:
      summary: "(Re-) sends the secret send notification email to the recipient."
      description: |
        (Re-) sends the secret send notification email to the recipient. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=secretsend.outbox.recipient.email.send' target='_blank'>Search Academy for more details about: <b>secretsend.outbox.recipient.email.send</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - secretsend.outbox.recipient.email.send:
              outboxUuid: string
              recipientEmail: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/secretsend.outbox.recipient.email.send?outboxUuid=string&recipientEmail=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: outboxUuid
            in: "query"
            required: true
            description: "The uuid of the outbox item."
            schema:
              type: string
          - name: recipientEmail
            in: "query"
            required: true
            description: "The email of the recipient to send the notification to."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - secretsend
  "/api/v3/command/secretsend.outbox.recipient.put":
    post:
      summary: "Adds a new recipient to a secret send"
      description: |
        Adds a new recipient to a secret send. If a recipient with given email already exists, nothing happens. Updating an existing recipient is not yet supported. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=secretsend.outbox.recipient.put' target='_blank'>Search Academy for more details about: <b>secretsend.outbox.recipient.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - secretsend.outbox.recipient.put:
              enabled: string
              outboxUuid: string
              recipientEmail: string
              recipientLocale: string
              sendEmail: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/secretsend.outbox.recipient.put?enabled=string&outboxUuid=string&recipientEmail=string&recipientLocale=string&sendEmail=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: enabled
            in: "query"
            required: false
            description: "Is the recipient enabled = can download the transfer?"
            schema:
              type: string
          - name: outboxUuid
            in: "query"
            required: true
            description: "The uuid of the transfer outbox to add the recipient to."
            schema:
              type: string
          - name: recipientEmail
            in: "query"
            required: true
            description: "The email of the recipient to add."
            schema:
              type: string
          - name: recipientLocale
            in: "query"
            required: false
            description: "The locale to be used for this recipient like de, en or fr for example."
            schema:
              type: string
          - name: sendEmail
            in: "query"
            required: false
            description: "Should be an email sent to the recipient?"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - secretsend
  "/api/v3/command/server.info":
    post:
      summary: "Returns information about the current server"
      description: |
        Returns information about the current server. For example the version it is running under. Returns a flat JSON with these keys: status, namespace, domain, edition, stage, tag, build, version, versionMajor, versionMinor, versionBugfix <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=server.info' target='_blank'>Search Academy for more details about: <b>server.info</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - server.info:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/server.info' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - server
  "/api/v3/command/service.job.logs":
    post:
      summary: "Returns the logs of a service job in the cluster."
      description: |
        Returns the logs of a service job in the cluster. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=service.job.logs' target='_blank'>Search Academy for more details about: <b>service.job.logs</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - service.job.logs:
              credentials: string
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/service.job.logs?credentials=string&name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: name
            in: "query"
            required: false
            description: "The name of the service job."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - service
  "/api/v3/command/service.job.start":
    post:
      summary: "Starts a new service job in the cluster. The job runs async. Use service.job.status and service.job.logs to check the result of the job."
      description: |
        Starts a new service job in the cluster. The job runs async. Use service.job.status and service.job.logs to check the result of the job. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=service.job.start' target='_blank'>Search Academy for more details about: <b>service.job.start</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - service.job.start:
              args: string
              command: string
              credentials: string
              env: string
              image: string
              imagePullPolicy: string
              imagePullSecret: string
              name: string
              replace: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/service.job.start?args=string&command=string&credentials=string&env=string&image=string&imagePullPolicy=string&imagePullSecret=string&name=string&replace=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: args
            in: "query"
            required: false
            description: "The list of args to be passed on to the service job container."
            schema:
              type: string
          - name: command
            in: "query"
            required: false
            description: "The list of command to execute on the service job container."
            schema:
              type: string
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: env
            in: "query"
            required: false
            description: "Environment variables to be applied to the job service container. Can contain 'secret-text' secret references with value like '$uri:secret:secretTextName', '$uri:webhook:token:keyToResolve'."
            schema:
              type: string
          - name: image
            in: "query"
            required: false
            description: "The repo path of the image to be deployed. In case the image name starts with prefix 'pipeforce-registry/' the image will be loaded from the default PIPEFORCE registry for this namespace."
            schema:
              type: string
          - name: imagePullPolicy
            in: "query"
            required: false
            description: "The policy how to handle non existing image. Can be one of: Always (pull image always from registry, to get latest), IfNotPresent (pull image from registry if not present), Never (pull image never from registry)."
            schema:
              type: string
          - name: imagePullSecret
            in: "query"
            required: false
            description: "The optional name of the registry secret to be used in case it is a private registry."
            schema:
              type: string
          - name: name
            in: "query"
            required: false
            description: "The name of the service job."
            schema:
              type: string
          - name: replace
            in: "query"
            required: false
            description: "If true, an existing job with same name will be deleted before this new one is created. If false, an exception is thrown in case a job with same name already exists."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - service
  "/api/v3/command/service.job.status":
    post:
      summary: "Returns the status of a service job in the cluster."
      description: |
        Returns the status of a service job in the cluster. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=service.job.status' target='_blank'>Search Academy for more details about: <b>service.job.status</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - service.job.status:
              credentials: string
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/service.job.status?credentials=string&name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: name
            in: "query"
            required: false
            description: "The name of the service job."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - service
  "/api/v3/command/service.job.stop":
    post:
      summary: "Stops a service job in the cluster even if it is not finished yet."
      description: |
        Stops a service job in the cluster even if it is not finished yet. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=service.job.stop' target='_blank'>Search Academy for more details about: <b>service.job.stop</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - service.job.stop:
              credentials: string
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/service.job.stop?credentials=string&name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: name
            in: "query"
            required: false
            description: "The name of the service job."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - service
  "/api/v3/command/service.start":
    post:
      summary: "Starts a new microservice in the cluster."
      description: |
        Starts a new microservice in the cluster. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=service.start' target='_blank'>Search Academy for more details about: <b>service.start</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - service.start:
              args: string
              command: string
              credentials: string
              env: string
              image: string
              imagePullPolicy: string
              imagePullSecret: string
              ingress: boolean
              name: string
              port: number
              replicas: string
              volumes: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/service.start?args=string&command=string&credentials=string&env=string&image=string&imagePullPolicy=string&imagePullSecret=string&ingress=boolean&name=string&port=number&replicas=string&volumes=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: args
            in: "query"
            required: false
            description: "The list of args to be passed on to the service container."
            schema:
              type: string
          - name: command
            in: "query"
            required: false
            description: "The list of command to execute on the service container."
            schema:
              type: string
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: env
            in: "query"
            required: false
            description: "Map of environment variables to be applied to the service container. Can contain 'secret-text' secret references with value like '$uri:secret:secretTextName' or webhook references like '$uri:webhook:eventKey' which will be resolved and passed to the container."
            schema:
              type: string
          - name: image
            in: "query"
            required: false
            description: "The repo path of the image to be deployed. If empty, no image will be deployed (just the service slot created). In case the image name starts with prefix 'pipeforce-registry/' the image will be loaded from the default PIPEFORCE registry for this namespace."
            schema:
              type: string
          - name: imagePullPolicy
            in: "query"
            required: false
            description: "The policy how to handle non existing image. Can be one of: Always (pull image always from registry, to get latest), IfNotPresent (pull image from registry if not present), Never (pull image never from registry)."
            schema:
              type: string
          - name: imagePullSecret
            in: "query"
            required: false
            description: "The optional name of the registry secret to be used in case it is a private registry."
            schema:
              type: string
          - name: ingress
            in: "query"
            required: false
            description: "Expose the given port of the service to the internet? The service is then reachable via HTTPS using the url https://[serviceName]-[namespace].pipeforce.net."
            schema:
              type: boolean
          - name: name
            in: "query"
            required: false
            description: "The name of the service."
            schema:
              type: string
          - name: port
            in: "query"
            required: false
            description: "The port the running service accepts requests."
            schema:
              type: number
          - name: replicas
            in: "query"
            required: false
            description: "The number of stateless replicas (= scaling instances) of this service to be started in parallel in the cluster by default."
            schema:
              type: string
          - name: volumes
            in: "query"
            required: false
            description: "The list of paths inside the container to mount to persisted volumes. This will automatically create a persistent volume and stores the data in the given paths to this volume. By default, the volume will be kept even on stop and start of the container. See service.stop command."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - service
  "/api/v3/command/service.status":
    post:
      summary: "Returns the status info of the given PIPEFORCE managed service."
      description: |
        Returns the status info of the given PIPEFORCE managed service. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=service.status' target='_blank'>Search Academy for more details about: <b>service.status</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - service.status:
              credentials: string
              format: string
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/service.status?credentials=string&format=string&name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: format
            in: "query"
            required: false
            description: "The format of the status output: How much status information must be returned? Can be one of compact, normal, full."
            schema:
              type: string
          - name: name
            in: "query"
            required: false
            description: "Name of the service. If null or empty, the status of all PIPEFORCE managed services in current namespace will be returned."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - service
  "/api/v3/command/service.stop":
    post:
      summary: "Stops a microservice from the cluster."
      description: |
        Stops a microservice from the cluster. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=service.stop' target='_blank'>Search Academy for more details about: <b>service.stop</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - service.stop:
              credentials: string
              deleteVolumes: string
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/service.stop?credentials=string&deleteVolumes=string&name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: deleteVolumes
            in: "query"
            required: false
            description: "If set to true, any volume declared on service.start will be deleted."
            schema:
              type: string
          - name: name
            in: "query"
            required: false
            description: "The name of the microservice to be stopped."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - service
  "/api/v3/command/set":
    post:
      summary: "Sets a value in the pipe message. The value to be set can be a constant or an expression."
      description: |
        Sets a value in the pipe message. The value to be set can be a constant or an expression. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=set' target='_blank'>Search Academy for more details about: <b>set</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - set:
              mapping: string
              to: string
              value: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/set?mapping=string&to=string&value=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: mapping
            in: "query"
            required: false
            description: "A list of mapping rules to be applied to the given input value."
            schema:
              type: string
          - name: to
            in: "query"
            required: false
            description: "DEPRECATED. Use param output instead."
            schema:
              type: string
          - name: value
            in: "query"
            required: true
            description: "(default) A string or an expression to be used as the value to be set."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - set
  "/api/v3/command/sftp.delete":
    post:
      summary: "Deletes a file or folder on the SFTP server."
      description: |
        Deletes a file or folder on the SFTP server. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=sftp.delete' target='_blank'>Search Academy for more details about: <b>sftp.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - sftp.delete:
              credentials: string
              host: string
              password: string
              path: string
              port: string
              secret: string
              username: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/sftp.delete?credentials=string&host=string&password=string&path=string&port=string&secret=string&username=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: host
            in: "query"
            required: false
            description: "The host"
            schema:
              type: string
          - name: password
            in: "query"
            required: false
            description: "The password"
            schema:
              type: string
          - name: path
            in: "query"
            required: false
            description: "The path to the file or folder to delete. If path ends with / a folder is expected to be deleted."
            schema:
              type: string
          - name: port
            in: "query"
            required: false
            description: "The port"
            schema:
              type: string
          - name: secret
            in: "query"
            required: false
            description: "Refers to the name of a stored secret entry to be used by this command. If not null, all other credentials parameters are ignored if there exists any."
            schema:
              type: string
          - name: username
            in: "query"
            required: false
            description: "The username"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - sftp
  "/api/v3/command/sftp.download":
    post:
      summary: "Downloads a file from a SFTP server. The file is written as content object to output."
      description: |
        Downloads a file from a SFTP server. The file is written as content object to output. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=sftp.download' target='_blank'>Search Academy for more details about: <b>sftp.download</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - sftp.download:
              credentials: string
              host: string
              password: string
              path: string
              port: string
              secret: string
              username: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/sftp.download?credentials=string&host=string&password=string&path=string&port=string&secret=string&username=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: host
            in: "query"
            required: false
            description: "The host"
            schema:
              type: string
          - name: password
            in: "query"
            required: false
            description: "The password"
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path of the file to download."
            schema:
              type: string
          - name: port
            in: "query"
            required: false
            description: "The port"
            schema:
              type: string
          - name: secret
            in: "query"
            required: false
            description: "Refers to the name of a stored secret entry to be used by this command. If not null, all other credentials parameters are ignored if there exists any."
            schema:
              type: string
          - name: username
            in: "query"
            required: false
            description: "The username"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - sftp
  "/api/v3/command/sftp.list":
    post:
      summary: "Lists files of a given folder. If not filter parameter is used all files are returned. The result is written to output."
      description: |
        Lists files of a given folder. If not filter parameter is used all files are returned. The result is written to output. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=sftp.list' target='_blank'>Search Academy for more details about: <b>sftp.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - sftp.list:
              credentials: string
              filter: string
              host: string
              password: string
              path: string
              port: string
              secret: string
              username: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/sftp.list?credentials=string&filter=string&host=string&password=string&path=string&port=string&secret=string&username=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: filter
            in: "query"
            required: false
            description: "The filter to apply to files list. '?' - match one character, '&#42;' - match zero o more characters, '&#92;&#42;' to match '&#42;' in filename"
            schema:
              type: string
          - name: host
            in: "query"
            required: false
            description: "The host"
            schema:
              type: string
          - name: password
            in: "query"
            required: false
            description: "The password"
            schema:
              type: string
          - name: path
            in: "query"
            required: false
            description: "The path to the folder to list."
            schema:
              type: string
          - name: port
            in: "query"
            required: false
            description: "The port"
            schema:
              type: string
          - name: secret
            in: "query"
            required: false
            description: "Refers to the name of a stored secret entry to be used by this command. If not null, all other credentials parameters are ignored if there exists any."
            schema:
              type: string
          - name: username
            in: "query"
            required: false
            description: "The username"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - sftp
  "/api/v3/command/sftp.mkdir":
    post:
      summary: "Creates a new directory on the SFTP server."
      description: |
        Creates a new directory on the SFTP server. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=sftp.mkdir' target='_blank'>Search Academy for more details about: <b>sftp.mkdir</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - sftp.mkdir:
              credentials: string
              host: string
              password: string
              path: string
              port: string
              secret: string
              username: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/sftp.mkdir?credentials=string&host=string&password=string&path=string&port=string&secret=string&username=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: host
            in: "query"
            required: false
            description: "The host"
            schema:
              type: string
          - name: password
            in: "query"
            required: false
            description: "The password"
            schema:
              type: string
          - name: path
            in: "query"
            required: true
            description: "The path where to create the folder."
            schema:
              type: string
          - name: port
            in: "query"
            required: false
            description: "The port"
            schema:
              type: string
          - name: secret
            in: "query"
            required: false
            description: "Refers to the name of a stored secret entry to be used by this command. If not null, all other credentials parameters are ignored if there exists any."
            schema:
              type: string
          - name: username
            in: "query"
            required: false
            description: "The username"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - sftp
  "/api/v3/command/sftp.rename":
    post:
      summary: "Renames a file or folder on the SFTP server."
      description: |
        Renames a file or folder on the SFTP server. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=sftp.rename' target='_blank'>Search Academy for more details about: <b>sftp.rename</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - sftp.rename:
              credentials: string
              fromPath: string
              host: string
              password: string
              port: string
              secret: string
              toPath: string
              username: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/sftp.rename?credentials=string&fromPath=string&host=string&password=string&port=string&secret=string&toPath=string&username=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: fromPath
            in: "query"
            required: false
            description: "The origin path to the resource to rename."
            schema:
              type: string
          - name: host
            in: "query"
            required: false
            description: "The host"
            schema:
              type: string
          - name: password
            in: "query"
            required: false
            description: "The password"
            schema:
              type: string
          - name: port
            in: "query"
            required: false
            description: "The port"
            schema:
              type: string
          - name: secret
            in: "query"
            required: false
            description: "Refers to the name of a stored secret entry to be used by this command. If not null, all other credentials parameters are ignored if there exists any."
            schema:
              type: string
          - name: toPath
            in: "query"
            required: false
            description: "The new path / name of the resource."
            schema:
              type: string
          - name: username
            in: "query"
            required: false
            description: "The username"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - sftp
  "/api/v3/command/sftp.upload":
    post:
      summary: "Uploads a file to a SFTP server. The file is expected to be in the input."
      description: |
        Uploads a file to a SFTP server. The file is expected to be in the input. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=sftp.upload' target='_blank'>Search Academy for more details about: <b>sftp.upload</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - sftp.upload:
              credentials: string
              host: string
              password: string
              path: string
              port: string
              secret: string
              username: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/sftp.upload?credentials=string&host=string&password=string&path=string&port=string&secret=string&username=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: credentials
            in: "query"
            required: false
            description: "DEPRECATED. Use param secret instead."
            schema:
              type: string
          - name: host
            in: "query"
            required: false
            description: "The host"
            schema:
              type: string
          - name: password
            in: "query"
            required: false
            description: "The password"
            schema:
              type: string
          - name: path
            in: "query"
            required: false
            description: "The path to upload to. If this ends with a slash / it is expected to be a folder name. The file name will be attached from the input file which must be a content object in this case."
            schema:
              type: string
          - name: port
            in: "query"
            required: false
            description: "The port"
            schema:
              type: string
          - name: secret
            in: "query"
            required: false
            description: "Refers to the name of a stored secret entry to be used by this command. If not null, all other credentials parameters are ignored if there exists any."
            schema:
              type: string
          - name: username
            in: "query"
            required: false
            description: "The username"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - sftp
  "/api/v3/command/sharepoint.document.get":
    post:
      summary: "To download file from sharepoint."
      description: |
        To download file from sharepoint. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=sharepoint.document.get' target='_blank'>Search Academy for more details about: <b>sharepoint.document.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - sharepoint.document.get:
              path: string
              secret: string
              site: string
              tenantId: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/sharepoint.document.get?path=string&secret=string&site=string&tenantId=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: path
            in: "query"
            required: false
            description: "This path contains the folder path in sharepoint site where user want to upload file"
            schema:
              type: string
          - name: secret
            in: "query"
            required: false
            description: "This is the name of secret that has been setup in Secret module (the secret must contain client_id, client_secret)"
            schema:
              type: string
          - name: site
            in: "query"
            required: false
            description: "This is the name of site in sharepoint where user want to upload file in the site folder."
            schema:
              type: string
          - name: tenantId
            in: "query"
            required: false
            description: "Tenant Id of the sharepoint site"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - sharepoint
  "/api/v3/command/sharepoint.document.mkdir":
    post:
      summary: "To upload file to sharepoint."
      description: |
        To upload file to sharepoint. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=sharepoint.document.mkdir' target='_blank'>Search Academy for more details about: <b>sharepoint.document.mkdir</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - sharepoint.document.mkdir:
              path: string
              secret: string
              site: string
              tenantId: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/sharepoint.document.mkdir?path=string&secret=string&site=string&tenantId=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: path
            in: "query"
            required: false
            description: "This path contains the folder path in sharepoint site where user want to upload file"
            schema:
              type: string
          - name: secret
            in: "query"
            required: false
            description: "This is the name of secret that has been setup in Secret module (the secret must contain client_id, client_secret)"
            schema:
              type: string
          - name: site
            in: "query"
            required: false
            description: "This is the name of site in sharepoint where user want to upload file in the site folder."
            schema:
              type: string
          - name: tenantId
            in: "query"
            required: false
            description: "Tenant Id of the sharepoint site"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - sharepoint
  "/api/v3/command/sharepoint.document.put":
    post:
      summary: "To upload file to sharepoint."
      description: |
        To upload file to sharepoint. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=sharepoint.document.put' target='_blank'>Search Academy for more details about: <b>sharepoint.document.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - sharepoint.document.put:
              path: string
              secret: string
              site: string
              tenantId: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/sharepoint.document.put?path=string&secret=string&site=string&tenantId=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: path
            in: "query"
            required: false
            description: "This path contains the folder path in sharepoint site where user want to upload file"
            schema:
              type: string
          - name: secret
            in: "query"
            required: false
            description: "This is the name of secret that has been setup in Secret module (the secret must contain client_id, client_secret)"
            schema:
              type: string
          - name: site
            in: "query"
            required: false
            description: "This is the name of site in sharepoint where user want to upload file in the site folder."
            schema:
              type: string
          - name: tenantId
            in: "query"
            required: false
            description: "Tenant Id of the sharepoint site"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - sharepoint
  "/api/v3/command/slack.send":
    post:
      summary: "Sends a text message via webhook url to Slack. Also see: https://api.slack.com/messaging/webhooks"
      description: |
        Sends a text message via webhook url to Slack. Also see: https://api.slack.com/messaging/webhooks <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=slack.send' target='_blank'>Search Academy for more details about: <b>slack.send</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - slack.send:
              text: string
              url: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/slack.send?text=string&url=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: text
            in: "query"
            required: true
            description: "The text message to be send to Slack."
            schema:
              type: string
          - name: url
            in: "query"
            required: true
            description: "The Slack webhook url to post the message to. See here to generate one: https://api.slack.com/messaging/webhooks"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - slack
  "/api/v3/command/sql.query":
    post:
      summary: "Executes a (read-only) SQL query and returns the result as JSON in the body"
      description: |
        Executes a (read-only) SQL query and returns the result as JSON in the body. NOTE: This command is primarily meant for developers and admins to monitor the system. It should not be used in production workflows! It can change at any time without notice! <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=sql.query' target='_blank'>Search Academy for more details about: <b>sql.query</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - sql.query:
              columnField: string
              columnName: string
              dataField: string
              datasource: string
              query: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/sql.query?columnField=string&columnName=string&dataField=string&datasource=string&query=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: columnField
            in: "query"
            required: false
            description: "If given, places the column names inside a separate property with this name."
            schema:
              type: string
          - name: columnName
            in: "query"
            required: false
            description: "How to add the column names. Possible values are inline = with each value, none = No column names at all. Any other value will be interpreted to add the column names in a separate property having exactly this individual name."
            schema:
              type: string
          - name: dataField
            in: "query"
            required: false
            description: "If given, places the data inside a separate property with this name."
            schema:
              type: string
          - name: datasource
            in: "query"
            required: false
            description: "The name of the datasource to be used."
            schema:
              type: string
          - name: query
            in: "query"
            required: false
            description: "The SQL query to be executed."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - sql
  "/api/v3/command/stats":
    post:
      summary: "Returns basic status information about the hub service."
      description: |
        Returns basic status information about the hub service. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=stats' target='_blank'>Search Academy for more details about: <b>stats</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - stats:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/stats' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - stats
  "/api/v3/command/switch":
    post:
      summary: "Evaluates each switch statement"
      description: |
        Evaluates each switch statement. Takes the value part of the first match and writes it to the given output. If no output is given, writes it to the body. Any param key will be the selection expression which needs to evaluate to a boolean true or false and any value will be the selected value. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=switch' target='_blank'>Search Academy for more details about: <b>switch</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - switch:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/switch' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - switch
  "/api/v3/command/terms.delete":
    post:
      summary: "Deletes a terms by its name."
      description: |
        Deletes a terms by its name. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=terms.delete' target='_blank'>Search Academy for more details about: <b>terms.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - terms.delete:
              locale: string
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/terms.delete?locale=string&name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: locale
            in: "query"
            required: false
            description: "The locale of the terms to delete."
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "The name of the terms to delete."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - terms
  "/api/v3/command/terms.get":
    post:
      summary: "Returns a terms by its name and locale."
      description: |
        Returns a terms by its name and locale. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=terms.get' target='_blank'>Search Academy for more details about: <b>terms.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - terms.get:
              locale: string
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/terms.get?locale=string&name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: locale
            in: "query"
            required: false
            description: "The locale of the terms to return. If this param missing, the default locale will be used."
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "The name of the terms to return."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - terms
  "/api/v3/command/terms.list":
    post:
      summary: "Returns all terms. The name and and locale, each. But not the text."
      description: |
        Returns all terms. The name and and locale, each. But not the text. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=terms.list' target='_blank'>Search Academy for more details about: <b>terms.list</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - terms.list:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/terms.list' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - terms
  "/api/v3/command/terms.put":
    post:
      summary: "Adds a new terms entry to the property store."
      description: |
        Adds a new terms entry to the property store. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=terms.put' target='_blank'>Search Academy for more details about: <b>terms.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - terms.put:
              locale: string
              name: string
              system: string
              text: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/terms.put?locale=string&name=string&system=string&text=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: locale
            in: "query"
            required: false
            description: "The locale of the terms"
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "The name of the terms"
            schema:
              type: string
          - name: system
            in: "query"
            required: false
            description: "Is it a system term? Attention: Cannot be deleted via commands!"
            schema:
              type: string
          - name: text
            in: "query"
            required: false
            description: "The terms text. If this parameter is missing, the value from the body will be used."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - terms
  "/api/v3/command/terms.text.get":
    post:
      summary: "Returns the terms text by its name and locale."
      description: |
        Returns the terms text by its name and locale. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=terms.text.get' target='_blank'>Search Academy for more details about: <b>terms.text.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - terms.text.get:
              locale: string
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/terms.text.get?locale=string&name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: locale
            in: "query"
            required: false
            description: "The locale of the terms to return."
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "The name of the terms to return."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - terms
  "/api/v3/command/test.run":
    post:
      summary: "Runs all test scripts defined by given pattern asynchronously."
      description: |
        Runs all test scripts defined by given pattern asynchronously. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=test.run' target='_blank'>Search Academy for more details about: <b>test.run</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - test.run:
              dryRun: string
              dryRunSleep: string
              functionExcludePattern: string
              functionIncludePattern: string
              locations: string
              reportFormat: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/test.run?dryRun=string&dryRunSleep=string&functionExcludePattern=string&functionIncludePattern=string&locations=string&reportFormat=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: dryRun
            in: "query"
            required: false
            description: "If true, this command will return a simulated failed test report without executing real tests. This is mainly for development and integration tasks in order to make sure such integrations work as expected."
            schema:
              type: string
          - name: dryRunSleep
            in: "query"
            required: false
            description: "The time to sleep in ms before the dryRun starts. This is mainly for testing purposes only."
            schema:
              type: string
          - name: functionExcludePattern
            in: "query"
            required: false
            description: "A PE which defines the test functions to be excluded from the list of included test functions. The function method name is provided as variable: functionName. By default all test functions, ending in IT will be ignored."
            schema:
              type: string
          - name: functionIncludePattern
            in: "query"
            required: false
            description: "A PE which defines the test functions to be included. The selected method name is provided as variable: functionName."
            schema:
              type: string
          - name: locations
            in: "query"
            required: false
            description: "A single or a list of location patterns, selecting all test scripts in the property store to be selected for test runs."
            schema:
              type: string
          - name: reportFormat
            in: "query"
            required: false
            description: "The format of the resulting test report. Possible values: json (default), junit"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - test
  "/api/v3/command/theme":
    post:
      summary: "Returns the resources for a given theme in the body and enrich headers with appropriate Content-type. Caches the resources where applicable."
      description: |
        Returns the resources for a given theme in the body and enrich headers with appropriate Content-type. Caches the resources where applicable. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=theme' target='_blank'>Search Academy for more details about: <b>theme</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - theme:
              clearCache: boolean
              contentType: string
              name: string
              ref: string
              resource: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/theme?clearCache=boolean&contentType=string&name=string&ref=string&resource=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: clearCache
            in: "query"
            required: false
            description: "If true, the current theme cache is cleared."
            schema:
              type: boolean
          - name: contentType
            in: "query"
            required: false
            description: "The content type to be returned as fallback in case there is none defined at backend side for the requested resource. If this param is missing, it will be tried to guess the type automatically. If the type could not be guessed, returns application/octet-stream by default."
            schema:
              type: string
          - name: name
            in: "query"
            required: false
            description: "The name of the theme. If not given, the default theme will be used as configured."
            schema:
              type: string
          - name: ref
            in: "query"
            required: false
            description: "The optional referrer id to this resource request."
            schema:
              type: string
          - name: resource
            in: "query"
            required: true
            description: "The name of resource to be loaded. If it starts with a slash / tries to load the resource from the default location with given name. If resource is one of the default names like: background, logo, pipeforce-logo, tries to load the default resource for these names. If null or invalid value, falls back to default value."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - theme
  "/api/v3/command/tracing.operations":
    post:
      summary: "Returns a list of all operation names tracked in tracing data of a given service."
      description: |
        Returns a list of all operation names tracked in tracing data of a given service. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=tracing.operations' target='_blank'>Search Academy for more details about: <b>tracing.operations</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - tracing.operations:
              service: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/tracing.operations?service=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: service
            in: "query"
            required: false
            description: "The service to search for operations."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - tracing
  "/api/v3/command/tracing.search":
    post:
      summary: "Searches the distributed trace logs for matches."
      description: |
        Searches the distributed trace logs for matches. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=tracing.search' target='_blank'>Search Academy for more details about: <b>tracing.search</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - tracing.search:
              end: string
              limit: string
              maxDuration: string
              minDuration: string
              operation: string
              service: string
              start: string
              tags: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/tracing.search?end=string&limit=string&maxDuration=string&minDuration=string&operation=string&service=string&start=string&tags=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: end
            in: "query"
            required: false
            description: "The time to end tracing search in unix timestamp millis. TODO: Also support lookback times like: -2d (= 2 days before current time)."
            schema:
              type: string
          - name: limit
            in: "query"
            required: false
            description: "The number of traces to return per call. Maximum is 1500."
            schema:
              type: string
          - name: maxDuration
            in: "query"
            required: false
            description: "The filter for max duration of traces to be returned (ms, s, m, h). Example: 12s"
            schema:
              type: string
          - name: minDuration
            in: "query"
            required: false
            description: "The filter for min duration of traces to be returned (ms, s, m, h). Example: 5ms"
            schema:
              type: string
          - name: operation
            in: "query"
            required: false
            description: "The operation to apply as filter. If null or empty, all operations will be returned."
            schema:
              type: string
          - name: service
            in: "query"
            required: false
            description: "The service to search for distributed traces."
            schema:
              type: string
          - name: start
            in: "query"
            required: false
            description: "The time to start tracing search in unix timestamp millis. TODO: Also support lookback times like: -2d (= 2 days before current time)."
            schema:
              type: string
          - name: tags
            in: "query"
            required: false
            description: "The tracing tags (attributes) to filter for as JSON / map whereas key is the tag name and value is the tag value. All tags are AND connected."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - tracing
  "/api/v3/command/tracing.services":
    post:
      summary: "Returns a list of all available services covered in distributed tracing."
      description: |
        Returns a list of all available services covered in distributed tracing. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=tracing.services' target='_blank'>Search Academy for more details about: <b>tracing.services</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - tracing.services:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/tracing.services' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - tracing
  "/api/v3/command/transform":
    post:
      summary: "This transformer converts the input to an output format by applying the given template engine"
      description: |
        This transformer converts the input to an output format by applying the given template engine. By default the current message is provided as model inside the template context so you can access body, vars or headers similar to the default PEL approach. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=transform' target='_blank'>Search Academy for more details about: <b>transform</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - transform:
              engine: string
              groupBy: string
              iterate: string
              modelName: string
              template: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/transform?engine=string&groupBy=string&iterate=string&modelName=string&template=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: engine
            in: "query"
            required: false
            description: "The template engine to be used. Currently 'freemarker' and 'pel' is supported."
            schema:
              type: string
          - name: groupBy
            in: "query"
            required: false
            description: "An expression to apply on the target list in order to group the result of a row into. If the expression returns false, the row result is added to the end of the list.If null or empty, each row result creates a new entry in the target list."
            schema:
              type: string
          - name: iterate
            in: "query"
            required: false
            description: "If true, the input is expected to be a list which will be iterated. The template is then applied on each iteration row and the result is added to a target list."
            schema:
              type: string
          - name: modelName
            in: "query"
            required: false
            description: "The name of the root model under which the input can be accessed inside the template. If null or empty, then the input defines the model names."
            schema:
              type: string
          - name: template
            in: "query"
            required: true
            description: "The template to be used for the transformation. It can the template text itself as string or a qualified uri pointing to a template resource like this for example: $uri:property:/my/template/path"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - transform
  "/api/v3/command/transform.csv.json":
    post:
      summary: "Takes a CSV document in the body and converts it to a JSON. The CSV document must comply with the RFC4180 standard format."
      description: |
        Takes a CSV document in the body and converts it to a JSON. The CSV document must comply with the RFC4180 standard format. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=transform.csv.json' target='_blank'>Search Academy for more details about: <b>transform.csv.json</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - transform.csv.json:
              delimiter: string
              hasHeadersLine: string
              rowsFormat: string
              showColumnsCountField: string
              showHeadersField: string
              showRowsCountField: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/transform.csv.json?delimiter=string&hasHeadersLine=string&rowsFormat=string&showColumnsCountField=string&showHeadersField=string&showRowsCountField=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: delimiter
            in: "query"
            required: false
            description: "The delimiter (separator) to separate the columns of the CSV"
            schema:
              type: string
          - name: hasHeadersLine
            in: "query"
            required: false
            description: "Does the first line of the input CSV contain the column header names?"
            schema:
              type: string
          - name: rowsFormat
            in: "query"
            required: false
            description: "The JSON format of the rows section: arrays (= array with nested string arrays with each CSV line as such a new nested array), objects (= each CSV line will become a new JSON object in the rows array with the CSV headers as the field keys)"
            schema:
              type: string
          - name: showColumnsCountField
            in: "query"
            required: false
            description: "Show the number of headers (columns) in element columnsCount?"
            schema:
              type: string
          - name: showHeadersField
            in: "query"
            required: false
            description: "Show the column header names in extra element headers? This is only shown if hasHeaders is true. In this case, the values array doesnt contain a first headers line."
            schema:
              type: string
          - name: showRowsCountField
            in: "query"
            required: false
            description: "Show the number of rows (values) in element rowsCount?"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - transform
  "/api/v3/command/transform.ftl":
    post:
      summary: "This transformer uses the FreeMarker template engine for its transformation."
      description: |
        This transformer uses the FreeMarker template engine for its transformation. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=transform.ftl' target='_blank'>Search Academy for more details about: <b>transform.ftl</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - transform.ftl:
              model: string
              template: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/transform.ftl?model=string&template=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: model
            in: "query"
            required: false
            description: "The model to be placed into the template scope. If null, the message is used as model so you can access vars and body the same way as you would do in the pipeline."
            schema:
              type: string
          - name: template
            in: "query"
            required: false
            description: "The template to be used for the transformation. If null, the template is expected in the body. Otherwise this param value is used. It can be a static template string or a qualified uri or a (for example $uri:property:/my/template/path) pointing to the template. Pipeline expressions are not supported here since they would conflict with the template variables."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - transform
  "/api/v3/command/transform.html2docx":
    post:
      summary: "Takes html text that is expected in the body, (as pipeline resource) and converts it back to docx document and then writes to output."
      description: |
        Takes html text that is expected in the body, (as pipeline resource) and converts it back to docx document and then writes to output. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=transform.html2docx' target='_blank'>Search Academy for more details about: <b>transform.html2docx</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - transform.html2docx:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/transform.html2docx' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - transform
  "/api/v3/command/transform.json.xml":
    post:
      summary: "Takes a JSON document or JSON string in the body and converts it to an XML document."
      description: |
        Takes a JSON document or JSON string in the body and converts it to an XML document. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=transform.json.xml' target='_blank'>Search Academy for more details about: <b>transform.json.xml</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - transform.json.xml:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/transform.json.xml' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - transform
  "/api/v3/command/transform.pdf2png":
    post:
      summary: "Takes pdf that is expected in the body, (as pipeline resource) and converts it back to body (as pipeline resource) as a collection of png images."
      description: |
        Takes pdf that is expected in the body, (as pipeline resource) and converts it back to body (as pipeline resource) as a collection of png images. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=transform.pdf2png' target='_blank'>Search Academy for more details about: <b>transform.pdf2png</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - transform.pdf2png:
              dpi: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/transform.pdf2png?dpi=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: dpi
            in: "query"
            required: false
            description: "DPI to use for conversion. 300 DPI is used when not specified."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - transform
  "/api/v3/command/transform.png2pdf":
    post:
      summary: "Takes collection of pngs that is expected in the body (as pipeline resource) and converts it back to body (as pipeline resource) to pdf document."
      description: |
        Takes collection of pngs that is expected in the body (as pipeline resource) and converts it back to body (as pipeline resource) to pdf document. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=transform.png2pdf' target='_blank'>Search Academy for more details about: <b>transform.png2pdf</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - transform.png2pdf:
              dpi: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/transform.png2pdf?dpi=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: dpi
            in: "query"
            required: false
            description: "DPI to forcibly use for conversion."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - transform
  "/api/v3/command/transform.word2pdf":
    post:
      summary: "DEPRECATED"
      description: |
        DEPRECATED. Use microsoft.word.export.pdf instead. Takes a word file (.docx) that is expected in the <br/>body and converts<br/>it to pdf and stores it back into the body. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=transform.word2pdf' target='_blank'>Search Academy for more details about: <b>transform.word2pdf</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - transform.word2pdf:
              path: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/transform.word2pdf?path=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: path
            in: "query"
            required: false
            description: "Provides the URL the word document is located at. If set, it uses REST PDF conversion service instead of library."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - transform
  "/api/v3/command/transform.wordtemplate":
    post:
      summary: "Transforms velocity template expressions in word files"
      description: |
        Transforms velocity template expressions in word files. It expects the template to be in the body or in thetemplate param, transforms it and puts the result back to the body as byte array content. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=transform.wordtemplate' target='_blank'>Search Academy for more details about: <b>transform.wordtemplate</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - transform.wordtemplate:
              model: string
              template: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/transform.wordtemplate?model=string&template=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: model
            in: "query"
            required: true
            description: "The model to be placed into the template scope. May not be null."
            schema:
              type: string
          - name: template
            in: "query"
            required: false
            description: "The template to be used for the transformation. If null, the template is expected in the body. Otherwise this param is used. It can be a PE, a static string or a qualified uri (for example uri:classpath:/my/template/path.docx) pointing to the template."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - transform
  "/api/v3/command/transform.xml.json":
    post:
      summary: "Takes an XML document or XML string in the body and converts it to a JSON"
      description: |
        Takes an XML document or XML string in the body and converts it to a JSON. By default, the PIPEFORCE XML to JSON conversion rules will be applied (see https://pipeforce.github.io/docs/guides/transformers/xml2json). <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=transform.xml.json' target='_blank'>Search Academy for more details about: <b>transform.xml.json</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - transform.xml.json:
              scheme: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/transform.xml.json?scheme=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: scheme
            in: "query"
            required: false
            description: "The conversion scheme to be used. If null or empty, the default PIPEFORCE rules apply. If set to 'jackson', the rules defined by XML Jackson will be applied."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: input
            in: "query"
            required: false
            description: "Defines where to read the input from as PEL. If this param is missing, the input will be read from the body."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - transform
  "/api/v3/command/translate":
    post:
      summary: "Translates the given text to the given target language. Expects the input by default in the body and writes the result by default back to the body."
      description: |
        Translates the given text to the given target language. Expects the input by default in the body and writes the result by default back to the body. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=translate' target='_blank'>Search Academy for more details about: <b>translate</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - translate:
              apiKey: string
              filter: string
              restUrl: string
              secret: string
              targetLanguage: string
              text: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/translate?apiKey=string&filter=string&restUrl=string&secret=string&targetLanguage=string&text=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: apiKey
            in: "query"
            required: false
            description: "The alternative API key to connect to the service. If null or empty, the default one will be used, as defined by the default backend settings."
            schema:
              type: string
          - name: filter
            in: "query"
            required: false
            description: "A PEL as filter to be applied to the output data before it is returned by this command. If null or empty, no filter is applied."
            schema:
              type: string
          - name: restUrl
            in: "query"
            required: false
            description: "The URL to be called by the command. If null or empty, the default url will be used as defined in the backend."
            schema:
              type: string
          - name: secret
            in: "query"
            required: false
            description: "The secret text to be used. Expects the translate service API token and url stored in the secret store under this name. The entry must be a JSON like this {'restUrl':'', 'apiKey':''}."
            schema:
              type: string
          - name: targetLanguage
            in: "query"
            required: false
            description: "The target language to transform the text to. Supported values: DE, EN, FR, IT, JA, ES, NL, PL, PT, RU, ZH"
            schema:
              type: string
          - name: text
            in: "query"
            required: true
            description: "The text to be translated."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - translate
  "/api/v3/command/unzip":
    post:
      summary: "Unzips a given zipped content from the body and puts the uncompressed content into the output"
      description: |
        Unzips a given zipped content from the body and puts the uncompressed content into the output. Note: Currently only files in the root level of the zip are supported. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=unzip' target='_blank'>Search Academy for more details about: <b>unzip</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - unzip:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/unzip' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - unzip
  "/api/v3/command/var.set":
    post:
      summary: "Sets a value in the vars scope. Overwrites any existing var in the vars scope. The value to be set can be a constant or an expression."
      description: |
        Sets a value in the vars scope. Overwrites any existing var in the vars scope. The value to be set can be a constant or an expression. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=var.set' target='_blank'>Search Academy for more details about: <b>var.set</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - var.set:
              format: string
              key: string
              value: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/var.set?format=string&key=string&value=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: format
            in: "query"
            required: false
            description: "Converts a string value to the given target format if possible. If set to 'auto' tries to detect the target format by inspecting the value string. If set to 'none' doesnt apply any conversion."
            schema:
              type: string
          - name: key
            in: "query"
            required: true
            description: "A string or an expression to be used as key of the var to be set."
            schema:
              type: string
          - name: value
            in: "query"
            required: true
            description: "A string or an expression to be used as the value to be set."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - var
  "/api/v3/command/vars":
    post:
      summary: "This command allows to set multiple variables in one command. It can create new variables in the vars scope or overwrite existing ones."
      description: |
        This command allows to set multiple variables in one command. It can create new variables in the vars scope or overwrite existing ones. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=vars' target='_blank'>Search Academy for more details about: <b>vars</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - vars:
              set: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/vars?set=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: set
            in: "query"
            required: true
            description: "(default) A list of key-value pairs to be evaluated in order to set variables."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - vars
  "/api/v3/command/wait":
    post:
      summary: "Waits a certain amount of time with next execution."
      description: |
        Waits a certain amount of time with next execution. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=wait' target='_blank'>Search Academy for more details about: <b>wait</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - wait:
              ms: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/wait?ms=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: ms
            in: "query"
            required: false
            description: "(default) The time to wait in milliseconds."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - wait
  "/api/v3/command/webhook.delete":
    post:
      summary: "Deletes an existing webhook. If no such webhook exists, nothing happens."
      description: |
        Deletes an existing webhook. If no such webhook exists, nothing happens. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=webhook.delete' target='_blank'>Search Academy for more details about: <b>webhook.delete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - webhook.delete:
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/webhook.delete?uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: uuid
            in: "query"
            required: true
            description: "Id of the webhook to delete."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - webhook
  "/api/v3/command/webhook.get":
    post:
      summary: "Returns all persisted webhooks as a list."
      description: |
        Returns all persisted webhooks as a list. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=webhook.get' target='_blank'>Search Academy for more details about: <b>webhook.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - webhook.get:
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/webhook.get?uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: uuid
            in: "query"
            required: false
            description: "Id of the single webhook to return. If null or empty, all webhooks will be returned."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - webhook
  "/api/v3/command/webhook.put":
    post:
      summary: "Creates a new webhook or updates an existing one and returns its metadata."
      description: |
        Creates a new webhook or updates an existing one and returns its metadata. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=webhook.put' target='_blank'>Search Academy for more details about: <b>webhook.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - webhook.put:
              eventKey: string
              maxPayloadLength: string
              payloadType: string
              pipeline: string
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/webhook.put?eventKey=string&maxPayloadLength=string&payloadType=string&pipeline=string&uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: eventKey
            in: "query"
            required: true
            description: "Id of the event to be fired when hook was called."
            schema:
              type: string
          - name: maxPayloadLength
            in: "query"
            required: false
            description: "The max. length of the payload of this webhook in bytes. If this webhook is called with content in body bigger than this, an exception will be thrown."
            schema:
              type: string
          - name: payloadType
            in: "query"
            required: false
            description: "How to handle the payload before it gets published into the message broker? Possible values are: 'raw' (use the payload as it is), 'base64' (encode it base64, = default), 'outbound' (save the payload into a tmp cache and refer to it using an outbound url), 'ignore' (do not send the payload into the messaging)."
            schema:
              type: string
          - name: pipeline
            in: "query"
            required: false
            description: "DEPRECATED: Link to pipeline via messaging instead."
            schema:
              type: string
          - name: uuid
            in: "query"
            required: false
            description: "The id (=token) of an existing webhook. If given, tries to update this webhook. In case no such webhook exists, creates a new one with given token."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - webhook
  "/api/v3/command/webhook.receive":
    post:
      summary: "Runs a webhook identified by its uuid (token)"
      description: |
        Runs a webhook identified by its uuid (token). The webhook is called async. Enable redirects in your client, set pollingRedirectEnabled:true and follow the 503 redirect if you need to retrieve the final result. In case the webhook with given token doesn't exist, nothing happens for security reasons. There is no feedback whether a webhook exists or not. A status code of 200 or 503 is returned by default. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=webhook.receive' target='_blank'>Search Academy for more details about: <b>webhook.receive</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - webhook.receive:
              pollingRedirectEnabled: string
              token: string
              uuid: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/webhook.receive?pollingRedirectEnabled=string&token=string&uuid=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: pollingRedirectEnabled
            in: "query"
            required: false
            description: "Should the response contain a 503 status (redirect) in case the webhook result is not finished yet so a long polling is possible? If true, the 503 status is returned to the caller with a target url. If caller client follows this redirect, it can long poll on the target url for the final result. Otherwise a 200 is returned without any result. Note: The process is ALWAYS started async in the backend. So if a final result is expected, it must be retrieved always using long polling or a message listener."
            schema:
              type: string
          - name: token
            in: "query"
            required: true
            description: "The unique token of the webhook. Can passed as request param or as header (recommended) to call the webhook from outside."
            schema:
              type: string
          - name: uuid
            in: "query"
            required: false
            description: "The uuid of the webhook (deprecated, use token instead)."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - webhook
  "/api/v3/command/webhook.receive.logs":
    post:
      summary: "Returns the receive logs of the given webhook. Note: This command is currently experimental and returns just dummy data."
      description: |
        Returns the receive logs of the given webhook. Note: This command is currently experimental and returns just dummy data. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=webhook.receive.logs' target='_blank'>Search Academy for more details about: <b>webhook.receive.logs</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - webhook.receive.logs:
              token: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/webhook.receive.logs?token=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: token
            in: "query"
            required: true
            description: "The unique token of the webhook to list logs for."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - webhook
  "/api/v3/command/workflow.assert":
    post:
      summary: "Applies asserts for a given workflow in the workflow service."
      description: |
        Applies asserts for a given workflow in the workflow service. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=workflow.assert' target='_blank'>Search Academy for more details about: <b>workflow.assert</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - workflow.assert:
              hasNotPassed: string
              hasPassed: string
              processFinished: string
              processInstanceId: string
              throwException: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/workflow.assert?hasNotPassed=string&hasPassed=string&processFinished=string&processInstanceId=string&throwException=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: hasNotPassed
            in: "query"
            required: false
            description: "A comma separated list of task names to check whether they have not yet passed."
            schema:
              type: string
          - name: hasPassed
            in: "query"
            required: false
            description: "A comma separated list of task names to check whether they have been passed."
            schema:
              type: string
          - name: processFinished
            in: "query"
            required: false
            description: "If true, checks whether the process with given id has been finished."
            schema:
              type: string
          - name: processInstanceId
            in: "query"
            required: true
            description: "The id of the process instance the task to check belongs to."
            schema:
              type: string
          - name: throwException
            in: "query"
            required: false
            description: "If true, throws exception when assert is false. Otherwise returns the status in the body."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - workflow
  "/api/v3/command/workflow.definition.find":
    post:
      summary: "Returns all workflow definition properties from the property store, the currently logged-in user is allowed to see."
      description: |
        Returns all workflow definition properties from the property store, the currently logged-in user is allowed to see. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=workflow.definition.find' target='_blank'>Search Academy for more details about: <b>workflow.definition.find</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - workflow.definition.find:
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/workflow.definition.find' \
        -u 'username:password' 
        ```
      parameters:
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - workflow
  "/api/v3/command/workflow.deploy":
    post:
      summary: "Deploys a given BPMN from the body or a given property into the underlying workflow engine."
      description: |
        Deploys a given BPMN from the body or a given property into the underlying workflow engine. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=workflow.deploy' target='_blank'>Search Academy for more details about: <b>workflow.deploy</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - workflow.deploy:
              appId: string
              name: string
              propertyKey: string
              propertyPath: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/workflow.deploy?appId=string&name=string&propertyKey=string&propertyPath=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: appId
            in: "query"
            required: false
            description: "The appId to be used to prefix the process name with: appId_workflowname. If null or empty no prefix is appended."
            schema:
              type: string
          - name: name
            in: "query"
            required: true
            description: "The name to deploy the workflow under."
            schema:
              type: string
          - name: propertyKey
            in: "query"
            required: false
            description: "DEPRECATED. Use propertyPath instead."
            schema:
              type: string
          - name: propertyPath
            in: "query"
            required: false
            description: "The optional path of a workflow property containing a BPMN as value. If this is given, name and appId will be extracted from this key in case these params are empty. If this param is missing, the BPMN is expected to be in the body."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - workflow
  "/api/v3/command/workflow.deployment.find":
    post:
      summary: "Finds all deployments from the workflow engine matching given parameters and puts them into the body."
      description: |
        Finds all deployments from the workflow engine matching given parameters and puts them into the body. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=workflow.deployment.find' target='_blank'>Search Academy for more details about: <b>workflow.deployment.find</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - workflow.deployment.find:
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/workflow.deployment.find?name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: name
            in: "query"
            required: false
            description: "Name of the deployment. Exact match."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - workflow
  "/api/v3/command/workflow.event":
    post:
      summary: "Sends an event message to a message endpoint inside <br/>a given workflow"
      description: |
        Sends an event message to a message endpoint inside <br/>a given workflow. As payload of the event message, <br/>the current pipe message will be used as input. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=workflow.event' target='_blank'>Search Academy for more details about: <b>workflow.event</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - workflow.event:
              businessKey: string
              messageName: string
              processInstanceId: string
              variables: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/workflow.event?businessKey=string&messageName=string&processInstanceId=string&variables=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: businessKey
            in: "query"
            required: false
            description: "The business key of the process which needs to be informed by the event. One of businessKey or processInstanceId must be given."
            schema:
              type: string
          - name: messageName
            in: "query"
            required: true
            description: "The name of this message. It is used to find the endpoint to be triggered in the workflow."
            schema:
              type: string
          - name: processInstanceId
            in: "query"
            required: false
            description: "The processInstanceId which refers to the process to be notified by this event. One of businessKey or processInstanceId must be given."
            schema:
              type: string
          - name: variables
            in: "query"
            required: false
            description: "The process variables to apply on message target."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - workflow
  "/api/v3/command/workflow.find.processinstances":
    post:
      summary: "Returns all process instances matching the given criteria."
      description: |
        Returns all process instances matching the given criteria. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=workflow.find.processinstances' target='_blank'>Search Academy for more details about: <b>workflow.find.processinstances</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - workflow.find.processinstances:
              processInstanceBusinessKey: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/workflow.find.processinstances?processInstanceBusinessKey=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: processInstanceBusinessKey
            in: "query"
            required: false
            description: "Filter tasks by businessKey."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - workflow
  "/api/v3/command/workflow.history.tasks":
    post:
      summary: "Returns all finished tasks matching the given criteria."
      description: |
        Returns all finished tasks matching the given criteria. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=workflow.history.tasks' target='_blank'>Search Academy for more details about: <b>workflow.history.tasks</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - workflow.history.tasks:
              assignee: string
              dueBefore: string
              includeVariables: string
              processInstanceBusinessKey: string
              processInstanceId: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/workflow.history.tasks?assignee=string&dueBefore=string&includeVariables=string&processInstanceBusinessKey=string&processInstanceId=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: assignee
            in: "query"
            required: false
            description: "Filter tasks by assignee."
            schema:
              type: string
          - name: dueBefore
            in: "query"
            required: false
            description: "Shows all tasks that are due before this ISO8601 date. Optional"
            schema:
              type: string
          - name: includeVariables
            in: "query"
            required: false
            description: "Should each task also list its historic variables?"
            schema:
              type: string
          - name: processInstanceBusinessKey
            in: "query"
            required: false
            description: "Filter tasks by businessKey."
            schema:
              type: string
          - name: processInstanceId
            in: "query"
            required: true
            description: "Filter tasks by process instance id."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - workflow
  "/api/v3/command/workflow.member.message":
    post:
      summary: "Sends a message to the given workflow member"
      description: |
        Sends a message to the given workflow member. In case the workflow member is not already added to the workflow model, adds a new entry to a given workflow model, which is usually a data model (JSON) with a single member structure like this: workflowModel.members[someUserId] whereas in this level user, taskUrl and shareUrl will be added if required. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=workflow.member.message' target='_blank'>Search Academy for more details about: <b>workflow.member.message</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - workflow.member.message:
              message: string
              model: string
              resourcePath: string
              subject: string
              taskUrl: string
              userId: string
              username: string
              workflowModel: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/workflow.member.message?message=string&model=string&resourcePath=string&subject=string&taskUrl=string&userId=string&username=string&workflowModel=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: message
            in: "query"
            required: false
            description: "The invite message to be used to send an invite email to the new member. Can be a text message, a uri or content object template."
            schema:
              type: string
          - name: model
            in: "query"
            required: false
            description: "The model to be used in the invite message template."
            schema:
              type: string
          - name: resourcePath
            in: "query"
            required: false
            description: "The path to a resource or folder to create a share from for the new member. If null or empty, no share is created."
            schema:
              type: string
          - name: subject
            in: "query"
            required: false
            description: "The subject of the invite message."
            schema:
              type: string
          - name: taskUrl
            in: "query"
            required: false
            description: "The url of a workflow task for the new member. If null or empty, no task is shown."
            schema:
              type: string
          - name: userId
            in: "query"
            required: false
            description: "The uuid of the user to add as member to the workflow model. One of userId or username is required."
            schema:
              type: string
          - name: username
            in: "query"
            required: false
            description: "The username of the user to add as member to the workflow model. One of userId or username is required."
            schema:
              type: string
          - name: workflowModel
            in: "query"
            required: true
            description: "The workflow model where to add the new user at (inside the sub element workflowModel/members/[userId)]. Can be a PEL which points to an loaded instance or a uri which points to a workflow model instance key."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - workflow
  "/api/v3/command/workflow.model":
    post:
      summary: "Utility command to easier workflow model handling."
      description: |
        Utility command to easier workflow model handling. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=workflow.model' target='_blank'>Search Academy for more details about: <b>workflow.model</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - workflow.model:
              mappings: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/workflow.model?mappings=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: mappings
            in: "query"
            required: false
            description: "A list of mapping rules to be applied to the given workflow model. See online docs for more details about such mapping rules."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - workflow
  "/api/v3/command/workflow.model.attachment.get":
    post:
      summary: "Returns property.attachment.content from process model property attachment."
      description: |
        Returns property.attachment.content from process model property attachment. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=workflow.model.attachment.get' target='_blank'>Search Academy for more details about: <b>workflow.model.attachment.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - workflow.model.attachment.get:
              fileName: string
              processInstanceId: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/workflow.model.attachment.get?fileName=string&processInstanceId=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: fileName
            in: "query"
            required: true
            description: "The attachment name."
            schema:
              type: string
          - name: processInstanceId
            in: "query"
            required: true
            description: "The process instance id."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - workflow
  "/api/v3/command/workflow.model.attachment.put":
    post:
      summary: "Does property.attachment.put to process model property attachment."
      description: |
        Does property.attachment.put to process model property attachment. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=workflow.model.attachment.put' target='_blank'>Search Academy for more details about: <b>workflow.model.attachment.put</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - workflow.model.attachment.put:
              contentType: string
              fileName: string
              processInstanceId: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/workflow.model.attachment.put?contentType=string&fileName=string&processInstanceId=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: contentType
            in: "query"
            required: false
            description: "The content type to be used for this attachment."
            schema:
              type: string
          - name: fileName
            in: "query"
            required: true
            description: "The name of the attachment to be created. If an attachment with this name already exists, updates the existing one."
            schema:
              type: string
          - name: processInstanceId
            in: "query"
            required: true
            description: "The process instance id."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - workflow
  "/api/v3/command/workflow.start":
    post:
      summary: "Starts a new instance of a process in the workflow engine"
      description: |
        Starts a new instance of a process in the workflow engine. <br/>The given pipe message will be serialized to JSON and<br/>put as variable <code>pipeJson</code> into context of the <br/>process (process variables).<br/>Returns the input message unchanged. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=workflow.start' target='_blank'>Search Academy for more details about: <b>workflow.start</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - workflow.start:
              businessKey: string
              key: string
              variables: string
              workflowModelInstanceKey: string
              workflowStartedBy: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/workflow.start?businessKey=string&key=string&variables=string&workflowModelInstanceKey=string&workflowStartedBy=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: businessKey
            in: "query"
            required: false
            description: "The business key of the process to start in the workflow engine for later references."
            schema:
              type: string
          - name: key
            in: "query"
            required: true
            description: "The key of the process to start in the workflow engine."
            schema:
              type: string
          - name: variables
            in: "query"
            required: false
            description: "A map of variables to be send to the workflow process. If this param is missing, the full pipeline message is flattened and then send to the workflow process as variables."
            schema:
              type: string
          - name: workflowModelInstanceKey
            in: "query"
            required: false
            description: "The optional property key of the central process model instance to be used. Will be passed under this name to the process engine as process variable.Note: The model instance key must start with an app path followed by an object path. For example global/app/myApp/object/someObject/v1/instance/SOME_UUID."
            schema:
              type: string
          - name: workflowStartedBy
            in: "query"
            required: false
            description: "The name of the process variable which holds the uuid of the user who started this process using this command. If null or empty, the currently logged-in user willbe used instead."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - workflow
  "/api/v3/command/workflow.task.claim":
    post:
      summary: "Claims a given task to a given user."
      description: |
        Claims a given task to a given user. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=workflow.task.claim' target='_blank'>Search Academy for more details about: <b>workflow.task.claim</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - workflow.task.claim:
              taskId: string
              username: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/workflow.task.claim?taskId=string&username=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: taskId
            in: "query"
            required: true
            description: "The id (not name!) of the task to claim."
            schema:
              type: string
          - name: username
            in: "query"
            required: true
            description: "The username of the user to claim the task for"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - workflow
  "/api/v3/command/workflow.task.complete":
    post:
      summary: "Completes a given workflow task and puts any resulting variable from the task in the body."
      description: |
        Completes a given workflow task and puts any resulting variable from the task in the body. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=workflow.task.complete' target='_blank'>Search Academy for more details about: <b>workflow.task.complete</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - workflow.task.complete:
              claim: string
              taskId: string
              variables: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/workflow.task.complete?claim=string&taskId=string&variables=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: claim
            in: "query"
            required: false
            description: "A username to define if to claim task by specified user before completion. Default is null, when claim is not needed."
            schema:
              type: string
          - name: taskId
            in: "query"
            required: true
            description: "The id (not name!) of the task to complete."
            schema:
              type: string
          - name: variables
            in: "query"
            required: false
            description: "A map of variables to be passed to the task. Can be null."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - workflow
  "/api/v3/command/workflow.tasks":
    post:
      summary: "Returns all tasks for a given workflow"
      description: |
        Returns all tasks for a given workflow. Returned parameters are dynamically and depend on the underlying workflow engine. Default result format is [{id:taskId, name:taskName, assignee:userId, created:createdDate, due:dueDate, tenant:tenantId}, ...]. For a detailed description about all returned attributes see the default implementation: https://docs.camunda.org/manual/7.7/reference/rest/task/get-query/ <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=workflow.tasks' target='_blank'>Search Academy for more details about: <b>workflow.tasks</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - workflow.tasks:
              assignee: string
              dueBefore: string
              processInstanceBusinessKey: string
              processInstanceId: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/workflow.tasks?assignee=string&dueBefore=string&processInstanceBusinessKey=string&processInstanceId=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: assignee
            in: "query"
            required: false
            description: "Filter tasks by assignee."
            schema:
              type: string
          - name: dueBefore
            in: "query"
            required: false
            description: "Shows all tasks that are due before this ISO8601 date. Optional"
            schema:
              type: string
          - name: processInstanceBusinessKey
            in: "query"
            required: false
            description: "Filter tasks by businessKey."
            schema:
              type: string
          - name: processInstanceId
            in: "query"
            required: false
            description: "Filter tasks by process instance id."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - workflow
  "/api/v3/command/workflow.tasks.open":
    post:
      summary: "Returns all open tasks grouped by assignee"
      description: |
        Returns all open tasks grouped by assignee. Returned parameters are dynamically and depend on the underlying workflow engine. Default result format is [{id:taskId, name:taskName, assignee:userId, created:createdDate, due:dueDate, tenant:tenantId}, ...]. For a detailed description about all returned attributes see the default implementation: https://docs.camunda.org/manual/7.7/reference/rest/task/get-query/ <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=workflow.tasks.open' target='_blank'>Search Academy for more details about: <b>workflow.tasks.open</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - workflow.tasks.open:
              assignee: string
              dueBefore: string
              processInstanceBusinessKey: string
              processInstanceId: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/workflow.tasks.open?assignee=string&dueBefore=string&processInstanceBusinessKey=string&processInstanceId=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: assignee
            in: "query"
            required: false
            description: "Filter tasks by assignee."
            schema:
              type: string
          - name: dueBefore
            in: "query"
            required: false
            description: "Shows all tasks that are due before this ISO8601 date. Optional"
            schema:
              type: string
          - name: processInstanceBusinessKey
            in: "query"
            required: false
            description: "Filter tasks by businessKey."
            schema:
              type: string
          - name: processInstanceId
            in: "query"
            required: false
            description: "Filter tasks by process instance id."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - workflow
  "/api/v3/command/workflow.tasks.open.reminder":
    post:
      summary: "Sends a reminder email to each assignee having open tasks matching given criteria."
      description: |
        Sends a reminder email to each assignee having open tasks matching given criteria. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=workflow.tasks.open.reminder' target='_blank'>Search Academy for more details about: <b>workflow.tasks.open.reminder</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - workflow.tasks.open.reminder:
              assignee: string
              dueBefore: string
              processInstanceBusinessKey: string
              processInstanceId: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/workflow.tasks.open.reminder?assignee=string&dueBefore=string&processInstanceBusinessKey=string&processInstanceId=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: assignee
            in: "query"
            required: false
            description: "Filter tasks by assignee."
            schema:
              type: string
          - name: dueBefore
            in: "query"
            required: false
            description: "Shows all tasks that are due before this ISO8601 date. Optional"
            schema:
              type: string
          - name: processInstanceBusinessKey
            in: "query"
            required: false
            description: "Filter tasks by businessKey."
            schema:
              type: string
          - name: processInstanceId
            in: "query"
            required: false
            description: "Filter tasks by process instance id."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - workflow
  "/api/v3/command/workflow.undeploy":
    post:
      summary: "Undeploys a given BPMN from workflow engine."
      description: |
        Undeploys a given BPMN from workflow engine. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=workflow.undeploy' target='_blank'>Search Academy for more details about: <b>workflow.undeploy</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - workflow.undeploy:
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/workflow.undeploy?name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: name
            in: "query"
            required: true
            description: "The name of the deployment to remove."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
      tags:
        - Command API - workflow
  "/api/v3/command/workflow.users":
    post:
      summary: "Returns all users eligible to participate in given workflow."
      description: |
        Returns all users eligible to participate in given workflow. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=workflow.users' target='_blank'>Search Academy for more details about: <b>workflow.users</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - workflow.users:
              processDefinitionId: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/workflow.users?processDefinitionId=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: processDefinitionId
            in: "query"
            required: false
            description: "The id of the process definition."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - workflow
  "/api/v3/command/workflow.variables.get":
    post:
      summary: "Returns the variables of a given process instance from the workflow engine as JSON whereas the name of the variable becomes the JSON attribute name an..."
      description: |
        Returns the variables of a given process instance from the workflow engine as JSON whereas the name of the variable becomes the JSON attribute name and the value of the variable becomes the JSON attribute value. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=workflow.variables.get' target='_blank'>Search Academy for more details about: <b>workflow.variables.get</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - workflow.variables.get:
              parseJsonString: string
              processInstanceId: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/workflow.variables.get?parseJsonString=string&processInstanceId=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: parseJsonString
            in: "query"
            required: false
            description: "Tests if a workflow variable contains a JSON string and if so, converts this JSON string into a JSON object and sets it as value for the variable in the output JSON."
            schema:
              type: string
          - name: processInstanceId
            in: "query"
            required: true
            description: "The process instance id."
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - workflow
  "/api/v3/command/zip":
    post:
      summary: "Compresses a given content in the body and puts the compressed data into the output"
      description: |
        Compresses a given content in the body and puts the compressed data into the output. If content is a content collection, puts all entries in the resulting zip file. Note: Currently a nested content collection is currently not supported! Any content entry must be at the root level. <br/><br/>
        <a href='https://logabit.atlassian.net/wiki/search?text=zip' target='_blank'>Search Academy for more details about: <b>zip</b></a>.
        <br/><br/>
        Pipeline example (copy & paste to the low code playground):
        ```yaml
        pipeline:
          - zip:
              level: string
              name: string
        ```
        <br/>
        cURL example (copy & paste to your terminal):
        ```bash
        curl -X POST 'https://hub-namespace.pipeforce.net/api/v3/command/zip?level=string&name=string' \
        -u 'username:password' 
        ```
      parameters:
          - name: level
            in: "query"
            required: false
            description: "Sets the compression level 0-9. If not set, the default level is used which could vary."
            schema:
              type: string
          - name: name
            in: "query"
            required: false
            description: "The name of the final zip file. If not given, the name will be set by this rule: If it is a single entry, uses the name of the entry + .zip. If there are multiple entries, creates a random name + .zip"
            schema:
              type: string
          - name: eval
            in: "query"
            required: false
            description: "An expression which is evaluated finally, after this command has been executed. This can be used for cleanup-tasks or to simplify data transformations."
            schema:
              type: string
          - name: id
            in: "query"
            required: false
            description: "The optional id of this command, unique within the pipeline."
            schema:
              type: string
          - name: if
            in: "query"
            required: false
            description: "Is the command enabled (if=true)? Can be a static boolean value of a PE to be evaluated. If this value is set to false, negative number, null or empty string, the command is disabled and will be skipped when defined in a pipeline. By default it is set to true = command is enabled."
            schema:
              type: string
          - name: onError
            in: "query"
            required: false
            description: "Defines the action in case an error happens. Default is 'THROW': Stops execution and throws the error to the caller. This parameter has precedence over the optional header with same name."
            schema:
              type: string
          - name: output
            in: "query"
            required: false
            description: "Defines a PEL where to write the result of this command. If null or empty, then the result is written to the body."
            schema:
              type: string
      tags:
        - Command API - zip
  ### ---

components:
  schemas:

    Pipeline:
      type: object
      description: A PIPEFORCE pipeline script.
      properties:
        headers:
          type: object
          properties:
            key1:
              type: string
              default: headerValue1
            key2:
              type: string
              default: headerValue2
        vars:
          type: object
          properties:
            varName1:
              type: string
              default: varValue1
            varName2:
              type: string
              default: varValue2
        pipeline:
          type: array
          items:
            type: object
            properties:
              command.name:
                type: object
                properties:
                  commandParam1:
                    type: string
                  commandParam2:
                    type: string

    PipelineResult:
      type: object
      description: |
        If pipeline could be executed without problems, this is returned as a result: The final body of the pipeline will become the body of the response. This means the response body and the Content-Type of the response is dynamic. 
        By default it is set to `application/json`.
      properties:
        hello:
          type: string
          default: world

    PipelineMultipart:
      type: object
      properties:
        pipeline:
          type: object
          description: The pipeline script.
        file1:
          type: object
        file2:
          type: object

    ErrorResult:
      type: object
      description: Will be returned in case of an error.
      properties:
        status:
          type: string
          default: error
          description: The status constant of this error.
        statusCode:
          type: integer
          default: 500
          description: The status code if this error.
        statusMessage:
          type: string
          default: INTERNAL_SERVER_ERROR
          description: The status message of this error.
        value:
          type: object
          properties:
            type:
              type: string
              default: SomeException
              description: The type of this error. Usually corresponds with internal exception types.
            statusCode:
              type: integer
              default: 500
              description: The status code of the error.
            message:
              type: string
              description: The error message.
            uuid:
              type: string
              description: The unique id of this error.
            time:
              type: integer
              description: The unix timestamp in millis when this error happened.
            namespace:
              type: string
              description: The namespace of the PIPEFORCE instance.
            domain:
              type: string
              description: The domain of the PIPEFORCE instance.
            auth:
              type: string
              description: The username of the user who was logged-in when this error happened.
            spanId:
              type: string
              description: The distributed spanId to follow this error in the trace monitoring.
            traceId:
              type: string
              description: The distributed tracedId to follow this error in the trace monitoring.
            pipelinePath:
              type: string
              description: The path of the pipeline where this error happened. This is null for adhoc pipelines.
            commandName:
              type: string
              description: The name of the command where this error happened inside.
            commandLine:
              type: string
              description: The line of the command inside the pipeline where this error happened inside.
            commandPosition:
              type: string
              description: The position of the command inside the pipeline where this error happened inside.
            details:
              type: string
              description: Some optional details.
            logs:
              type: string
              description: A link to the logs viewer with a filter on this error message for more details.

